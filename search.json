[
  {
    "objectID": "04_figure_03.html",
    "href": "04_figure_03.html",
    "title": "Fig. 3 - Calculate Spectral Tree",
    "section": "",
    "text": "julia setup\nusing DrWatson\n@quickactivate projectdir()\n\nusing SpectralInference\nusing NeighborJoining\nusing NewickTree\nusing Muon, CSV, DataFrames\nusing StatsBase\nusing Random: seed!\nusing StatsPlots\nusing Gotree_jll\ntheme(:default, grid=false, label=false, tickdir=:out)\ninclude(srcdir(\"helpers.jl\"))\n\n\nimport CondaPkg\nCondaPkg.activate!(ENV)\nusing RCall\n@show readlines(`which R`)\nR\"\"\"\nlibrary(ape)\nlibrary(treeio)\nlibrary(ggtree)\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(tidytree)\n\nsetwd($(projectdir()))\n\"\"\";\n\n\nddir = datadir(\"exp_raw\", \"UP7047\")\nmicurvedir = datadir(\"exp_pro\", \"UP7047\") |&gt; mkpath\npdir_tree = plotsdir(\"UP7047_treeplots\") |&gt; mkpath\npdir_micurve = plotsdir(\"UP7047_curve\") |&gt; mkpath;",
    "crumbs": [
      "Fig. 3 - Calculate Spectral Tree"
    ]
  },
  {
    "objectID": "04_figure_03.html#calculating-the-spi-distance-matrix",
    "href": "04_figure_03.html#calculating-the-spi-distance-matrix",
    "title": "Fig. 3 - Calculate Spectral Tree",
    "section": "Calculating the SPI distance matrix",
    "text": "Calculating the SPI distance matrix\nThe next step is to compute the spectral distance matrices. There are a few ways of calling this function.\nSpectralInference relies on two conceptual parts, how we partition the spectrum and how we compute the distance within that partition.\nThus, there are two main functions in SpectralInferences\ngetintervals(singularvalues)\nand\nspectraldistances()\nThis is the entirety of spectraldistances()\nfunction spectraldistances(vecs::AbstractMatrix{&lt;:T}, vals::AbstractVector{&lt;:T}, intervals::AbstractVector) where {T&lt;:Number}\n    spimtx = zeros(size(vecs, 1), size(vecs, 1))\n    for grp in intervals\n        spimtx += Distances.pairwise(WeightedEuclidean(vals[grp]), vecs'[grp, :]; dims=2)\n    end\n    return spimtx .^ 2\nend\nThere are a few different ways to call the spectraldistances() function.\nWe could just provide the full SVD object dij = spectraldistances(usv) by default this will compute the row-wise distances.\nWe could specify that we want the column-wise distances by providing the full SVD object and an option to dispatch on the V matrix\ndij = spectraldistances(usv, onrows=false) # will compute the colwise distances\nAlternatively we can explicitly provide the vectors and values to the function. Along with a vector of Ranges that specify how to split the spectrum.\nFirst we compute and plot our partitions\n\npartitions = getintervals(usv.S, alpha=1.5, q=.75);\nsize(partitions)\n\n(880,)\n\n\n\nrectangle(x, y, w, h) = Shape(x .+ [0,w,w,0], y .+ [0,0,h,h])\nplot(\n    xlabel=\"spectral depth\",\n    ylabel=\"singular value\",\n    ticks=[exp10(i) for i in 0:4],\n    scale=:log10, \n)\nplot!(usv.S, label=\"singular values\")\n\npltpars = @. rectangle(\n    first(partitions[1:end-1]), # x\n    usv.S[first(partitions[1:end-1])], # y\n    length(partitions[1:end-1]), # width\n    usv.S[first(partitions[2:end])] - usv.S[first(partitions[1:end-1])] # height\n)\nplot!(pltpars, c=:blue, alpha=.2)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThen we compute the spectral distances using these partitions\n\n@time dij = spectraldistances(usv.U, usv.S, partitions);\n\n243.653901 seconds (639.25 k allocations: 652.763 GiB, 46.67% gc time, 0.05% compilation time: 100% of which was recompilation)",
    "crumbs": [
      "Fig. 3 - Calculate Spectral Tree"
    ]
  },
  {
    "objectID": "04_figure_03.html#calculate-a-tree-from-the-spi-distance-matrix.",
    "href": "04_figure_03.html#calculate-a-tree-from-the-spi-distance-matrix.",
    "title": "Fig. 3 - Calculate Spectral Tree",
    "section": "calculate a tree from the SPI distance matrix.",
    "text": "calculate a tree from the SPI distance matrix.\nSo far I have been using basic hierarchical clustering functions; however, basic hierarchical clustering assumes a constant rate of evolution and because this is a dataset of natural systems (i.e. bacteria across natural evolution), this core assumption is likely broken. Thus we will use neighbor joining to compute our Spectral Tree.\nWe can calculate the tree as so…\n\n@time basetreestring = NeighborJoining.newickstring(fastNJ(dij), uniprot.obs_names)\n\n  7.771650 seconds (80.46 k allocations: 4.352 GiB, 2.59% gc time)\n\n\n\n\"((((((((((UP000196862:3.792218e+03,UP000196784:2.725449e+03):1.317085e+02,((((((((UP000000495:7.179702e+03,UP000031552:4.580198e+03):8.581783e+02,UP000220251:3.746455e+03):7.454054e+02,UP000001505:5.245389e+03):5.237153e+02,(UP000000529:8.451443e+03,UP000069902:4.70780\" ⋯ 281327 bytes ⋯ \"2.996011e+03,UP000003178:5.527377e+03):2.793630e+03):1.583835e+03):9.098764e+02,((UP000264006:2.827825e+04,UP000291469:1.076784e+04):4.983053e+03,UP000268521:1.497309e+04):1.851582e+03):8.505975e+02):2.649550e+02):9.907906e+01):3.808693e+01):1.322603e+01):0.000000e+00;\"\n\n\n\n\n# write out tree\nUP7047_treedir = projectdir(\"_research\", \"UP7047_neighborjoined_spitree\") |&gt; mkpath\nopen(joinpath(UP7047_treedir, \"2020_02_UP7047-tree.nw\"), \"w\") do io\n    println(io, basetreestring)\nend\n\nSo far we have compute the reference SPI tree, we may also want some measure of how statistically confident we are on each of the branches and merges we have predicted in the tree. That is best performed through a boot strap analysis. Where we sample with replacement the features and recompute the SPI distance matrix and tree.\n\nusing Distributed\nrmprocs(workers()) # remove any current workers\naddprocs() # startup default number (8) workers \n@everywhere using DrWatson\n@everywhere @quickactivate projectdir()\n@everywhere using SpectralInference\n@everywhere using NeighborJoining\n@everywhere using Muon\n@everywhere uniprot = readh5ad(datadir(\"exp_raw\", \"UP7047\", \"2020_02_UP7047.h5ad\"))\n@everywhere upmtx = uniprot.X[:,:]\n@everywhere upids = uniprot.obs_names\n@everywhere function runbootstrap(feature_ids, mtx=upmtx, ids=upids)\n    M = mtx[:, feature_ids] #  matrix bootstrapped on columns\n    vals, vecs = eigen(Matrix(M * M')) # more efficient than SVD as it only computes the row-wise factorization\n    # floating point impercision gives some -1e-16 vals so set them to zero\n    # and take the square root to get singular values rather than eigen values\n    S = sqrt.(max.(vals, zero(eltype(vals)))) \n    dij = spectraldistances(vecs, S; alpha=1.5, q=.75) # use same params as reference tree\n    treestring = NeighborJoining.newickstring(fastNJ(dij), ids) # get tree string\nend\n\n\nnworkers()\n\n8\n\n\n\n# generate 100 bootstraps\nnboot = 100\nNfeatures = size(upmtx, 2)\nseed!(123456)\nfeature_bootstraps = map(1:nboot) do _\n    sample(1:Nfeatures, Nfeatures, replace=true) \nend;\n\n\n# takes about 90 min\n# runs bootstrap\n@time boottreestrings = pmap(runbootstrap, feature_bootstraps);\n\n5559.022621 seconds (118.23 k allocations: 33.946 MiB)\n\n\n\nboottreestrings\n\n\n100-element Vector{String}:\n \"((((((((((((((((((((UP0000952\" ⋯ 281807 bytes ⋯ \"):4.704598e+00):0.000000e+00;\"\n \"(((((((((((((((UP000249596:2.\" ⋯ 281807 bytes ⋯ \"):6.561459e+00):0.000000e+00;\"\n \"(((((((((((((UP000266328:1.68\" ⋯ 281807 bytes ⋯ \"):1.261691e+01):0.000000e+00;\"\n \"(((((((((UP000316124:5.299888\" ⋯ 281807 bytes ⋯ \"):8.761738e-01):0.000000e+00;\"\n \"(((((((((((((((((((((((UP0000\" ⋯ 281807 bytes ⋯ \"):1.281320e+01):0.000000e+00;\"\n \"(((((((((((((((((UP000275394:\" ⋯ 281807 bytes ⋯ \"):2.550188e+01):0.000000e+00;\"\n \"((((((((((((((UP000018766:3.8\" ⋯ 281807 bytes ⋯ \"):6.590331e+00):0.000000e+00;\"\n \"((((((((((((((((((((((UP00025\" ⋯ 281807 bytes ⋯ \"):6.534613e+00):0.000000e+00;\"\n \"((((((((((((UP000191049:4.271\" ⋯ 281807 bytes ⋯ \"):5.556637e+00):0.000000e+00;\"\n \"((((((((((((((((((((((UP00031\" ⋯ 281807 bytes ⋯ \"):3.365659e+00):0.000000e+00;\"\n ⋮\n \"(((((((((((((((((((UP00007684\" ⋯ 281807 bytes ⋯ \"):4.705287e+00):0.000000e+00;\"\n \"((((((((((((UP000236317:4.054\" ⋯ 281807 bytes ⋯ \"):2.269391e+01):0.000000e+00;\"\n \"(((((((((((((((((UP000252357:\" ⋯ 281807 bytes ⋯ \"):9.154203e+00):0.000000e+00;\"\n \"(((((((((((((((((((((((((UP00\" ⋯ 281807 bytes ⋯ \"):5.750832e+00):0.000000e+00;\"\n \"(((((((((((((((((((UP00000080\" ⋯ 281807 bytes ⋯ \"):7.867615e+00):0.000000e+00;\"\n \"(((((((((((((((UP000054075:1.\" ⋯ 281807 bytes ⋯ \"):2.954590e+00):0.000000e+00;\"\n \"((((((((((((((((((UP000295443\" ⋯ 281807 bytes ⋯ \"):1.126083e+01):0.000000e+00;\"\n \"((((((((((((((((((((((UP00031\" ⋯ 281807 bytes ⋯ \"):1.115432e+00):0.000000e+00;\"\n \"(((((((((((((((((((UP00000094\" ⋯ 281807 bytes ⋯ \"):2.634929e+01):0.000000e+00;\"\n\n\n\n\nrmprocs(workers())\n\nTask (done) @0x00000002bce7b3a0\n\n\n\nopen(joinpath(UP7047_treedir, \"2020_02_UP7047-boottrees.nw\"), \"w\") do io\n    for bt in boottreestrings\n        println(io, bt)\n    end\nend\n\n\n## calculate support\nrun(pipeline(`$(gotree()) compute support tbe --silent \\\n    -i $(joinpath(UP7047_treedir, \"2020_02_UP7047-tree.nw\")) \\\n    -b $(joinpath(UP7047_treedir, \"2020_02_UP7047-boottrees.nw\")) \\\n    -o $(joinpath(UP7047_treedir, \"2020_02_UP7047-supporttree.nw\"))`,\n    stderr=joinpath(UP7047_treedir, \"booster.log\")))\n\n\nProcess(setenv(`/Users/bend/.julia/artifacts/eb6a28aa115909e9dbf2104f3bf288c51b34f308/bin/gotree compute support tbe --silent -i /Users/bend/projects/Doran_etal_2023/_research/UP7047_neighborjoined_spitree/2020_02_UP7047-tree.nw -b /Users/bend/projects/Doran_etal_2023/_research/UP7047_neighborjoined_spitree/2020_02_UP7047-boottrees.nw -o /Users/bend/projects/Doran_etal_2023/_research/UP7047_neighborjoined_spitree/2020_02_UP7047-supporttree.nw`,[\"XPC_FLAGS=0x0\", \"PATH=/Users/bend/.julia/artifacts/eb6a28aa115909e9dbf2104f3bf288c51b34f308/bin:/Users/bend/.sdkman/candidates/java/current/bin:/Users/bend/micromamba/condabin:/Users/bend/.juliaup/bin:/Users/bend/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Applications/quarto/bin\", \"ELECTRON_RUN_AS_NODE=1\", \"VSCODE_CODE_CACHE_PATH=/Users/bend/Library/Application Support/Code/CachedData/0ee08df0cf4527e40edc9aa28f4b5bd38bbff2b2\", \"ZES_ENABLE_SYSMAN=1\", \"R_GZIPCMD=/usr/bin/gzip\", \"XPC_SERVICE_NAME=application.com.microsoft.VSCode.15470733.15470739\", \"HOMEBREW_PREFIX=/opt/homebrew\", \"EDITOR=vi\", \"R_LIBS_USER=/Users/bend/Library/R/arm64/4.3/library\"  …  \"R_PRINTCMD=lpr\", \"R_SHARE_DIR=/Library/Frameworks/R.framework/Resources/share\", \"CONDA_SHLVL=0\", \"SDKMAN_DIR=/Users/bend/.sdkman\", \"MAMBA_ROOT_PREFIX=/Users/bend/micromamba\", \"HOME=/Users/bend\", \"R_DOC_DIR=/Library/Frameworks/R.framework/Resources/doc\", \"R_STRIP_STATIC_LIB=strip -S\", \"OPENBLAS_MAIN_FREE=1\", \"LN_S=ln -s\"]), ProcessExited(0))\n\n\n\n\ntree = readnw(open(readline, joinpath(UP7047_treedir, \"2020_02_UP7047-supporttree.nw\")));\n\n\n# 50% majority tree\ntree_50pct = as_polytomy(n-&gt;NewickTree.support(n)&lt;.5, tree);\n\n\nopen(joinpath(UP7047_treedir, \"2020_02_UP7047-supporttree_50pct.nw\"), \"w\") do io\n    writenw(io, tree_50pct)\nend\n\n266996",
    "crumbs": [
      "Fig. 3 - Calculate Spectral Tree"
    ]
  },
  {
    "objectID": "04_figure_03.html#plot-uniprot-tree",
    "href": "04_figure_03.html#plot-uniprot-tree",
    "title": "Fig. 3 - Calculate Spectral Tree",
    "section": "Plot UniProt tree",
    "text": "Plot UniProt tree\n\nR\"\"\"\nupdir = file.path(getwd(), \"data\", \"exp_raw\", \"UP7047\")\nuptreedir = file.path(getwd(), \"_research\", \"UP7047_neighborjoined_spitree\")\nuniprot_spitree = read.newick(file.path(uptreedir, \"2020_02_UP7047-supporttree_50pct.nw\"), node.label='support')\nuplineage = read.csv(file.path(updir, \"UProwmeta.csv\"))\nuplineage$label = uplineage$Proteome_ID\n\nbiggerphyla  = sort(table(uplineage$Phylum), decreasing = TRUE)[sort(table(uplineage$Phylum), decreasing = TRUE) &gt; 100]\nbigPhylum = uplineage$Phylum\nbigPhylum[!(bigPhylum %in% names(biggerphyla))] = \"Misc. (# &lt; 100)\"\nuplineage$bigPhylum = bigPhylum\n\nuniprot_spitree_withdata = as.treedata(left_join(as_tibble(uniprot_spitree), uplineage, by='label'))\nutree_tbl = as_tibble(uniprot_spitree_withdata)\n\nmode_phylum = offspring(utree_tbl, utree_tbl$node, tiponly = FALSE, self_include = TRUE)\nmode_phylum = unlist(lapply(mode_phylum, function(x) modeest::mfv1(x$bigPhylum, na_rm=TRUE)))\n\nutree_tbl$mode_phylum = mode_phylum\nuniprot_spitree_withdata = as.treedata(utree_tbl)\noptions(repr.plot.width=15, repr.plot.height=15, ignore.negative.edge=TRUE)\ncolorvalues = c(\"grey\", RColorBrewer::brewer.pal(6, name=\"Accent\"), \"grey\")\nggtree(uniprot_spitree_withdata, \n    aes(color=mode_phylum), \n    layout=\"fan\", open.angle=10,\n    branch.length=\"none\",\n    )  %&gt;% rotate_tree(-240) +\n    ggtitle(\"UniProt Spectral Tree (Neighbor Joining)\") + \n    scale_color_manual(values=colorvalues, breaks=c(\"Misc. (# &lt; 100)\", names(biggerphyla), \"unknown\")) #+theme(legend.position=\"none\")\nggsave(file.path($pdir_tree, \"UniProt_SPItree_coloredbyPhylum.svg\"), \n    height=7,\n    width=7,\n)\n\"\"\"\nshow_svg(joinpath(pdir_tree, \"UniProt_SPItree_coloredbyPhylum.svg\"))\n\n┌ Warning: RCall.jl: Scale for y is already present.\n│ Adding another scale for y, which will replace the existing scale.\n│ Coordinate system already present. Adding new coordinate system, which will\n│ replace the existing one.\n└ @ RCall /Users/bend/.julia/packages/RCall/YrsKg/src/io.jl:172",
    "crumbs": [
      "Fig. 3 - Calculate Spectral Tree"
    ]
  },
  {
    "objectID": "04_figure_03.html#sub-clades-of-spectral-tree",
    "href": "04_figure_03.html#sub-clades-of-spectral-tree",
    "title": "Fig. 3 - Calculate Spectral Tree",
    "section": "Sub-clades of Spectral Tree",
    "text": "Sub-clades of Spectral Tree\nLook at local surrounding of a few taxa, they are with known closely taxonomically related neighbors\n\nnthparent(n, i) = i &lt; 1 ? n : nthparent(parent(n), i-1)\n\nnthparent (generic function with 1 method)\n\n\n\nrename_treeleaves!(tree, idmapping) = begin\n    for node in getleaves(tree)\n        NewickTree.setname!(node, idmapping[name(node)])\n    end\n    tree\nend\n\nrename_treeleaves! (generic function with 1 method)\n\n\n\nuptree_leaves = getleaves(tree_50pct);\n\n\ntargetspecies = \"Bifidobacterium longum\"\ntargetid = uniprot.obs.proteomeID[uniprot.obs.Species .== targetspecies][1]\nbasenode = uptree_leaves[findfirst(n-&gt;name(n) == targetid, uptree_leaves)]\nsubtree = readnw(nwstr(nthparent(basenode, 7)))\nidmapping = Dict(k=&gt;v for (k,v) in zip(getleafnames(subtree), uniprot.obs.Species[indexin(getleafnames(subtree), uniprot.obs.proteomeID)]))\nrename_treeleaves!(subtree, idmapping)\nplot(subtree,\n    c=:mediumorchid,\n    lw=2,\n    size=(600,600),\n    rightmargin=5Plots.cm,\n)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntargetspecies = \"Anaerostipes hadrus\"\ntargetid = uniprot.obs.proteomeID[uniprot.obs.Species .== targetspecies][1]\nbasenode = uptree_leaves[findfirst(n-&gt;name(n) == targetid, uptree_leaves)]\nsubtree = readnw(nwstr(nthparent(basenode, 5)))\nidmapping = Dict(k=&gt;v for (k,v) in zip(getleafnames(subtree), uniprot.obs.Species[indexin(getleafnames(subtree), uniprot.obs.proteomeID)]))\nrename_treeleaves!(subtree, idmapping)\nplot(subtree,\n    c=:turquoise,\n    lw=2,\n    size=(600,200),\n    rightmargin=5Plots.cm,\n)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntargetspecies = \"Escherichia coli\"\ntargetid = uniprot.obs.proteomeID[uniprot.obs.Species .== targetspecies][1]\nbasenode = uptree_leaves[findfirst(n-&gt;name(n) == targetid, uptree_leaves)]\nsubtree = readnw(nwstr(nthparent(basenode, 8)))\nidmapping = Dict(k=&gt;v for (k,v) in zip(getleafnames(subtree), uniprot.obs.Species[indexin(getleafnames(subtree), uniprot.obs.proteomeID)]))\nrename_treeleaves!(subtree, idmapping)\nplot(subtree,\n    c=:limegreen,\n    lw=2, alpha=.5,\n    size=(600,600),\n    rightmargin=5Plots.cm,\n)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntargetspecies = \"Bacteroides fragilis\"\ntargetid = uniprot.obs.proteomeID[uniprot.obs.Species .== targetspecies][1]\nbasenode = uptree_leaves[findfirst(n-&gt;name(n) == targetid, uptree_leaves)]\nsubtree = readnw(nwstr(nthparent(basenode, 2)))\nidmapping = Dict(k=&gt;v for (k,v) in zip(getleafnames(subtree), uniprot.obs.Species[indexin(getleafnames(subtree), uniprot.obs.proteomeID)]))\nrename_treeleaves!(subtree, idmapping)\nplot(subtree,\n    c=:lightgoldenrod3,\n    lw=2, alpha=.8,\n    size=(600,300),\n    rightmargin=5Plots.cm,\n)",
    "crumbs": [
      "Fig. 3 - Calculate Spectral Tree"
    ]
  },
  {
    "objectID": "04_figure_03.html#mutual-information-across-tree",
    "href": "04_figure_03.html#mutual-information-across-tree",
    "title": "Fig. 3 - Calculate Spectral Tree",
    "section": "Mutual Information across tree",
    "text": "Mutual Information across tree\nTo verify that our tree is systematically capturing known phylogeny we compare the grouping of the tree at varying distances from the ‘root’ to known NCBI taxonomic groupings and calculate the mutual information.\n\nNBOOTS = 50\ncolnames = [:Phylum, :Class, :Order, :Family, :Genus, :Species];\nUP_NCBI_taxonomy = uniprot.obs[:, colnames]\nobs_names = uniprot.obs_names.vals\nrowmask = map(eachrow(UP_NCBI_taxonomy)) do row\n    !any(==(\"\"), row)\nend;\n\n\n# took 5 hours\nmi_results = map(1:NBOOTS) do i\n    pairedMI_across_treedepth(eachcol(UP_NCBI_taxonomy), obs_names, tree_50pct; mask=rowmask, bootstrap=true, ncuts=100, treecut_distancefun=network_distance)\nend;\n\nmi_results_df = DataFrame()\nfor (i, res) in enumerate(mi_results)\n    mi_results_df = vcat(\n        mi_results_df, \n        hcat(\n            DataFrame(bootstrap=i, treedepth=last(res)),\n            DataFrame(first(res), colnames),\n            DataFrame(scaledcumsum.(first(res)), string.(colnames) .* \"_scaledcumsum\"),\n        )\n    )\nend\nCSV.write(joinpath(micurvedir, \"NCBI_raw_MI_values_.csv\"), mi_results_df);\n\n\nmi_results_df = CSV.read(joinpath(micurvedir, \"NCBI_raw_MI_values_.csv\"), DataFrame)\nmi_results_df\n\n5000×14 DataFrame4975 rows omitted\n\n\n\nRow\nbootstrap\ntreedepth\nPhylum\nClass\nOrder\nFamily\nGenus\nSpecies\nPhylum_scaledcumsum\nClass_scaledcumsum\nOrder_scaledcumsum\nFamily_scaledcumsum\nGenus_scaledcumsum\nSpecies_scaledcumsum\n\n\n\nInt64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\n\n\n\n\n1\n1\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n2\n1\n0.282828\n0.00185327\n0.00140159\n0.000664909\n0.000378137\n0.000164175\n8.21661e-8\n0.00051277\n0.000555696\n0.000517571\n0.000403562\n0.000403996\n4.96241e-5\n\n\n3\n1\n0.565657\n0.00183853\n0.00139375\n0.000663027\n0.00038003\n0.000163842\n4.97417e-8\n0.00102146\n0.00110828\n0.00103368\n0.000809144\n0.000807171\n7.96655e-5\n\n\n4\n1\n0.848485\n0.00185611\n0.00140952\n0.000645396\n0.000391592\n0.000161681\n1.60671e-7\n0.00153502\n0.00166712\n0.00153606\n0.00122707\n0.00120503\n0.000176703\n\n\n5\n1\n1.13131\n0.0945947\n0.04664\n0.0161751\n0.00785406\n0.00260774\n4.82814e-6\n0.0277079\n0.0201587\n0.0141269\n0.00960922\n0.00762206\n0.00309265\n\n\n6\n1\n1.41414\n0.0944801\n0.0465577\n0.0161665\n0.00785363\n0.00260356\n4.50557e-6\n0.0538491\n0.0386177\n0.026711\n0.0179909\n0.0140288\n0.00581379\n\n\n7\n1\n1.69697\n0.0944517\n0.0465807\n0.0161591\n0.00785219\n0.00261483\n3.48844e-6\n0.0799824\n0.0570858\n0.0392894\n0.0263711\n0.0204633\n0.00792062\n\n\n8\n1\n1.9798\n0.0945355\n0.0465879\n0.0161638\n0.00785501\n0.0026114\n4.11217e-6\n0.106139\n0.0755567\n0.0518714\n0.0347542\n0.0268893\n0.0104042\n\n\n9\n1\n2.26263\n0.24901\n0.127841\n0.0399273\n0.0182349\n0.00585245\n8.49059e-6\n0.175036\n0.126242\n0.0829511\n0.0542152\n0.0412907\n0.015532\n\n\n10\n1\n2.54545\n0.248812\n0.127803\n0.0397957\n0.0183007\n0.00585734\n7.72044e-6\n0.243878\n0.176913\n0.113928\n0.0737464\n0.0557042\n0.0201948\n\n\n11\n1\n2.82828\n0.248913\n0.127735\n0.039991\n0.018253\n0.00580946\n8.89131e-6\n0.312749\n0.227557\n0.145058\n0.0932268\n0.0699999\n0.0255647\n\n\n12\n1\n3.11111\n0.226629\n0.122779\n0.0415016\n0.0217262\n0.00709295\n1.23391e-5\n0.375454\n0.276236\n0.177363\n0.116414\n0.0874539\n0.0330169\n\n\n13\n1\n3.39394\n0.226926\n0.122969\n0.0414903\n0.0217421\n0.00711496\n1.06419e-5\n0.43824\n0.32499\n0.209659\n0.139618\n0.104962\n0.039444\n\n\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n\n\n4989\n50\n24.8889\n3.1453e-6\n5.74763e-6\n9.59028e-6\n9.27278e-6\n1.30322e-5\n1.78353e-11\n0.999998\n0.999994\n0.999982\n0.999973\n0.999912\n1.0\n\n\n4990\n50\n25.1717\n1.5374e-6\n2.69882e-6\n3.80017e-6\n4.07291e-6\n8.38488e-6\n8.03694e-12\n0.999998\n0.999995\n0.999985\n0.999978\n0.999933\n1.0\n\n\n4991\n50\n25.4545\n1.83012e-6\n1.64319e-6\n3.075e-6\n3.84678e-6\n5.49638e-6\n5.01246e-12\n0.999999\n0.999996\n0.999988\n0.999982\n0.999947\n1.0\n\n\n4992\n50\n25.7374\n1.24433e-6\n2.23104e-6\n3.07658e-6\n4.52742e-6\n4.63205e-6\n6.25284e-12\n0.999999\n0.999997\n0.99999\n0.999987\n0.999958\n1.0\n\n\n4993\n50\n26.0202\n4.39006e-7\n1.29025e-6\n2.35203e-6\n1.58389e-6\n3.47111e-6\n4.07794e-12\n0.999999\n0.999997\n0.999992\n0.999988\n0.999967\n1.0\n\n\n4994\n50\n26.303\n9.51392e-7\n1.52466e-6\n2.35143e-6\n2.71494e-6\n4.33923e-6\n6.49921e-12\n0.999999\n0.999998\n0.999994\n0.999991\n0.999977\n1.0\n\n\n4995\n50\n26.5859\n8.04667e-7\n1.29055e-6\n2.71392e-6\n3.62337e-6\n2.60711e-6\n1.50657e-12\n0.999999\n0.999998\n0.999996\n0.999995\n0.999984\n1.0\n\n\n4996\n50\n26.8687\n8.78081e-7\n1.40809e-6\n2.35273e-6\n2.26313e-6\n2.31278e-6\n2.29961e-12\n1.0\n0.999999\n0.999998\n0.999998\n0.999989\n1.0\n\n\n4997\n50\n27.1515\n5.1237e-7\n5.86399e-7\n7.23816e-7\n4.52456e-7\n1.44813e-6\n1.68781e-12\n1.0\n0.999999\n0.999998\n0.999998\n0.999993\n1.0\n\n\n4998\n50\n27.4343\n2.19636e-7\n9.38617e-7\n1.44694e-6\n1.13083e-6\n1.44651e-6\n2.1749e-12\n1.0\n1.0\n0.999999\n0.999999\n0.999996\n1.0\n\n\n4999\n50\n27.7172\n2.92639e-7\n1.17321e-6\n7.23742e-7\n6.79435e-7\n1.4471e-6\n4.21953e-12\n1.0\n1.0\n1.0\n1.0\n1.0\n1.0\n\n\n5000\n50\n28.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n1.0\n1.0\n1.0\n1.0\n1.0\n1.0\n\n\n\n\n\n\n\npltdf = mi_results_df |&gt;\n    df -&gt; stack(df, 9:14, [:bootstrap, :treedepth]) |&gt; \n    df -&gt; transform(df, :variable =&gt; ByRow(x-&gt;replace(x, \"_scaledcumsum\"=&gt;\"\")) =&gt; identity) |&gt;\n    df -&gt; groupby(df, [:variable, :treedepth]) |&gt;\n    df -&gt; combine(df,\n        :value =&gt; mean =&gt; :MI_mean,\n        :value =&gt; std =&gt; :MI_std,\n    ) |&gt; \n    df -&gt; sort(df, [])\ntaxonomylevels = permutedims(string.(colnames))\ntaxarankcolors = [:red :pink :orange :lightblue :green :aqua];\nplot(title=\"UniProt spectral tree (NCBI)\", ylabel=\"MI\", xlabel=\"Tree depth\",\n    legend=:outerright,\n    size=(700,250),\n    margin=5Plots.mm,  \n)\nfor (tlab, tcol) in collect(zip(taxonomylevels, taxarankcolors))\n    df = filter(:variable =&gt; ==(tlab), pltdf)\n    @df df plot!(:treedepth, :MI_mean, ribbon=2 .* :MI_std, label=tlab, c=tcol, lw=1)\nend\nplot!()\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nwe see that as we move from the root to the leaves we get spiking information related Phylum, Class, Order, Family, Genus, and Species in discrete layers and in that order.",
    "crumbs": [
      "Fig. 3 - Calculate Spectral Tree"
    ]
  },
  {
    "objectID": "04_figure_03.html#read-in-data",
    "href": "04_figure_03.html#read-in-data",
    "title": "Fig. 3 - Calculate Spectral Tree",
    "section": "Read in data",
    "text": "Read in data\n\nuptree = readnw(readline(projectdir(\"_research\",\"UP7047_neighborjoined_spitree\",\"2020_02_UP7047-supporttree_50pct.nw\")));\nSpectralInference.ladderize!(uptree)\n\n7047\n\n\n\nuniprot = readh5ad(datadir(\"exp_raw\",\"UP7047\",\"2020_02_UP7047.h5ad\"))\n\nAnnData object 7047 ✕ 10177\n\n\n\ngtdbmeta = CSV.read(readdir(datadir(\"exp_raw\", \"UP7047\", \"bac120_metadata_r220\"), join=true), DataFrame, delim=\"\\t\");\ngtdbmeta_idmap = select(gtdbmeta, :accession, :gtdb_taxonomy, :ncbi_organism_name, :ncbi_species_taxid, :ncbi_taxid, :ncbi_taxonomy);\ngtdbmeta_filt = gtdbmeta_idmap[filter(!isnothing, indexin(uniprot.obs.TaxID, gtdbmeta_idmap.ncbi_taxid)), :]\ntaxalevels = [\"domain\", \"phylum\", \"class\", \"order\", \"family\", \"genus\", \"species\"]\nuniprotobs_gtdb_ncbi = @chain gtdbmeta_filt begin\n    transform(:gtdb_taxonomy =&gt; ByRow(x-&gt;split(x, \";\")) =&gt; \"gtdb_\" .* taxalevels)\n    transform(:ncbi_taxonomy =&gt; ByRow(x-&gt;split(x, \";\")) =&gt; \"ncbi_\" .* taxalevels)\n    leftjoin(uniprot.obs, _, on = :TaxID =&gt; :ncbi_taxid)\n    _[indexin(uniprot.obs.proteomeID, _.proteomeID), :]\nend\nCSV.write(datadir(\"exp_raw\", \"UP7047\", \"obs_meta_gtdb_and_ncbi.csv\"), uniprotobs_gtdb_ncbi)\n\n\"/Users/bend/projects/Doran_etal_2023/data/exp_raw/UP7047/obs_meta_gtdb_and_ncbi.csv\"\n\n\n\nuniprotobs_gtdb_ncbi = CSV.read(datadir(\"exp_raw\", \"UP7047\", \"obs_meta_gtdb_and_ncbi.csv\"), DataFrame);\n\n\nnleaves = length(getleaves(uptree))\nopenangle = deg2rad(5)\ntoangle(y) = (y / (nleaves)) * (2π - (openangle % 2pi))\nfunction xy2circ(x, y)\n    R, θ = x, toangle(y)\n    R*cos(θ), R*sin(θ)\nend\n\nxy2circ (generic function with 1 method)\n\n\n\ngtdb_phylum_countmap = @chain uniprotobs_gtdb_ncbi.gtdb_phylum begin \n    countmap\n    sort(byvalue=true, rev=true)\n    filter(x-&gt;last(x) &gt;= 100, _)\n    filter(x-&gt;!ismissing(first(x)), _)\nend\n\nOrderedCollections.OrderedDict{Union{Missing, String31}, Int64} with 8 entries:\n  String31(\"p__Pseudomonadota\")   =&gt; 2331\n  String31(\"p__Actinomycetota\")   =&gt; 1278\n  String31(\"p__Bacteroidota\")     =&gt; 774\n  String31(\"p__Bacillota\")        =&gt; 676\n  String31(\"p__Bacillota_A\")      =&gt; 627\n  String31(\"p__Bacillota_I\")      =&gt; 181\n  String31(\"p__Cyanobacteriota\")  =&gt; 128\n  String31(\"p__Desulfobacterota\") =&gt; 103\n\n\n\ngtdb_phylum_colordict = Dict(zip(keys(gtdb_phylum_countmap), palette(:Dark2_8, length(gtdb_phylum_countmap))))\n\nDict{Union{Missing, String31}, Any} with 8 entries:\n  String31(\"p__Bacillota_I\")      =&gt; RGB{Float64}(0.902,0.671,0.008)\n  String31(\"p__Bacillota\")        =&gt; RGB{Float64}(0.906,0.161,0.541)\n  String31(\"p__Pseudomonadota\")   =&gt; RGB{Float64}(0.106,0.62,0.467)\n  String31(\"p__Bacteroidota\")     =&gt; RGB{Float64}(0.459,0.439,0.702)\n  String31(\"p__Actinomycetota\")   =&gt; RGB{Float64}(0.851,0.373,0.008)\n  String31(\"p__Bacillota_A\")      =&gt; RGB{Float64}(0.4,0.651,0.118)\n  String31(\"p__Desulfobacterota\") =&gt; RGB{Float64}(0.4,0.4,0.4)\n  String31(\"p__Cyanobacteriota\")  =&gt; RGB{Float64}(0.651,0.463,0.114)\n\n\n\npalette(:Dark2_8, length(gtdb_phylum_countmap))",
    "crumbs": [
      "Fig. 3 - Calculate Spectral Tree"
    ]
  },
  {
    "objectID": "04_figure_03.html#plot-uniprot-spectral-tree-with-gtdb",
    "href": "04_figure_03.html#plot-uniprot-spectral-tree-with-gtdb",
    "title": "Fig. 3 - Calculate Spectral Tree",
    "section": "Plot Uniprot Spectral Tree with GTDB",
    "text": "Plot Uniprot Spectral Tree with GTDB\n\ncladedict = TreePlots.nodepositions(uptree, layoutstyle=:cladogram)\nTreePlots.extend_tips!(cladedict)\nsegs = @chain cladedict begin\n    TreePlots.makesegments(uptree)\n    reduce(vcat, _)\n    map((x) -&gt; xy2circ(x...), _)\nend\n\nbranchcolors = @chain uptree begin\n    prewalk\n    map(_) do node\n        leafnames = getleafnames(node)\n        idxs = indexin(leafnames, uniprotobs_gtdb_ncbi.proteomeID)\n        get(gtdb_phylum_colordict, mode(uniprotobs_gtdb_ncbi.gtdb_phylum[idxs]), :lightgrey)\n    end\n    repeat(inner=28)\n    _[2:end]\nend;\n\n\nplot(\n    size=(700, 700), \n    framestyle=:none,\n    background=:transparent,\n    format=:png,\n    dpi=600,\n    margin=-5Plots.mm,\n)\nplot!(segs, linewidth=2, c=branchcolors)\n\n\nsavefig(joinpath(pdir, \"uniprot_spectral_tree_colored_by_gtdb_rasterized.png\"))\n\n\ngtdb_phylum_colordict\n\nDict{Union{Missing, String31}, Any} with 8 entries:\n  String31(\"p__Bacillota_I\")      =&gt; RGB{Float64}(0.902,0.671,0.008)\n  String31(\"p__Bacillota\")        =&gt; RGB{Float64}(0.906,0.161,0.541)\n  String31(\"p__Pseudomonadota\")   =&gt; RGB{Float64}(0.106,0.62,0.467)\n  String31(\"p__Bacteroidota\")     =&gt; RGB{Float64}(0.459,0.439,0.702)\n  String31(\"p__Actinomycetota\")   =&gt; RGB{Float64}(0.851,0.373,0.008)\n  String31(\"p__Bacillota_A\")      =&gt; RGB{Float64}(0.4,0.651,0.118)\n  String31(\"p__Desulfobacterota\") =&gt; RGB{Float64}(0.4,0.4,0.4)\n  String31(\"p__Cyanobacteriota\")  =&gt; RGB{Float64}(0.651,0.463,0.114)\n\n\n\nbranchcolors_gtdb_protobacteria = @chain uptree begin\n    prewalk\n    map(_) do node\n        leafnames = getleafnames(node)\n        idxs = indexin(leafnames, uniprotobs_gtdb_ncbi.proteomeID)\n        common_phyla = coalesce(mode(uniprotobs_gtdb_ncbi.gtdb_phylum[idxs]), \"\")\n        if common_phyla == \"p__Pseudomonadota\"\n            gtdb_phylum_colordict[\"p__Pseudomonadota\"]\n        elseif common_phyla == \"p__Desulfobacterota\"\n            gtdb_phylum_colordict[\"p__Desulfobacterota\"]\n        else\n            :lightgray\n        end\n    end\n    repeat(inner=28)\n    _[2:end]\nend;\n\nplot(\n    size=(700, 700), \n    framestyle=:none,\n    background=:transparent,\n    format=:png,\n    dpi=600,\n    margin=-5Plots.mm,\n)\nplot!(segs, linewidth=2, c=branchcolors_gtdb_protobacteria)\n\n\nsavefig(joinpath(pdir, \"uniprot_spectral_tree_colored_by_gtdb_protobacteria_rasterized.png\"))\n\n\"/Users/bend/projects/Doran_etal_2023/plots/uniprot_tree/uniprot_spectral_tree_colored_by_gtdb_protobacteria_rasterized.png\"\n\n\n\n@chain begin\n    uniprot.obs.Phylum\n    countmap\n    sort(byvalue=true, rev=true)\nend\n\nOrderedCollections.OrderedDict{String, Int64} with 53 entries:\n  \"Proteobacteria\"              =&gt; 2643\n  \"Firmicutes\"                  =&gt; 1517\n  \"Actinobacteria\"              =&gt; 1330\n  \"Bacteroidetes\"               =&gt; 761\n  \"Cyanobacteria\"               =&gt; 134\n  \"Tenericutes\"                 =&gt; 120\n  \"Planctomycetes\"              =&gt; 90\n  \"\"                            =&gt; 84\n  \"Spirochaetes\"                =&gt; 46\n  \"Verrucomicrobia\"             =&gt; 37\n  \"Chloroflexi\"                 =&gt; 37\n  \"Acidobacteria\"               =&gt; 27\n  \"Deinococcus-Thermus\"         =&gt; 23\n  \"Fusobacteria\"                =&gt; 17\n  \"Nitrospirae\"                 =&gt; 17\n  \"Thermotogae\"                 =&gt; 17\n  \"Synergistetes\"               =&gt; 15\n  \"Aquificae\"                   =&gt; 13\n  \"Chlamydiae\"                  =&gt; 13\n  ⋮                             =&gt; ⋮\n\n\n\ncommonphyla = [\n    \"Proteobacteria\",\n    \"Firmicutes\",\n    \"Actinobacteria\",\n    \"Bacteroidetes\",\n    \"Cyanobacteria\",\n    \"Tenericutes\",\n]\nncbi_phylum_colordict = Dict(\n    k =&gt; v for (k, v) in zip(commonphyla, palette(:Accent_6))\n)\n\nbranchcolors_ncbiphylum = @chain begin\n    map(prewalk(uptree)) do node\n        idxs = indexin(getleafnames(node), uniprot.obs.proteomeID)\n        get(ncbi_phylum_colordict, mode(uniprot.obs.Phylum[idxs]), :lightgrey)\n    end\n    repeat(inner=28)\n    _[2:end]\nend;\n\n\nplot(\n    size=(700, 700), \n    framestyle=:none,\n    background=:transparent,\n    format=:png,\n    dpi=600,\n    margin=-5Plots.mm,\n)\nplot!(segs, linewidth=2, c=branchcolors_ncbiphylum)\n\n\nsavefig(joinpath(pdir, \"uniprot_spectral_tree_colored_by_ncbi_rasterized.png\"))\n\n\"/Users/bend/projects/Doran_etal_2023/plots/uniprot_tree/uniprot_spectral_tree_colored_by_ncbi_rasterized.png\"\n\n\n\npalette(:Accent_6)\n\n\n\n\n\n\n\n\n\nbranchcolors_ncbi_proteobacteria = @chain begin\n    map(prewalk(uptree)) do node\n        idxs = indexin(getleafnames(node), uniprot.obs.proteomeID)\n        if mode(uniprot.obs.Phylum[idxs]) == \"Proteobacteria\"\n            ncbi_phylum_colordict[\"Proteobacteria\"]\n        else\n            :lightgrey\n        end\n    end\n    repeat(inner=28)\n    _[2:end]\nend;\n\n\nplot(\n    size=(700, 700), \n    framestyle=:none,\n    background=:transparent,\n    format=:png,\n    dpi=600,\n    margin=-5Plots.mm,\n)\nplot!(segs, linewidth=2, c=branchcolors_ncbi_proteobacteria)\n\n\nsavefig(joinpath(pdir, \"uniprot_spectral_tree_colored_by_ncbi_protobacteria_rasterized.png\"))\n\n\"/Users/bend/projects/Doran_etal_2023/plots/uniprot_tree/uniprot_spectral_tree_colored_by_ncbi_protobacteria_rasterized.png\"",
    "crumbs": [
      "Fig. 3 - Calculate Spectral Tree"
    ]
  },
  {
    "objectID": "03_figure_02.html",
    "href": "03_figure_02.html",
    "title": "Fig. 2 - Convergent evolution example",
    "section": "",
    "text": "Julia Setup\nusing DrWatson\n@quickactivate projectdir()\n\nusing SpectralInference # custom package from $projectdir/src\nusing NewickTree\nusing Gotree_jll, Goalign_jll\nusing StatsBase, NeighborJoining\nusing Distances, Clustering\nusing DataFrames, CSV\nusing Muon\nusing Symbolics\nusing StatsPlots\ntheme(:default, grid=false, label=false, tickdir=:out)\nusing LinearAlgebra\nusing LaTeXStrings\ninclude(srcdir(\"helpers.jl\"))\nheatmapcols = [:purple, :black, :yellow];\ngenerationcols = [\"#B3D2FC\" \"#2B689E\" \"#338591\"];\n\n\n\nMain - Example with convergent evolution\nSpectral decomposition’s like SVD and PCA are based on co-variation, therefore they incorporate information about contextual dependence between features and taxa. This means that Spectral Inference can infer the correct ancestral tree even in cases of convergent evolution. Below we created an alignment of 18 taxa described by 9 features, where there are multiple evolutionary paths to get to each feature, i.e., each feature is only a good genomic feature that matches a true ancestral divergence in the context of other features.\nSpectral Inference is able to perfectly recapitulate this ancestral tree, where standard phylogenetic tools fail.\n\nM = Float64.([\n    1 0 1 0 0 0 1 0 1;\n    0 1 1 0 0 0 1 0 1;\n    1 1 0 0 0 0 1 0 1;\n    1 0 1 0 0 0 0 1 1;\n    0 1 1 0 0 0 0 1 1;\n    1 1 0 0 0 0 0 1 1;\n    1 0 1 0 0 0 1 1 0;\n    0 1 1 0 0 0 1 1 0;\n    1 1 0 0 0 0 1 1 0;\n    1 0 1 1 0 1 0 0 0;\n    0 1 1 1 0 1 0 0 0;\n    1 1 0 1 0 1 0 0 0;\n    1 0 1 0 1 1 0 0 0;\n    0 1 1 0 1 1 0 0 0;\n    1 1 0 0 1 1 0 0 0;\n    1 0 1 1 1 0 0 0 0;\n    0 1 1 1 1 0 0 0 0;\n    1 1 0 1 1 0 0 0 0;\n]);\nheatmap(M, \n    c=[:white, :black], \n    ratio=1, \n    xticks=(1:9, [\"Pos $i\" for i in 1:9]),\n    xrotation=45,\n    yticks=(1:18, 'a':'r'),\n    yflip=true,\n    size=(300, 600),\n    margin=5Plots.mm,\n)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\nusv = svd(M);\n\n\nplot(\n    ylabel=\"explained variance (%)\", \n    xlabel=\"spectral component\", \n    legend=:none, \n    ylims=(0,1), xlims=(.5,9.5), \n    size=(500,500)\n)\nscatter!((usv.S.^2)/sum(usv.S.^2), \n    xticks=1:14, c=:black, markersize=5,\n)\nannotate!((1:length(usv.S)) .+ .1 , (usv.S.^2)/sum(usv.S.^2).+.06, round.((usv.S.^2)/sum(usv.S.^2)*100, digits=1))\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPhylogenetic inference with FastME, PhyML, and SPI\nIn the tree plots below only branches with an orange dot are statistically supported.\n\ntoyMSA_18x9_dir = datadir(\"sims\", \"toyMSA_18x9\") |&gt; mkpath\n# write out alignment\nwritephylip(\n    joinpath(toyMSA_18x9_dir, \"MSA.phylip\"),\n    join.(eachrow((replace(M, 0.0 =&gt; 'A', 1.0 =&gt; 'T')))),\n    collect('a':'r')\n)\n\n\n# FastME\nrun(`julia $(projectdir(\"scripts\", \"runners\", \"runFastME.jl\")) \n    -i $(datadir(\"sims\", \"toyMSA_18x9\", \"MSA.phylip\"))\n    -o $(projectdir(\"_research\", \"toyMSA_18x9\", \"FastME\"))\n    -m JC69\n`)\n# PhyML\nrun(`julia $(projectdir(\"scripts\", \"runners\", \"runPhyML.jl\")) \n    -i $(datadir(\"sims\", \"toyMSA_18x9\", \"MSA.phylip\"))\n    -o $(projectdir(\"_research\", \"toyMSA_18x9\", \"PhyML\"))\n    -m JC69\n`)\n# SpectralInference\nrun(`julia $(projectdir(\"scripts\", \"runners\", \"runSPI.jl\")) \n    -i $(datadir(\"sims\", \"toyMSA_18x9\", \"MSA.phylip\"))\n    -o $(projectdir(\"_research\", \"toyMSA_18x9\", \"SPI\"))\n    -m JC69\n`);\npdir_toyMSA_18x9 = plotsdir(\"toyMSA_18x9\") |&gt; mkpath\n\n  Activating project at `~/projects/Doran_etal_2023`\n\n\n[ Info: Starting FastME on MSA\n[ Info: using Booster to compute support values\n[ Info: stopping run\n ──────────────────────────────────────────────────────────────────────\n                              Time                    Allocations      \n                     ───────────────────────   ────────────────────────\n  Tot / % measured:       586ms /  91.3%           51.6MiB /  89.7%    \n\n Section     ncalls     time    %tot     avg     alloc    %tot      avg\n ──────────────────────────────────────────────────────────────────────\n total            1    535ms  100.0%   535ms   46.3MiB  100.0%  46.3MiB\n   booster        1    220ms   41.1%   220ms   1.16MiB    2.5%  1.16MiB\n   FastME         1    181ms   33.9%   181ms   3.29MiB    7.1%  3.29MiB\n ──────────────────────────────────────────────────────────────────────\n┌ Info: timing\n│   show(time) = nothing\n└   println(\"\") = nothing\n\n\n  Activating project at `~/projects/Doran_etal_2023`\n\n\n[ Info: Starting PhyML on MSA\n[ Info: stopping run\n ────────────────────────────────────────────────────────────────────\n                            Time                    Allocations      \n                   ───────────────────────   ────────────────────────\n Tot / % measured:      375ms /  87.4%           50.1MiB /  89.4%    \n\n Section   ncalls     time    %tot     avg     alloc    %tot      avg\n ────────────────────────────────────────────────────────────────────\n total          1    328ms  100.0%   328ms   44.8MiB  100.0%  44.8MiB\n   PhyML        1    194ms   59.2%   194ms   2.97MiB    6.6%  2.97MiB\n ────────────────────────────────────────────────────────────────────\n┌ Info: timing\n│   show(time) = nothing\n└   println(\"\") = nothing\n\n\n  Activating project at `~/projects/Doran_etal_2023`\n\n\n[ Info: Starting SPI inference\n[ Info: Setting up workspace\n[ Info: Running SPI\n[ Info: Writing out SPI Tree\n[ Info: Starting Bootstrap with 100\n[ Info: Writing out Bootstrap trees\n[ Info: using Booster to compute support values\n[ Info: Finishing run\n ────────────────────────────────────────────────────────────────────────────────\n                                        Time                    Allocations      \n                               ───────────────────────   ────────────────────────\n       Tot / % measured:            1.68s /  95.9%            294MiB /  98.0%    \n\n Section               ncalls     time    %tot     avg     alloc    %tot      avg\n ────────────────────────────────────────────────────────────────────────────────\n total                      1    1.61s  100.0%   1.61s    289MiB  100.0%   289MiB\n   running SPI              1    930ms   57.8%   930ms    167MiB   58.0%   167MiB\n   running bootstra...      1    183ms   11.4%   183ms   67.4MiB   23.3%  67.4MiB\n ────────────────────────────────────────────────────────────────────────────────\n┌ Info: \n│ timing\n│   show(time) = nothing\n└   println(\"\") = nothing\n\n\n\"/Users/bend/projects/Doran_etal_2023/plots/toyMSA_18x9\"\n\n\n\nmethod = \"FastME\"\nrun(pipeline(`$(gotree()) draw svg -c -w 400 -H 400 --support-cutoff .5 --with-branch-support`,\n    stdin=projectdir(\"_research\", \"toyMSA_18x9\", method, \"MSA-supporttree.nw\"),\n    stdout=joinpath(pdir_toyMSA_18x9, method * \".svg\")\n))\nshow_svg(joinpath(pdir_toyMSA_18x9, method * \".svg\"))\n\n\n\n\n\n\n\n\n\nmethod = \"PhyML\"\nrun(pipeline(`$(gotree()) draw svg -c -w 400 -H 400 --support-cutoff .5 --with-branch-support`,\n    stdin=projectdir(\"_research\", \"toyMSA_18x9\", method, \"MSA.phylip-supporttree.txt\"),\n    stdout=joinpath(pdir_toyMSA_18x9, method * \".svg\")\n))\nshow_svg(joinpath(pdir_toyMSA_18x9, method * \".svg\"))\n\n\n\n\n\n\n\n\n\nmethod = \"SPI\"\nrun(pipeline(`$(gotree()) draw svg -c -w 400 -H 400 --support-cutoff .5 --with-branch-support`,\n    stdin=projectdir(\"_research\", \"toyMSA_18x9\", method, \"MSA-supporttree.nw\"),\n    stdout=joinpath(pdir_toyMSA_18x9, method * \".svg\")\n))\nshow_svg(joinpath(pdir_toyMSA_18x9, method * \".svg\"))\n\n\n\n\n\n\n\n\n\n\nHow is information encoded about convergent processes?\nWe show that subsets of principal components, hold information that project taxa to different positions based on the ancestral path they took to obtain a particular genomic feature.\n\nbar(M[:, 5],\n    xticks=(1:18, 'a':'r'),\n    xlabel=\"taxa\",\n    ylabel=\"Pos 5\",\n    size=(600, 300),\n)\nvline!([9.5])\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntaxa a-i and j-r split at the first generation. using position 5 as a gene marker would place j-l with a-i as they both lost this feature through convergent processes.\n\n\n\nMspectrallyfiltered = usv.U[:, 5:8] * Diagonal(usv.S[5:8]) * usv.Vt[5:8, :]\nheatmap(Mspectrallyfiltered, \n    c=:bwr, \n    ratio=1, \n    xticks=(1:9, [\"Pos $i\" for i in 1:9]),\n    xrotation=45,\n    yticks=(1:18, 'a':'r'),\n    yflip=true,\n    size=(300, 600),\n    margin=5Plots.mm,\n)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\nrecreated alignment matrix from components 5-8. These components shows the mutations incuded in generation F2 in blue\n\n\n\nbar(Mspectrallyfiltered[:, 5],\n    xticks=(1:18, 'a':'r'),\n    xlabel=\"taxa\",\n    ylabel=\"Pos 5\",\n    size=(600, 300),\n    ylims=(-.6667, .33334),\n    widen=true,\n    yticks=([-0.666, 0.0, .3333], [L\"\\frac{-2}{3}\", L\"0\", L\"\\frac{1}{3}\"])\n)\nvline!([9.5])\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrecreating the alignment using components 5-8, transforms position 5 in such a way that taxa j-l are distict because they lost this feature in a different context as to taxa a-i\n\n\nWe show in this case as well that information regarding more recent generational differences correlate to deeper principal components\n\nspectralcorrs = map([i:(i+2) for i in 1:(size(M,2)-2)]) do window\n    spectralcorrelations(usv.U, window)\nend;\n\nF1mask = kron([1 0; 0 1], ones(3,3), ones(3,3))\nF2mask = kron(Diagonal(ones(6)), ones(3,3));\nuppertriangle = triu(trues(18, 18), 1);\n\n\nf1mi = map(spectralcorrs) do spcorr \n    empiricalMI(spcorr[uppertriangle], (F1mask .== 1)[uppertriangle]) # edges=-1:0.001:1\nend\nf2mi = map(spectralcorrs) do spcorr \n    empiricalMI(spcorr[uppertriangle], (F2mask .== 1)[uppertriangle]) # edges=-1:0.001:1\nend\n\nplot(\n    ylabel=\"Cumulative MI\\n (density)\",\n    xlabel=\"Principal component Window\\n [Principal component start to end]\",\n    yticks=[0.0, .5, 1.0],\n    xticks=(2:8, [\"[$i to $(i+2)]\" for i in 1:7]),\n    xrotation=45,\n    margin=5Plots.mm,\n)\nplot!(scaledcumsum(vcat(0, f1mi)), c=:red, marker=true, label=\"F1\", lw=2,)\nplot!(scaledcumsum(vcat(0, f2mi)), c=:orange, marker=true, label=\"F2\", lw=2,)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFig. S5 - Timing benchmark\nSpectral Inference is fast, it is based on PCA. So it has the potential to scale quite large. Thousands of taxa on a laptop, larger using clusters and distributed computing.\nHere we just show that Spectral Inference (SPI) does not grow exponentially with the number of taxa.\n\n## create UniProt subsets\nuniprot = readh5ad(datadir(\"exp_raw\", \"UP7047\", \"2020_02_UP7047.h5ad\"))\nrowmeta = uniprot.obs;\n\noutdir = datadir(\"exp_pro\", \"UPsubsetMSAs\") |&gt; mkpath\npdir = plotsdir(\"timeing_benchmark\") |&gt; mkpath\n\n\"/Users/bend/projects/Doran_etal_2023/plots/timeing_benchmark\"\n\n\n\nSubset to different number of taxa\n\n25 taxa at Genus level (Ruminococcus)\n50 taxa at Family level (Rhodospirillaceae)\n103 taxa at Order level (Oceanospirillales)\n211 taxa at Class level (Bacteroidia)\n\n\n\nwrite out each subset as pseudo-alignment\n## Genus\ngenus_choice_df = combine(nrow, groupby(rowmeta, :Genus)) |&gt;\n    df-&gt;sort(df, :nrow, rev=true) |&gt;\n    df-&gt;filter(:nrow=&gt;x-&gt;24 .&lt; x .&lt; 27, df)\ndisplay(genus_choice_df)\n\nmask = findall(==(\"Ruminococcus\"), rowmeta.Genus);\nsubsetMSA = Char.(replace(uniprot.X[mask, :] .&gt; 0.0, true=&gt;'T', false=&gt;'A'))\nopen(joinpath(outdir, \"UPsubset_taxa=25_level=Genus_group=Ruminococcus_alphabet=AT.phy\"), \"w\") do io\n    println(io, size(subsetMSA, 1), \" \", size(subsetMSA, 2))\n    for (id, row) in zip(rowmeta.proteomeID[mask], eachslice(subsetMSA, dims=1))\n        println(io, id, \"    \", join(row))\n    end\nend\n\n## Family\nfamily_choice_df = combine(nrow, groupby(rowmeta, :Family)) |&gt;\n    df-&gt;sort(df, :nrow, rev=true) |&gt;\n    df-&gt;filter(:nrow=&gt;x-&gt;48 .&lt; x .&lt; 52, df)\ndisplay(family_choice_df)\n\nmask = findall(==(\"Rhodospirillaceae\"), rowmeta.Family);\nsubsetMSA = Char.(replace(uniprot.X[mask, :] .&gt; 0.0, true=&gt;'T', false=&gt;'A'))\nopen(joinpath(outdir, \"UPsubset_taxa=50_level=Family_group=Rhodospirillaceae_alphabet=AT.phy\"), \"w\") do io\n    println(io, size(subsetMSA, 1), \" \", size(subsetMSA, 2))\n    for (id, row) in zip(rowmeta.proteomeID[mask], eachslice(subsetMSA, dims=1))\n        println(io, id, \"    \", join(row))\n    end\nend\n\n## Order\norder_choice_df = combine(nrow, groupby(rowmeta, :Order)) |&gt;\n    df-&gt;sort(df, :nrow, rev=true) |&gt;\n    df-&gt;filter(:nrow=&gt;x-&gt;95 .&lt; x .&lt; 105, df)\ndisplay(order_choice_df)\n\nmask = findall(==(\"Oceanospirillales\"), rowmeta.Order);\nsubsetMSA = Char.(replace(uniprot.X[mask, :] .&gt; 0.0, true=&gt;'T', false=&gt;'A'))\nopen(joinpath(outdir, \"UPsubset_taxa=103_level=Order_group=Oceanospirillales_alphabet=AT.phy\"), \"w\") do io\n    println(io, size(subsetMSA, 1), \" \", size(subsetMSA, 2))\n    for (id, row) in zip(rowmeta.proteomeID[mask], eachslice(subsetMSA, dims=1))\n        println(io, id, \"    \", join(row))\n    end\nend\n\n## Class\nclass_choice_df = combine(nrow, groupby(rowmeta, :Class)) |&gt;\n    df-&gt;sort(df, :nrow, rev=true) |&gt;\n    df-&gt;filter(:nrow=&gt;x-&gt;190 .&lt; x .&lt; 215, df)\ndisplay(class_choice_df)\n\nmask = findall(==(\"Bacteroidia\"), rowmeta.Class);\nsubsetMSA = Char.(replace(uniprot.X[mask, :] .&gt; 0.0, true=&gt;'T', false=&gt;'A'))\nopen(joinpath(outdir, \"UPsubset_taxa=211_level=Class_group=Bacteroidia_alphabet=AT.phy\"), \"w\") do io\n    println(io, size(subsetMSA, 1), \" \", size(subsetMSA, 2))\n    for (id, row) in zip(rowmeta.proteomeID[mask], eachslice(subsetMSA, dims=1))\n        println(io, id, \"    \", join(row))\n    end\nend\n\n\n2×2 DataFrame\n\n\n\nRow\nGenus\nnrow\n\n\n\nString\nInt64\n\n\n\n\n1\nHelicobacter\n26\n\n\n2\nRuminococcus\n25\n\n\n\n\n\n\n2×2 DataFrame\n\n\n\nRow\nFamily\nnrow\n\n\n\nString\nInt64\n\n\n\n\n1\nAlteromonadaceae\n51\n\n\n2\nRhodospirillaceae\n50\n\n\n\n\n\n\n2×2 DataFrame\n\n\n\nRow\nOrder\nnrow\n\n\n\nString\nInt64\n\n\n\n\n1\nOceanospirillales\n103\n\n\n2\nPseudomonadales\n97\n\n\n\n\n\n\n1×2 DataFrame\n\n\n\nRow\nClass\nnrow\n\n\n\nString\nInt64\n\n\n\n\n1\nBacteroidia\n211\n\n\n\n\n\n\n\n## submit job to cluster to run all phylogenetic inference tasks in parallel\n# run(`sbatch $(projectdir(\"scripts\", \"slurm-run-PI-on-UPsubsets.sbatch\"))`)\n\n\ntime_per_run_df = CSV.read(projectdir(\"_research\", \"UPsubsetMSAs\", \"timeperjob.log\"), DataFrame, delim=\"\\t\");\n\n\npltdf = sort(time_per_run_df, :Seq) |&gt;\n    df-&gt;filter(:Exitval=&gt; ==(0), df) |&gt;\n    df-&gt;transform(df, :Command=&gt;(x-&gt;replace.(x, r\"(.*)((?&lt;=\\/t)[0-9]*)(.*)\"=&gt;s\"\\2\"))=&gt; :Ntaxa ) |&gt;\n    df-&gt;transform(df, :Command=&gt;(x-&gt;replace.(x, r\"(.*)((?&lt;=runners\\/run)[a-zA-Z]*)(.*)\"=&gt;s\"\\2\"))=&gt; :method);\n\npltdf = pltdf[:, [:method, :Ntaxa, :JobRuntime]];\npltdf.Ntaxa = parse.(Int, pltdf.Ntaxa);\npltdf = sort(pltdf, [:method, :Ntaxa]);\npltdf = subset(pltdf, :method =&gt; ByRow(!=(\"FastME\")))\npltdf\n\n20×3 DataFrame\n\n\n\nRow\nmethod\nNtaxa\nJobRuntime\n\n\n\nString\nInt64\nFloat64\n\n\n\n\n1\nFastTree\n25\n883.487\n\n\n2\nFastTree\n50\n2011.95\n\n\n3\nFastTree\n103\n4044.1\n\n\n4\nFastTree\n211\n6906.7\n\n\n5\nMrBayes\n25\n728.282\n\n\n6\nMrBayes\n50\n1730.24\n\n\n7\nMrBayes\n103\n7628.71\n\n\n8\nMrBayes\n211\n9608.94\n\n\n9\nPhyML\n25\n439.039\n\n\n10\nPhyML\n50\n2441.14\n\n\n11\nPhyML\n103\n7875.46\n\n\n12\nPhyML\n211\n10119.2\n\n\n13\nRAxML\n25\n4905.39\n\n\n14\nRAxML\n50\n8285.4\n\n\n15\nRAxML\n103\n10093.6\n\n\n16\nRAxML\n211\n13513.1\n\n\n17\nSPI\n25\n65.94\n\n\n18\nSPI\n50\n67.507\n\n\n19\nSPI\n103\n83.168\n\n\n20\nSPI\n211\n138.193\n\n\n\n\n\n\n\nplot(title=\"Job runtime of phylogeny inference methods\",\n    ylabel=\"time (seconds)\",\n    yticks=([60, 600, 1800, 3600, 7200, 10800, 14400], [\"1m\", \"10m\", \"30m\", \"1h\", \"2h\", \"3h\", \"4h\"]),\n    xticks=([25, 50, 103, 211], [\n        \"Genus:Ruminococcus\\n #taxa=25\",\n        \"Family:Rhodospirillaceae\\n #taxa=50\",\n        \"Order:Oceanospirillales\\n #taxa=103\",\n        \"Class:Bacteroidia\\n #taxa=211\",\n         ]),\n    xrotation=30,\n    margin=5Plots.Measures.mm,\n    ylims=(-100, 14500),\n    xlims=(0, 220),\n    legend=:topleft,\n)\n@df pltdf plot!(:Ntaxa, :JobRuntime, group=:method, markers=true,\n    linewidth=2,\n    markersize=6,\n    markerstrokewidth=0,\n    c=permutedims(vcat([1],3:7)))\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplot(title=\"Job runtime of phylogeny inference methods\",\n    ylabel=\"time (seconds)\",\n    yticks=([60, 600, 1800, 3600, 7200, 10800, 14400], [\"1m\", \"10m\", \"30m\", \"1h\", \"2h\", \"3h\", \"4h\"]),\n    xticks=([25, 50, 103, 211], [\n        \"Genus:Ruminococcus\\n #taxa=25\",\n        \"Family:Rhodospirillaceae\\n #taxa=50\",\n        \"Order:Oceanospirillales\\n #taxa=103\",\n        \"Class:Bacteroidia\\n #taxa=211\",\n         ]),\n    xrotation=30,\n    margin=5Plots.Measures.mm,\n    # ylims=(-100, 14500),\n    # xlims=(0, 220),\n    legend=:right,\n)\n@df pltdf plot!(:Ntaxa, :JobRuntime, group=:method, markers=true,\n    linewidth=2,\n    markersize=6,\n    markerstrokewidth=0,\n    c=permutedims(vcat([1],3:7)),\n    yscale=:log10,\n)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsavefig(joinpath(pdir, \"timeing_benchmark_logscale.pdf\"))\n\n\"/Users/bend/projects/Doran_etal_2023/plots/timeing_benchmark/timeing_benchmark_logscale.pdf\"",
    "crumbs": [
      "Fig. 2 - Convergent evolution example"
    ]
  },
  {
    "objectID": "02_figure_01.html",
    "href": "02_figure_01.html",
    "title": "Fig. 1 - Defining Spectral Trees",
    "section": "",
    "text": "Julia Setup\nusing DrWatson\n@quickactivate projectdir()\n\nusing SpectralInference # custom package from $projectdir/src\nusing NewickTree\nusing Gotree_jll, Goalign_jll\nusing StatsBase, NeighborJoining\nusing Distances, Clustering\nusing DataFrames, CSV\nusing Muon\nusing Symbolics\nusing StatsPlots\ntheme(:default, grid=false, label=false, tickdir=:out)\nusing LinearAlgebra\nusing LaTeXStrings\ninclude(srcdir(\"helpers.jl\"))\nheatmapcols = [:purple, :black, :yellow];\ngenerationcols = [\"#B3D2FC\" \"#2B689E\" \"#338591\"];",
    "crumbs": [
      "Fig. 1 - Defining Spectral Trees"
    ]
  },
  {
    "objectID": "02_figure_01.html#footnotes",
    "href": "02_figure_01.html#footnotes",
    "title": "Fig. 1 - Defining Spectral Trees",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nHawkins, T. Cauchy and the spectral theory of matrices. Historia Mathematica 2, 1–29 (1975).↩︎",
    "crumbs": [
      "Fig. 1 - Defining Spectral Trees"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Subspecies phylogeny in the human gut revealed by coevolutionary constraints across the bacterial kingdom",
    "section": "",
    "text": "This code base is using the Julia Language and DrWatson to make a reproducible scientific project named\n\nDoran_etal_2023\n\nThis project reproduces results from:\npublished version: Subspecies phylogeny in the human gut revealed by coevolutionary constraints across the bacterial kingdom\npreprint: An evolution-based framework for describing human gut bacteria\nTo (locally) reproduce this project, do the following:\n\nDownload this code base.\ngit clone --recurse-submodules git@github.com:aramanlab/Doran_etal_2023.git\ncd Doran_etal_2023\nOpen a Julia console and do:\njulia&gt; # press ']' to enter package mode\n(1.10) pkg&gt; add DrWatson # install globally, for using `quickactivate`\n(1.10) pkg&gt; activate \"path/to/this/project\"\n(Doran_etal_2023) pkg&gt; instantiate\n\nThis will install all necessary packages for you to be able to run the scripts and everything should work out of the box, including correctly finding local paths.\nYou may notice that most scripts start with the commands:\nusing DrWatson\n@quickactivate projectdir()\nwhich auto-activates the project and enables local path handling from DrWatson.\n\n\n\nThis project uses our lab’s custom package SpectralInference.jl\nTo use the package for your own projects, please look at its separate github project.\nhttps://github.com/aramanlab/SpectralInference.jl",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#initializing-project",
    "href": "index.html#initializing-project",
    "title": "Subspecies phylogeny in the human gut revealed by coevolutionary constraints across the bacterial kingdom",
    "section": "",
    "text": "This code base is using the Julia Language and DrWatson to make a reproducible scientific project named\n\nDoran_etal_2023\n\nThis project reproduces results from:\npublished version: Subspecies phylogeny in the human gut revealed by coevolutionary constraints across the bacterial kingdom\npreprint: An evolution-based framework for describing human gut bacteria\nTo (locally) reproduce this project, do the following:\n\nDownload this code base.\ngit clone --recurse-submodules git@github.com:aramanlab/Doran_etal_2023.git\ncd Doran_etal_2023\nOpen a Julia console and do:\njulia&gt; # press ']' to enter package mode\n(1.10) pkg&gt; add DrWatson # install globally, for using `quickactivate`\n(1.10) pkg&gt; activate \"path/to/this/project\"\n(Doran_etal_2023) pkg&gt; instantiate\n\nThis will install all necessary packages for you to be able to run the scripts and everything should work out of the box, including correctly finding local paths.\nYou may notice that most scripts start with the commands:\nusing DrWatson\n@quickactivate projectdir()\nwhich auto-activates the project and enables local path handling from DrWatson.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#spectralinference.jl",
    "href": "index.html#spectralinference.jl",
    "title": "Subspecies phylogeny in the human gut revealed by coevolutionary constraints across the bacterial kingdom",
    "section": "",
    "text": "This project uses our lab’s custom package SpectralInference.jl\nTo use the package for your own projects, please look at its separate github project.\nhttps://github.com/aramanlab/SpectralInference.jl",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "01_figure_s01.html",
    "href": "01_figure_s01.html",
    "title": "Fig. S1 - Standard Analyses",
    "section": "",
    "text": "Julia library setup\nusing DrWatson\n@quickactivate projectdir()\n\nusing CSV, DataFrames, Muon\nusing Random: seed!\nusing UMAP, Distances\n\nusing LinearAlgebra, StatsBase\n\nusing SpectralInference # shh... I haven't explained what this is yet\n\nusing StatsPlots\ntheme(:default, grid=false, tickdir=:out, label=false)\ninclude(srcdir(\"helpers.jl\"))\n\nbbdir = datadir(\"exp_raw\", \"BB669\");\ntdir_16S = projectdir(\"_research\", \"BB669_16S_phyml\")\ntdir_bac120 = projectdir(\"_research\", \"BB669_bac120_phyml\")\npdir_16S = plotsdir(\"BB669_16Strees\") |&gt; mkpath\npdir_bac120 = plotsdir(\"BB669_bac120trees\") |&gt; mkpath;\nR library setup\nimport CondaPkg\nCondaPkg.activate!(ENV)\nusing RCall\n@show readlines(`which R`)\nR\"\"\"\nlibrary(ape)\nlibrary(treeio)\nlibrary(ggtree)\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(tidytree)\n\nsetwd($(projectdir()))\n\"\"\";",
    "crumbs": [
      "Fig. S1 - Standard Analyses"
    ]
  },
  {
    "objectID": "01_figure_s01.html#phyml-on-16s-alignment-of-biobank-strains",
    "href": "01_figure_s01.html#phyml-on-16s-alignment-of-biobank-strains",
    "title": "Fig. S1 - Standard Analyses",
    "section": "Phyml on 16S alignment of Biobank strains",
    "text": "Phyml on 16S alignment of Biobank strains\n16S is a ribosomal protein (involved with translating RNA to Proteins) that is present across all bacteria. For that reason, it is commonly used as a gene marker for constructing ancestral trees of bacteria and taxanomic classification.\nWhat we show is that 16S annotations are only good up to species level classification. At that point all strains are completely indistinguishable from each other.\n\n# run(`sbatch $(projectdir(\"scripts\", \"run_phyml_csb16S.jl\"))`);\n\nTriggers run of scripts/run_phyml_csb16S.jl script on SLURM compute cluster. Has the effect of running\nphyml \\\n    -dnt -mHKY85 -fe -o tlr \\\n    --search SPR --r_seed 123456 --rand_start --n_rand_starts 3 \\\n    --no_memory_check \\\n    --bootstrap -4 \\\n    -i $PROJECTDIR/data/exp_raw/BB669/BB669_16S.phy\noutputting the results in _research/BB669_16S_phyml\n\nplot PhyML tree of 16S alignment\n\nR\"\"\"\n## read in tree and metadata\ntree = read.newick(file.path($tdir_16S, \"BB669_16S.phy-supporttree_multi.txt\"), node.label='support')\nlineagedf = read.csv(file.path($bbdir, \"BB669_rowmeta.tsv\"), sep=\"\\t\")\nlineagedf$label = lineagedf$Strain.ID\nsubset_lineagedf = lineagedf[match(tree@phylo$tip.label, lineagedf$label),]\nbiggerfamily_ncbi = sort(table(subset_lineagedf$NCBI.Family), decreasing = TRUE)[sort(table(subset_lineagedf$NCBI.Family), decreasing = TRUE) &gt; 0]\n# labels(biggerfamily_ncbi)[[1]]\ntree_withdata = as.treedata(left_join(as_tibble(tree), subset_lineagedf, by='label'))\nbtree_tbl = as_tibble(tree_withdata)\n\n## Calcuate most common family desendent from each internal node of the tree\nmode_family_ncbi = offspring(btree_tbl, btree_tbl$node, tiponly = FALSE, self_include = TRUE)\nmode_family_ncbi = unlist(lapply(mode_family_ncbi, function(x) modeest::mfv1(x$NCBI.Family, na_rm=TRUE)))\nbtree_tbl$mode_family_ncbi = mode_family_ncbi\ntree_withdata = as.treedata(btree_tbl)\n\n## plot tree colored with most common family at each node\noptions(repr.plot.width=15, repr.plot.height=15, ignore.negative.edge=TRUE)\ncolorvalues = RColorBrewer::brewer.pal(12, name=\"Set3\")\np = ggtree(tree_withdata, \n        aes(color=mode_family_ncbi, subset=support &gt; .5), \n        layout=\"equal_angle\", open.angle=5,\n        branch.length=\"none\", size=1.5,\n    ) +\n    ggtitle(\"CSB (PhyML) 16S\") + \n    scale_color_manual(values=colorvalues, breaks=labels(biggerfamily_ncbi)[[1]]) #+theme(legend.position=\"none\")\nggsave(file.path($pdir_16S, \"CSB669_PhyML_unrooted.svg\"), \n    p,\n    height=10,\n    width=10,\n)\n\"\"\"\nshow_svg(joinpath(pdir_16S, \"CSB669_PhyML_unrooted.svg\"))\n\n\n\n\n\n\n\n\n\nR\"\"\"\n# plot M. gnavus subtree\ncolorvalues = RColorBrewer::brewer.pal(12, name=\"Set3\")\np = ggtree(tree_subset(tree_withdata, \"MSK.5.17\", levels_back = 1), \n        aes(color=Donor), \n        layout=\"rect\", open.angle=10,\n    ) + \n    ggtitle(\"CSB (PhyML) 16S M. gnavus subtree\") + \n    theme(\n        legend.position = \"none\", \n    ) +\n    xlim(0, 4) +\n    geom_tiplab(aes(label=Donor))\nggsave(file.path($pdir_16S, \"CSB669_PhyML_rgnavus_16S.svg\"),\n    p, \n    height=7,\n    width=4.5,\n)\n\"\"\";\nshow_svg(joinpath(pdir_16S, \"CSB669_PhyML_rgnavus_16S.svg\"))\n\n\n\n\n\n\n\n\n\nR\"\"\"\n# plot M. gnavus subtree\ncolorvalues = RColorBrewer::brewer.pal(12, name=\"Set3\")\np = ggtree(tree_subset(tree_withdata, \"MSK.19.84\", levels_back = 3), \n        aes(color=Donor), \n        layout=\"rect\", open.angle=10,\n    ) + \n    ggtitle(\"CSB (PhyML) 16S B. uniformis subtree\") + \n    theme(\n        legend.position = \"none\", \n    ) +\n    xlim(0, 4) +\n    geom_tiplab(aes(label=Donor))\nggsave(file.path($pdir_16S, \"CSB669_PhyML_buniformis_16S.svg\"),\n    p, \n    height=7,\n    width=4.5,\n)\n\"\"\";\nshow_svg(joinpath(pdir_16S, \"CSB669_PhyML_buniformis_16S.svg\"))",
    "crumbs": [
      "Fig. S1 - Standard Analyses"
    ]
  },
  {
    "objectID": "01_figure_s01.html#phyml-on-bac120-alignment-of-biobank-strains",
    "href": "01_figure_s01.html#phyml-on-bac120-alignment-of-biobank-strains",
    "title": "Fig. S1 - Standard Analyses",
    "section": "Phyml on Bac120 alignment of Biobank strains",
    "text": "Phyml on Bac120 alignment of Biobank strains\nBac120 aimed to be an improvement over 16S annotation. It takes 120 genes that are reasonably well conserved across bacteria, and takes ~50 genomic positions from each of those genes, creating an annotation of around 6000 features.\nWe find that these annotations equally only work down to species level classification, with strain level replicates all being identically annotated.\n\n# run(`sbatch $(projectdir(\"scripts\", \"run_phyml_csbbac120.jl\"))`);\n\nTriggers run of scripts/run_phyml_csbbac120.jl script on SLURM compute cluster. Has the effect of running\nphyml -daa -mLG -fe -o tlr \\\n    --search SPR --r_seed 123456 --rand_start --n_rand_starts 3 \\\n    --no_memory_check \\\n    --bootstrap -4 \\\n    -i $PROJECTDIR/data/exp_raw/BB669/BB669_bac120.phy\noutputting the results in _research/BB669_bac120_phyml\n\nplot PhyML tree of Bac120 alignment\n\nR\"\"\"\n## read in tree and metadata\ntree = read.newick(file.path($tdir_bac120, \"BB669_bac120.phy-supporttree_multi.txt\"), node.label='support')\nlineagedf = read.csv(file.path($bbdir, \"BB669_rowmeta.tsv\"), sep=\"\\t\")\nlineagedf$label = lineagedf$Strain.ID\nsubset_lineagedf = lineagedf[match(tree@phylo$tip.label, lineagedf$label),]\nbiggerfamily_ncbi = sort(table(subset_lineagedf$NCBI.Family), decreasing = TRUE)[sort(table(subset_lineagedf$NCBI.Family), decreasing = TRUE) &gt; 0]\n# labels(biggerfamily_ncbi)[[1]]\ntree_withdata = as.treedata(left_join(as_tibble(tree), subset_lineagedf, by='label'))\nbtree_tbl = as_tibble(tree_withdata)\n\n## Calcuate most common family desendent from each internal node of the tree\nmode_family_ncbi = offspring(btree_tbl, btree_tbl$node, tiponly = FALSE, self_include = TRUE)\nmode_family_ncbi = unlist(lapply(mode_family_ncbi, function(x) modeest::mfv1(x$NCBI.Family, na_rm=TRUE)))\nbtree_tbl$mode_family_ncbi = mode_family_ncbi\ntree_withdata = as.treedata(btree_tbl)\n\n## plot tree colored with most common family at each node\noptions(repr.plot.width=15, repr.plot.height=15, ignore.negative.edge=TRUE)\ncolorvalues = RColorBrewer::brewer.pal(12, name=\"Set3\")\np = ggtree(tree_withdata, \n        aes(color=mode_family_ncbi, subset=support &gt; .5), \n        layout=\"equal_angle\", open.angle=5,\n        branch.length=\"none\", size=1.5,\n    ) +\n    ggtitle(\"CSB (PhyML) Bac120\") + \n    scale_color_manual(values=colorvalues, breaks=labels(biggerfamily_ncbi)[[1]]) #+theme(legend.position=\"none\")\nggsave(file.path($pdir_bac120, \"CSB669_PhyML_unrooted_bac120.svg\"), \n    p,\n    height=10,\n    width=10,\n)\n\"\"\"\nshow_svg(joinpath(pdir_bac120, \"CSB669_PhyML_unrooted_bac120.svg\"))\n\n\n\n\n\n\n\n\n\n# plot M. gnavus subtree\nR\"\"\"\ncolorvalues = RColorBrewer::brewer.pal(12, name=\"Set3\")\np = ggtree(tree_subset(tree_withdata, \"MSK.5.17\", levels_back = 1), \n        aes(color=Donor), \n        layout=\"rect\", open.angle=10,\n    ) + \n    ggtitle(\"CSB (PhyML) bac120 M. gnavus subtree\") + \n    theme(\n        legend.position = \"none\", \n    ) +\n    xlim(0, 4) +\n    geom_tiplab(aes(label=Donor))\nggsave(file.path($pdir_16S, \"CSB669_PhyML_rgnavus_bac120.svg\"),\n    p, \n    height=7,\n    width=4.5,\n)\n\"\"\";\nshow_svg(joinpath(pdir_16S, \"CSB669_PhyML_rgnavus_bac120.svg\"))\n\n\n\n\n\n\n\n\n\n# plot M. gnavus subtree\nR\"\"\"\ncolorvalues = RColorBrewer::brewer.pal(12, name=\"Set3\")\np = ggtree(tree_subset(tree_withdata, \"MSK.19.84\", levels_back = 5), \n        aes(color=Donor), \n        layout=\"rect\", open.angle=10,\n    ) + \n    ggtitle(\"CSB (PhyML) bac120 B. uniformis subtree\") + \n    theme(\n        legend.position = \"none\", \n    ) +\n    xlim(0, 4) +\n    geom_tiplab(aes(label=Donor))\nggsave(file.path($pdir_16S, \"CSB669_PhyML_buniformis_bac120.svg\"),\n    p, \n    height=7,\n    width=4.5,\n)\n\"\"\";\nshow_svg(joinpath(pdir_16S, \"CSB669_PhyML_buniformis_bac120.svg\"))",
    "crumbs": [
      "Fig. S1 - Standard Analyses"
    ]
  },
  {
    "objectID": "01_figure_s01.html#constraint-of-metabolic-capacity",
    "href": "01_figure_s01.html#constraint-of-metabolic-capacity",
    "title": "Fig. S1 - Standard Analyses",
    "section": "Constraint of metabolic capacity",
    "text": "Constraint of metabolic capacity\n\ntheme(:default, grid=false, tickdir=:out, label=false)\npdir_met = plotsdir(\"metabolite_strainvariation\") |&gt; mkpath\n\n\"/Users/bend/projects/Doran_etal_2023/plots/metabolite_strainvariation\"\n\n\n\nmetmtx = biobank[\"metabolites_foldchange\"].X[:, :]\n\n# too close to zero for detectable measurment, so assume no change\nmetmtx[isinf.(metmtx)] .= 0.0; \n@show size(metmtx)\n\n# # filter to metabolites that have at least 10% detectable shifts in measurement\n# metabolite_names_full = biobank[\"metabolites_foldchange\"].var_names.vals;\n# keepmetabolites_mask = mapslices(c-&gt;mean(c .== 0.0) &lt; 0.9, metmtx, dims=1) |&gt; vec;\n# metabolite_names = metabolite_names_full[keepmetabolites_mask]\n# metmtx = metmtx[:, keepmetabolites_mask];\n# @show size(metmtx);\n\nsize(metmtx) = (669, 50)\n\n\n(669, 50)\n\n\n\nMij = pairwise(Euclidean(), metmtx, dims=1)\nuptri = triu(trues(size(Mij)), 1);\nissamespecies = uptri .&& (biobank.obs.NCBI_Species .== permutedims(biobank.obs.NCBI_Species));\n\n\nplot(    \n    yticks=[5000, 10000, 15000],\nsize=(500, 400),\nmargin=5Plots.mm,\nxlabel=\"euclidean metabolite distance (50 metabolites)\",\nylabel=\"count\",\nxlims=(0,50),)\nhistogram!(Mij[uptri], bins=1:1:50, alpha=0.2, color=:grey)\nhistogram!(Mij[issamespecies], bins=1:1:50)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsavefig(joinpath(pdir_met, \"histogram_strain_metabolite_distances.pdf\"))\n\n\"/Users/bend/projects/Doran_etal_2023/plots/metabolite_strainvariation/histogram_strain_metabolite_distances.pdf\"",
    "crumbs": [
      "Fig. S1 - Standard Analyses"
    ]
  },
  {
    "objectID": "06_figure_05.html",
    "href": "06_figure_05.html",
    "title": "Fig. 5 - Interpreting New Strain Relationships",
    "section": "",
    "text": "using DrWatson\n@quickactivate projectdir()\n\nusing SpectralInference\nusing NewickTree\nusing HypothesisTests\nusing MultipleTesting: adjust, Bonferroni, BenjaminiHochberg\nusing CSV, DataFrames\nusing StatsBase\nusing Muon\nusing Random: shuffle, seed!\nusing CategoricalArrays: cut, recode!\nusing LaTeXStrings\nusing Images\n\nusing StatsPlots\ntheme(:default, grid=false, label=false, tickdir=:out)\ninclude(srcdir(\"helpers.jl\"))\n\nbbdir = datadir(\"exp_pro\", \"BB669\") |&gt; mkpath;\npdir = plotsdir(\"strain_variation_tree_and_tests\") |&gt; mkpath;\nrdir = projectdir(\"_research\", \"strain_variation_wilcoxon_tests\") |&gt; mkpath\n\nspeciescolordf = CSV.read(datadir(\"exp_raw\", \"BB669\", \"subsettreecolors.csv\"), DataFrame)\nspecies_color_dict = Dict(k =&gt; v for (k, v) in zip(speciescolordf.species_name, speciescolordf.color));",
    "crumbs": [
      "Fig. 5 - Interpreting New Strain Relationships"
    ]
  },
  {
    "objectID": "06_figure_05.html#filtering-to-species-that-have-20-strain-replicates",
    "href": "06_figure_05.html#filtering-to-species-that-have-20-strain-replicates",
    "title": "Fig. 5 - Interpreting New Strain Relationships",
    "section": "Filtering to species that have > 20 strain replicates",
    "text": "Filtering to species that have &gt; 20 strain replicates\n\nuniprot = readh5ad(datadir(\"exp_raw\", \"UP7047\", \"2020_02_UP7047.h5ad\"))\nbiobank = readh5mu(datadir(\"exp_raw\", \"BB669\", \"BB669.h5mu\"))\n\n┌ Warning: Cannot join columns with the same name because var_names are intersecting.\n└ @ Muon /Users/bend/.julia/packages/Muon/UKjAF/src/mudata.jl:367\n\n\nMuData object 669 ✕ 21475\n└ metabolites_foldchange\n  AnnData object 669 ✕ 50\n└ oggs\n  AnnData object 669 ✕ 11248\n└ UPorder_oggs\n  AnnData object 669 ✕ 10177\n\n\n\nupmtx = uniprot.X[:, :]\nupusv = svd(upmtx)\nbbmtx = biobank[\"UPorder_oggs\"].X[:,:]\nsize(bbmtx)\n\n(669, 10177)\n\n\n\nkeptspecies = sort(filter(x-&gt; last(x) &gt;= 20, countmap(biobank.obs.Species)), byvalue=true, rev=true)\nfilter!(!=(\"unclassified\"), keptspecies)\n# species =&gt; number of strains belonging to that species\n\nOrderedCollections.OrderedDict{String, Int64} with 12 entries:\n  \"Phocaeicola vulgatus\"         =&gt; 88\n  \"[Ruminococcus] gnavus\"        =&gt; 41\n  \"Bacteroides thetaiotaomicron\" =&gt; 35\n  \"Anaerostipes hadrus\"          =&gt; 31\n  \"Bacteroides uniformis\"        =&gt; 27\n  \"unclassified\"                 =&gt; 26\n  \"Blautia luti\"                 =&gt; 24\n  \"Bifidobacterium breve\"        =&gt; 24\n  \"Coprococcus comes\"            =&gt; 23\n  \"Dorea formicigenerans\"        =&gt; 22\n  \"Blautia wexlerae\"             =&gt; 21\n  \"[Eubacterium] rectale\"        =&gt; 20\n\n\nI had previously calculated which strains belonged to these species when I saved the biobank dataset\n\nstrvarmtx = bbmtx[biobank.obs.kept_species.==1,:];\n@show size(strvarmtx)\n\nstrvarobs = biobank.obs[biobank.obs.kept_species.==1, :]\nstrvar_obsnames = strvarobs.Strain_ID\n\n# infer hierarchical relationships of just the species with\n# greater than 20 strain replicates\nuhat = projectinLSV(strvarmtx, upusv)\ndij = spectraldistances(uhat, upusv.S; alpha=1.5, q=.75) ./ size(uniprot, 2)\nstrvartree_hc = UPGMA_tree(dij)\nstrvartree = readnw(SpectralInference.newickstring(strvartree_hc, strvar_obsnames))\n# ladderize!(strvartree)\n\n## write out tree\nopen(joinpath(bbdir, \"strvar-spitree.nw\"), \"w\") do io\n    writenw(io, strvartree)\nend\n\nsize(strvarmtx) = (356, 10177)\n\n\n12058\n\n\n\n# plot cladogram\nstrvartree_hc = UPGMA_tree(dij)\nsubsettreestring = SpectralInference.newickstring(strvartree_hc, strvarobs.Strain_ID)\nsubsettree = readnw(subsettreestring);\nplot(strvartree_hc, \n    size=(800, 900),\n    lw=.5,\n    yflip=true, \n    xmirror=true,\n    xticks=:none,\n    permute=(:y, :x),\n    grid=false,\n    tickdirection=:none,\n    rightmargin=5.5Plots.cm, \n    label=\"\",\n    framestyle=:grid,\n)\n\n# plot annotation rectangles\nrectangle(w, h, x, y) = Shape(x .+ [0,w,w,0], y .+ [0,0,h,h])\nspeciesvector = strvarobs.Species[strvartree_hc.order]\nbreaks = findall(speciesvector[begin:(end-1)] .!= speciesvector[2:end])[Not([10, 11, 12, 13, 14,15])]\nedges = [(s, e) for (s,e) in zip(vcat([0],breaks), vcat(breaks, [length(speciesvector)]))];\nrects = [rectangle(2,(e-s),0,s+.5) for (s,e) in zip(vcat([0],breaks), vcat(breaks, [length(speciesvector)]))];\nrectspeciescolors = permutedims(speciescolordf.color[indexin(speciesvector[first.(edges).+1], speciescolordf.species_name)]);\nfancy_treeplot = plot!(permutedims(rects), fill=0.35, lw=0, c=rectspeciescolors, label=\"\")\n\n# species \nfor (i, (k,v)) in enumerate(zip(speciescolordf.species_name, speciescolordf.color))\n    yval = median(findall(==(k), speciesvector))\n    annotate!(-0.1, yval, text(k, 9, :left, v))\nend\nannotate!(-0.1, 356, text(\"Blautia luti (2)\", 9, :left, species_color_dict[\"Blautia luti\"]))\n\nfancy_treeplot",
    "crumbs": [
      "Fig. 5 - Interpreting New Strain Relationships"
    ]
  },
  {
    "objectID": "06_figure_05.html#statistically-test-clades-at-each-node-in-tree",
    "href": "06_figure_05.html#statistically-test-clades-at-each-node-in-tree",
    "title": "Fig. 5 - Interpreting New Strain Relationships",
    "section": "Statistically test clades at each node in tree",
    "text": "Statistically test clades at each node in tree\n\n# functions to compare differences\nfunction cliffs_d(a, b) \n    ans = 0.\n    for i in a, j in b\n        ans += sign(i - j)\n    end\n    ans / (length(a) * length(b))\nend\n\nfunction log2FC(a, b) \n    mean(log2.(a .+ 1)) - mean(log2.(b .+ 1))\nend\n\nlog2FC (generic function with 1 method)\n\n\n\n# significance tests across full strain variation tree\nseed!(123456789)\ntree = strvartree\n\nmaxtreeheight = last(maximum(getheights(tree)))\nleaves = getleaves(tree)\nleafnames = name.(leaves);\ntreeorder = indexin(leafnames, strvar_obsnames);\n\nogg_mtx = biobank[\"oggs\"].X[:,:][biobank.obs.kept_species.==1,:]\nogg_mask = vec(mapslices(c-&gt;std(c) &gt; 0, ogg_mtx, dims=1))\nogg_mtx = ogg_mtx[treeorder, ogg_mask]\n@show size(ogg_mtx)\nogg_names = biobank[\"oggs\"].var_names[ogg_mask]\n\nogg_freqs = vec(mean(ogg_mtx .&gt; 0, dims=1))\n\ntaxon_info = strvarobs[treeorder, :]\ntaxon_info.species_donor = join.(eachrow(strvarobs[treeorder, [:Species, :Donor]]), \" \")\n\n\nisolate_ids = getleafnames(tree)\ntestresults = DataFrame()\n\n\nfor node in prewalk(tree)\n    #  if group size would be less than 1 skip node\n    (isleaf(node) || any(isleaf.(node.children))) && continue\n    \n    # find comparison groups\n    grp1_idx = indexin(getleafnames(node.children[1]), isolate_ids)\n    grp2_idx = indexin(getleafnames(node.children[2]), isolate_ids)\n    \n    pvals = mapslices(ogg_mtx, dims=1) do column\n        pvalue(MannWhitneyUTest(column[grp1_idx], column[grp2_idx]))\n    end |&gt; vec\n    \n    # make null\n    seed!(1234)\n    null_qs = map(1:100) do i\n        n = length(grp1_idx)\n        m = length(grp2_idx)\n        perm_idx = shuffle(vcat(grp1_idx, grp2_idx))\n        qs = mapslices(ogg_mtx, dims=1) do column_perm\n            q = pvalue(MannWhitneyUTest(column_perm[perm_idx[1:n]], column_perm[perm_idx[n+1:end]]))\n        end\n        minimum(qs)\n    end\n\n    qvals = mapslices(ogg_mtx, dims=1) do column\n        pval = pvalue(MannWhitneyUTest(column[grp1_idx], column[grp2_idx]))\n        mean(null_qs .&lt; pval)\n    end |&gt; vec\n    \n    effects = mapslices(ogg_mtx, dims=1) do column\n        abs(mean(column[grp1_idx]) - mean(column[grp2_idx]) / std(column))\n    end |&gt; vec\n\n    log_effects = mapslices(ogg_mtx, dims=1) do column\n        logcol = log2.(column.+1)\n        abs(mean(logcol[grp1_idx]) - mean(logcol[grp2_idx]) / std(logcol))\n    end |&gt; vec\n    \n    log2FCs = mapslices(ogg_mtx, dims=1) do column\n        log2FC(column[grp1_idx], column[grp2_idx])\n    end |&gt; vec\n\n    cliffs_ds = mapslices(ogg_mtx, dims=1) do column\n        cliffs_d(column[grp1_idx], column[grp2_idx])\n    end |&gt; vec\n\n    grp1_prp_exp = mapslices(ogg_mtx, dims=1) do column\n        mean(column[grp1_idx] .&gt; 0)\n    end |&gt; vec\n\n    grp2_prp_exp = mapslices(ogg_mtx, dims=1) do column\n        mean(column[grp2_idx] .&gt; 0)\n    end |&gt; vec\n    \n    testresults = vcat(testresults, \n        DataFrame(\n            :nodeids =&gt; id(node),\n            :nodeheight =&gt;  NewickTree.height(node),\n            :nodedepth =&gt;  maxtreeheight - NewickTree.height(node),\n            :grp1_N =&gt; length(grp1_idx),\n            :grp2_N =&gt; length(grp2_idx),\n            :grp1_phylum_mode =&gt; mode(taxon_info.Phylum[grp1_idx]),\n            :grp2_phylum_mode =&gt; mode(taxon_info.Phylum[grp2_idx]),\n            :grp1_species_mode =&gt; mode(taxon_info.Species[grp1_idx]),\n            :grp2_species_mode =&gt; mode(taxon_info.Species[grp2_idx]),\n            :grp1_species_donor_mode =&gt; mode(taxon_info.species_donor[grp1_idx]),\n            :grp2_species_donor_mode =&gt; mode(taxon_info.species_donor[grp2_idx]),\n            :ogg_name =&gt; ogg_names,\n            :ogg_idx =&gt; collect(axes(ogg_mtx, 2)),\n            :ogg_freqs =&gt; ogg_freqs,\n            :grp1_prp_exp =&gt; grp1_prp_exp,\n            :grp2_prp_exp =&gt; grp2_prp_exp,\n            :effectsize =&gt; effects,\n            :logeffectsize =&gt; log_effects,\n            :log2FC =&gt; log2FCs,\n            :cliffs_d =&gt; cliffs_ds,\n            :pvals =&gt; pvals,\n            :qvals =&gt; qvals,\n        )\n    )\nend\ntestresults[!, \"pval_BH\"] .= adjust(testresults.pvals, BenjaminiHochberg());\ntestresults[!, \"pval_Bon\"] .= adjust(testresults.pvals, Bonferroni());\ntestresults[!, \"qval_BH\"] .= adjust(testresults.qvals, BenjaminiHochberg());\n\ntree_discretization = cut(testresults.nodedepth, [0, 2, 4, 5])\nrecode!(tree_discretization, \n    \"[4, 5)\"=&gt;\"phylum level\", \n    \"[2, 4)\"=&gt;\"species level\",\n    \"[0, 2)\"=&gt;\"strain level\")\ntestresults[!, \"tree_level\"] = tree_discretization\ntestresults;\n\nsize(ogg_mtx) = (356, 5449)\n\n\n\ncountmap(testresults.tree_level)\n\nDict{CategoricalArrays.CategoricalValue{String, UInt32}, Int64} with 3 entries:\n  \"species level\" =&gt; 59939\n  \"strain level\"  =&gt; 457716\n  \"phylum level\"  =&gt; 5449\n\n\n\nCSV.write(joinpath(rdir, \"full_ogg_wilcoxon_testresults_on_big10species.csv\"), testresults)\ntestresults |&gt; \n    df-&gt;filter(:pval_BH =&gt; &lt;(0.05), df) |&gt;\n    df-&gt;CSV.write(joinpath(rdir, \"significant_BH_ogg_wilcoxon_testresults_on_big10species.csv\"), df)\ntestresults |&gt;\n    df-&gt;filter(:pval_Bon =&gt; &lt;(0.05), df) |&gt;\n    df-&gt;CSV.write(joinpath(rdir, \"significant_Bon_ogg_wilcoxon_testresults_on_big10species.csv\"), df)\ntestresults |&gt;\n    df-&gt;filter(:qval_BH =&gt; &lt;(0.05), df) |&gt;\n    df-&gt;CSV.write(joinpath(rdir, \"significant_Qbh_ogg_wilcoxon_testresults_on_big10species.csv\"), df)\n\n\"/Users/bend/projects/Doran_etal_2023/_research/strain_variation_wilcoxon_tests/significant_Qbh_ogg_wilcoxon_testresults_on_big10species.csv\"",
    "crumbs": [
      "Fig. 5 - Interpreting New Strain Relationships"
    ]
  },
  {
    "objectID": "06_figure_05.html#filtering-to-most-significant-results",
    "href": "06_figure_05.html#filtering-to-most-significant-results",
    "title": "Fig. 5 - Interpreting New Strain Relationships",
    "section": "Filtering to most significant results",
    "text": "Filtering to most significant results\n\ntestresults = CSV.read(joinpath(rdir, \"full_ogg_wilcoxon_testresults_on_big10species.csv\"), DataFrame);\n\n\nsigtestresults = filter(:qval_BH =&gt; &lt;(0.05), testresults) |&gt;\n    df -&gt; filter(:logeffectsize =&gt; &gt;(1), df) |&gt;\n    df -&gt; filter(:effectsize =&gt; &gt;(1), df) |&gt;\n    df -&gt; filter(:log2FC =&gt; x-&gt;abs.(x) .&gt; 1 , df);\n\n\n@show sigtestresults.ogg_name |&gt; unique |&gt; length\n@show sigtestresults.nodeids |&gt; unique |&gt; length\n@show sum(sigtestresults.tree_level .== \"phylum level\")\n@show sum(sigtestresults.tree_level .== \"species level\")\n@show sum(sigtestresults.tree_level .== \"strain level\");\n\n(sigtestresults.ogg_name |&gt; unique) |&gt; length = 1530\n(sigtestresults.nodeids |&gt; unique) |&gt; length = 66\nsum(sigtestresults.tree_level .== \"phylum level\") = 415\nsum(sigtestresults.tree_level .== \"species level\") = 1117\nsum(sigtestresults.tree_level .== \"strain level\") = 1070\n\n\n\n# how many OGGs are still duplicated?\nsigtestresults |&gt; \n    df -&gt; groupby(df, :ogg_name) |&gt;\n    df -&gt; subset(df, :log2FC =&gt; x -&gt; abs.(x) .== maximum(abs.(x))) |&gt;\n    df -&gt; countmap(df.ogg_name) |&gt;\n    cm -&gt; sum(values(cm) .&gt; 1)\n\n27\n\n\n\n# for these remaining OGGs select the shallowest significant example\nuniqueOGGresults = sigtestresults |&gt; \n    df -&gt; groupby(df, :ogg_name) |&gt;\n    df -&gt; subset(df, :log2FC =&gt; x -&gt; abs.(x) .== maximum(abs.(x))) |&gt;\n    df -&gt; groupby(df, :ogg_name) |&gt;\n    df -&gt; subset(df, :nodeheight =&gt; x -&gt; x .== minimum(x));\n@show nrow(uniqueOGGresults) == length(unique(uniqueOGGresults.ogg_name))\n@show sum(uniqueOGGresults.tree_level .== \"phylum level\")\n@show sum(uniqueOGGresults.tree_level .== \"species level\")\n@show sum(uniqueOGGresults.tree_level .== \"strain level\");\n\nnrow(uniqueOGGresults) == length(unique(uniqueOGGresults.ogg_name)) = true\nsum(uniqueOGGresults.tree_level .== \"phylum level\") = 273\nsum(uniqueOGGresults.tree_level .== \"species level\") = 676\nsum(uniqueOGGresults.tree_level .== \"strain level\") = 581\n\n\n\nCSV.write(joinpath(rdir, \"unique_sig_ogg_wilcoxon_testresults_on_big10species.csv\"), uniqueOGGresults)\n\n\"/Users/bend/projects/Doran_etal_2023/_research/strain_variation_wilcoxon_tests/unique_sig_ogg_wilcoxon_testresults_on_big10species.csv\"\n\n\nPhylum level significant orthologs\n\nogg_plotting_order = uniqueOGGresults |&gt;\n    df-&gt;subset(df,  :tree_level =&gt; x-&gt; x.==(\"phylum level\"), :grp1_N =&gt; x-&gt; x.&gt;=3, :grp2_N =&gt; x-&gt; x.&gt;=3) |&gt;\n    df-&gt;subset(df, :nodeids =&gt; (x-&gt;get.(Ref(countmap(x)), x, 0) .&gt; 10)) |&gt;\n    df-&gt;sort(df, [:nodeids, :log2FC]);\n\nhmapplot = heatmap(log2.(ogg_mtx[:, ogg_plotting_order.ogg_idx] .+ 1), \n# hmapplot = heatmap(log2.(ogg_mtx[:, uniqueOGGresults.ogg_idx]),\n    title=\"Phylum level tests; \" * L\"Q_{BH} &lt; 0.05, |\\log_2 FC| &gt; 1\",\n    yticks=false,\n    # xticks=(1:nrow(uniqueOGGresults), uniqueOGGresults.ogg_name),\n    xticks=[1, findall(diff(ogg_plotting_order.nodeids) .!= 0)..., nrow(ogg_plotting_order)],\n    xrotation=45,\n    ylims=(.5,356.5),\n    framestyle=:grid,\n    cticks=(1:4, string.(2 .^ 1:4)),\n    c=cgrad(:bilbao, rev=true),\n    leftmargin=0Plots.mm,\n);\n\nrectangle(w, h, x, y) = Shape(x .+ [0,w,w,0], y .+ [0,0,h,h])\nleafnames = getleafnames(strvartree)\noggrects = map(unique(ogg_plotting_order.nodeids)) do nid\n    node = filter(x-&gt; id(x)==(nid), prewalk(strvartree))[1]\n    idx_taxa = indexin(getleafnames(node), leafnames)\n    noderesults = filter(:nodeids =&gt; ==(nid), ogg_plotting_order)\n    idx_oggs = indexin(noderesults.ogg_name, ogg_plotting_order.ogg_name)\n    x = minimum(idx_oggs)\n    y = minimum(idx_taxa)\n    width = maximum(idx_oggs) - minimum(idx_oggs)\n    height = maximum(idx_taxa) - minimum(idx_taxa)\n    rectangle(width, height, x, y)\nend\n\nplot!(permutedims(oggrects), fill=0.0, lw=1.5, linecolor=\"red\", label=\"\")\n\nlayout = @layout [a{.2w} b]\nplot(plot(fancy_treeplot, title=\"SPI tree\"), hmapplot; layout, xrotation=45, size=(1000,600), link=:y, legend=:none, margin=3Plots.Measures.mm)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\nsavefig(joinpath(pdir, \"significantOGGS_pernode_phylumlevel_treeandheatmap_coloredboxes.pdf\"))\n\n\"/Users/bend/projects/Doran_etal_2023/plots/strain_variation_tree_and_tests/significantOGGS_pernode_phylumlevel_treeandheatmap_coloredboxes.pdf\"\n\n\nSpecies level significant orthologs\n\nogg_plotting_order = uniqueOGGresults |&gt;\n    df-&gt;subset(df,  :tree_level =&gt; x-&gt; x.==(\"species level\"), :grp1_N =&gt; x-&gt; x.&gt;=3, :grp2_N =&gt; x-&gt; x.&gt;=3) |&gt;\n    df-&gt;subset(df, :nodeids =&gt; (x-&gt;get.(Ref(countmap(x)), x, 0) .&gt; 10)) |&gt;\n    df-&gt;sort(df, [:nodeids, :log2FC]);\n\nhmapplot = heatmap(log2.(ogg_mtx[:, ogg_plotting_order.ogg_idx] .+ 1), \n# hmapplot = heatmap(log2.(ogg_mtx[:, uniqueOGGresults.ogg_idx]),\n    title=\"Species level tests; \" * L\"Q_{BH} &lt; 0.05, |\\log_2 FC| &gt; 1\",\n    yticks=false,\n    # xticks=(1:nrow(uniqueOGGresults), uniqueOGGresults.ogg_name),\n    xticks=[1, findall(diff(ogg_plotting_order.nodeids) .!= 0)..., nrow(ogg_plotting_order)],\n    xrotation=45,\n    ylims=(.5,356.5),\n    framestyle=:grid,\n    cticks=(1:4, string.(2 .^ 1:4)),\n    c=cgrad(:bilbao, rev=true),\n    leftmargin=0Plots.mm,\n);\n\nrectangle(w, h, x, y) = Shape(x .+ [0,w,w,0], y .+ [0,0,h,h])\nleafnames = getleafnames(strvartree)\noggrects = map(unique(ogg_plotting_order.nodeids)) do nid\n    node = filter(x-&gt; id(x)==(nid), prewalk(strvartree))[1]\n    idx_taxa = indexin(getleafnames(node), leafnames)\n    noderesults = filter(:nodeids =&gt; ==(nid), ogg_plotting_order)\n    idx_oggs = indexin(noderesults.ogg_name, ogg_plotting_order.ogg_name)\n    x = minimum(idx_oggs)\n    y = minimum(idx_taxa)\n    width = maximum(idx_oggs) - minimum(idx_oggs)\n    height = maximum(idx_taxa) - minimum(idx_taxa)\n    rectangle(width, height, x, y)\nend\n\nplot!(permutedims(oggrects), fill=0.0, lw=1.5, linecolor=\"aqua\", label=\"\")\n\nlayout = @layout [a{.2w} b]\nplot(plot(fancy_treeplot, title=\"SPI tree\"), hmapplot; layout, xrotation=45, size=(1000,600), link=:y, legend=:none, margin=3Plots.Measures.mm)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\nsavefig(joinpath(pdir, \"significantOGGS_pernode_specieslevel_treeandheatmap_coloredboxes.pdf\"))\n\n\"/Users/bend/projects/Doran_etal_2023/plots/strain_variation_tree_and_tests/significantOGGS_pernode_specieslevel_treeandheatmap_coloredboxes.pdf\"\n\n\nStrain level significant orthologs\n\nogg_plotting_order = uniqueOGGresults |&gt;\n    df-&gt;subset(df,  :tree_level =&gt; x-&gt; x.==(\"strain level\"), :grp1_N =&gt; x-&gt; x.&gt;=3, :grp2_N =&gt; x-&gt; x.&gt;=3) |&gt;\n    df-&gt;subset(df, :nodeids =&gt; (x-&gt;get.(Ref(countmap(x)), x, 0) .&gt; 10)) |&gt;\n    df-&gt;sort(df, [:nodeids, :log2FC]);\n\nhmapplot = heatmap(log2.(ogg_mtx[:, ogg_plotting_order.ogg_idx] .+ 1), \n# hmapplot = heatmap(log2.(ogg_mtx[:, uniqueOGGresults.ogg_idx]),\n    title=\"Strain level tests; \" * L\"Q_{BH} &lt; 0.05, |\\log_2 FC| &gt; 1\",\n    yticks=false,\n    # xticks=(1:nrow(uniqueOGGresults), uniqueOGGresults.ogg_name),\n    xticks=[1, findall(diff(ogg_plotting_order.nodeids) .!= 0)..., nrow(ogg_plotting_order)],\n    xrotation=45,\n    ylims=(.5,356.5),\n    framestyle=:grid,\n    cticks=(1:4, string.(2 .^ 1:4)),\n    c=cgrad(:bilbao, rev=true),\n    leftmargin=0Plots.mm,\n);\n\nrectangle(w, h, x, y) = Shape(x .+ [0,w,w,0], y .+ [0,0,h,h])\nleafnames = getleafnames(strvartree)\noggrects = map(unique(ogg_plotting_order.nodeids)) do nid\n    node = filter(x-&gt; id(x)==(nid), prewalk(strvartree))[1]\n    idx_taxa = indexin(getleafnames(node), leafnames)\n    noderesults = filter(:nodeids =&gt; ==(nid), ogg_plotting_order)\n    idx_oggs = indexin(noderesults.ogg_name, ogg_plotting_order.ogg_name)\n    x = minimum(idx_oggs)\n    y = minimum(idx_taxa)\n    width = maximum(idx_oggs) - minimum(idx_oggs)\n    height = maximum(idx_taxa) - minimum(idx_taxa)\n    rectangle(width, height, x, y)\nend\n\nplot!(permutedims(oggrects), fill=0.0, lw=1.5, linecolor=\"lightgreen\", label=\"\")\n# vline!(findall(diff(ogg_plotting_order.nodeids) .&gt; 0) .- .5, lw=1, c=:black, label=\"\")\n\nlayout = @layout [a{.2w} b]\nplot(plot(fancy_treeplot, title=\"SPI tree\"), hmapplot; layout, xrotation=45, size=(1000,600), link=:y, legend=:none, margin=3Plots.Measures.mm)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\nsavefig(joinpath(pdir, \"significantOGGS_pernode_strainlevel_treeandheatmap_coloredboxes.pdf\"))\n\n\"/Users/bend/projects/Doran_etal_2023/plots/strain_variation_tree_and_tests/significantOGGS_pernode_strainlevel_treeandheatmap_coloredboxes.pdf\"\n\n\nzoom-ins of strain level significant orthologs\n\n### Strain level zoomin P. vulgatus\nogg_plotting_order.nodeids |&gt; unique\nogg_plotting_order = uniqueOGGresults |&gt;\n    df-&gt;subset(df,  :tree_level =&gt; x-&gt; x.==(\"strain level\"), :grp1_N =&gt; x-&gt; x.&gt;=3, :grp2_N =&gt; x-&gt; x.&gt;=3) |&gt;\n    df-&gt;subset(df, :nodeids =&gt; (x-&gt;get.(Ref(countmap(x)), x, 0) .&gt; 10)) |&gt;\n    df-&gt;sort(df, [:nodeids, :log2FC]) |&gt;\n    df-&gt;filter(:nodeids =&gt; ==(136), df)\nnid = 136\nnode = filter(x-&gt; id(x)==(nid), prewalk(strvartree))[1]\nidx_taxa = indexin(getleafnames(node), leafnames)\n\nhmapplot = heatmap(log2.(ogg_mtx[idx_taxa, ogg_plotting_order.ogg_idx] .+ 1), \n# hmapplot = heatmap(log2.(ogg_mtx[:, uniqueOGGresults.ogg_idx]),\n    title=\"P. vulgatus (zoomin); \" * L\"Q_{BH} &lt; 0.05, |\\log_2 FC| &gt; 1\",\n    yticks=false,\n    xticks=(1:nrow(ogg_plotting_order), ogg_plotting_order.ogg_name),\n    # xtickfontsize=1,\n    xrotation=90,\n    # ylims=(.5,356.5),\n    tickdirection=:out,\n    framestyle=:grid,\n    cticks=(1:4, string.(2 .^ 1:4)),\n    clims=(0, 6.1),\n    c=cgrad(:bilbao, rev=true),\n    size=(550,550),\n    leftmargin=0Plots.mm,\n    grid=false\n)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n### Strain level zoomin C. comes\nogg_plotting_order.nodeids |&gt; unique\nogg_plotting_order = uniqueOGGresults |&gt;\n    df-&gt;subset(df,  :tree_level =&gt; x-&gt; x.==(\"strain level\"), :grp1_N =&gt; x-&gt; x.&gt;=3, :grp2_N =&gt; x-&gt; x.&gt;=3) |&gt;\n    df-&gt;subset(df, :nodeids =&gt; (x-&gt;get.(Ref(countmap(x)), x, 0) .&gt; 10)) |&gt;\n    df-&gt;sort(df, [:nodeids, :log2FC]) |&gt;\n    df-&gt;filter(:nodeids =&gt; ==(523), df)\nnid = 523\nnode = filter(x-&gt; id(x)==(nid), prewalk(strvartree))[1]\nidx_taxa = indexin(getleafnames(node), leafnames)\n\nhmapplot = heatmap(log2.(ogg_mtx[idx_taxa, ogg_plotting_order.ogg_idx] .+ 1), \n    title=\"C. comes (zoomin); \" * L\"Q_{BH} &lt; 0.05, |\\log_2 FC| &gt; 1\",\n    yticks=false,\n    xticks=(1:nrow(ogg_plotting_order), ogg_plotting_order.ogg_name),\n    xrotation=90,\n    tickdirection=:out,\n    framestyle=:grid,\n    cticks=(1:4, string.(2 .^ 1:4)),\n    clims=(0, 6.1),\n    c=cgrad(:bilbao, rev=true),\n    size=(550,550),\n    leftmargin=0Plots.mm,\n    grid=false\n)",
    "crumbs": [
      "Fig. 5 - Interpreting New Strain Relationships"
    ]
  },
  {
    "objectID": "06_figure_05.html#validation-experiment",
    "href": "06_figure_05.html#validation-experiment",
    "title": "Fig. 5 - Interpreting New Strain Relationships",
    "section": "Validation experiment",
    "text": "Validation experiment\nWe noted that groups of strains from donors 22 and 17 had many orthologs related to the flagellum, that were absent from donors 9, 13, and 16. Conversely donors 9, 13, and 16 had orthologs related to viral (bacteriophage) infection. It suggested that in donors 9, 13, and 16 there had been an infection of populations that caused these strains to lose their flagellum and thus motility, likely to become more resistant to this bacteriophage.\nWe just wanted to test whether these strains where indeed non-motile, to verify that we were detecting accurate and functional differences between these strains. So we grew a sample of these strain in BHIS media, took pictures at the 24 hour mark and a time-series of optical density measurements (OD600).\n\n\nplot motility assay\nearlydf = CSV.read(datadir(\"exp_raw\", \"OD600_motility\", \"earlygrowth_OD600.tsv\"), DataFrame, delim=\"\\t\") |&gt;\n    df -&gt; stack(df, 2:5) |&gt;\n    df -&gt; rename(df, :variable =&gt; :time, :value =&gt; :OD600);\nearlydf = earlydf |&gt;\n    df -&gt; transform(df,\n        :ID =&gt; (x-&gt;join.(first.(split.(x, \".\"), 2), \".\")) =&gt; :msk_id,\n        :ID =&gt; (x-&gt;last.(split.(x, \".\"))) =&gt; :replicate,\n    );\n\nvortexdf = CSV.read(datadir(\"exp_raw\", \"OD600_motility\", \"postvortex_OD600.tsv\"), DataFrame, delim=\"\\t\") |&gt;\n    df -&gt; stack(df, 2:8) |&gt;\n    df -&gt; rename(df, :variable =&gt; :time, :value =&gt; :OD600);\nvortexdf = vortexdf |&gt;\n    df -&gt; transform(df,\n        :ID =&gt; (x-&gt;join.(first.(split.(x, \".\"), 2), \".\")) =&gt; :msk_id,\n        :ID =&gt; (x-&gt;last.(split.(x, \".\"))) =&gt; :replicate,\n    );\nvortexpltdf = vortexdf |&gt;\n    df-&gt;groupby(df, [:time, :msk_id]) |&gt;\n    df-&gt;combine(df, \n        :OD600 =&gt; mean,\n        :OD600 =&gt; std,\n    );\n\nfulldf = vcat(earlydf, vortexdf)\n# fulldf = filter(:msk_id =&gt; x-&gt;startswith(x, r\"(9|17|22|neg)\"), fulldf)\nfullpltdf = fulldf |&gt;\n    df-&gt;groupby(df, [:time, :msk_id]) |&gt;\n    df-&gt;combine(df, \n        :OD600 =&gt; mean,\n        :OD600 =&gt; std,\n    );\nfullpltdf.OD600_std .= replace(fullpltdf.OD600_std, NaN =&gt; 0.); # set correct std for single negative control\n\ncmap=Dict(\n    \"neg\" =&gt; :grey,\n    \"9.13\" =&gt; \"#A97C50\",\n    \"9.15\" =&gt; \"#A97C50\",\n    \"16.22\" =&gt; \"#FBB040\",\n    \"17.70\" =&gt; \"#6682C1\",\n    \"17.78\" =&gt; \"#6682C1\",\n    \"22.92\" =&gt; \"#2B3990\"\n)\n\nplot(\n    ylabel=\"OD600\",\n    legend=:outerright,\n    xrotation=45,\n    margin=5Plots.Measures.mm,\n    size=(700,300),\n    bottommargins=10Plots.mm,\n)\n@df fulldf scatter!(\n    :time, :OD600,\n    group=:ID, \n    c=[cmap[id] for id in :msk_id],\n    label=\"\", markersize=3, markerstrokewidth=0,\n)\nvline!([4], c=:black, lw=.5, linestyle=:dash)\n@df fullpltdf plot!(\n    :time, :OD600_mean,\n    group=:msk_id, ribbon=:OD600_std,\n    c=[cmap[id] for id in :msk_id],\n    fillalpha=.25,\n)\nannotate!(4.8, .27, text(\"vortex\"))\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsavefig(joinpath(pdir, \"motility_experiment_plot.pdf\"))\n\n\"/Users/bend/projects/Doran_etal_2023/plots/strain_variation_tree_and_tests/motility_experiment_plot.pdf\"\n\n\n\nimg = load(datadir(\"exp_raw\", \"OD600_motility\", \"swimmers_after24h.jpg\"))\nysize = floor.(Int, quantile(1:size(img,1), [0.2, 0.77])) |&gt; x-&gt;x[1]:x[2]\nxsize = floor.(Int, quantile(1:size(img,2), [0.15, 0.73])) |&gt; x-&gt;x[1]:x[2]\nimg[ysize, xsize]\n\n\n\n\n\nimg = load(datadir(\"exp_raw\", \"OD600_motility\", \"nonswimmers_after24h.jpg\"))\nysize = floor.(Int, quantile(1:size(img,1), [0.2, 0.77])) |&gt; x-&gt;x[1]:x[2]\nxsize = floor.(Int, quantile(1:size(img,2), [0.2, 0.71])) |&gt; x-&gt;x[1]:x[2]\nimg[ysize, xsize]",
    "crumbs": [
      "Fig. 5 - Interpreting New Strain Relationships"
    ]
  },
  {
    "objectID": "06_figure_05.html#how-conserved-are-these-features",
    "href": "06_figure_05.html#how-conserved-are-these-features",
    "title": "Fig. 5 - Interpreting New Strain Relationships",
    "section": "How conserved are these features?",
    "text": "How conserved are these features?\nThe flagellum is generally highly conserved, it is remarkable that phage seemed to be involved with deleting such seemingly important machinery from the organism.\nThus, we examined the conservation pattern of the 12 annotated gene groups that were absent in E. rectale strains isolated from donors 9, 13, 16 but present in strains isolated from donors 17 and 22 across the entire Spectral Tree\n\nuniprot = readh5ad(datadir(\"exp_raw\", \"UP7047\", \"2020_02_UP7047.h5ad\"))\nupmtx = uniprot.X[:,:];\nuptree = readnw(readline(projectdir(\"_research\", \"UP7047_neighborjoined_spitree\", \"2020_02_UP7047-supporttree_50pct.nw\")));\nleafnodes = getleaves(uptree);\ntreeorder = indexin(getleafnames(uptree), uniprot.obs_names);\n\n\nspecies_name = \"rectale\"\nfoundtaxa = uniprot.obs[contains.(uniprot.obs.Species, species_name), [:Kingdom, :Phylum, :Class, :Order, :Family, :Genus, :Species]]\n@info \"string: '$(species_name)' finds $(nrow(foundtaxa)) taxa:\\n$(foundtaxa)\"\n\n┌ Info: string: 'rectale' finds 1 taxa:\n│ 1×7 DataFrame\n│  Row │ Kingdom   Phylum      Class       Order          Family           Genus   Species\n│      │ String    String      String      String         String           String  String\n│ ─────┼─────────────────────────────────────────────────────────────────────────────────────────────────\n│    1 │ Bacteria  Firmicutes  Clostridia  Clostridiales  Lachnospiraceae          [Eubacterium] rectale\n└ @ Main /Users/bend/projects/Doran_etal_2023/notebooks/jl_notebook_cell_df34fa98e69747e1a8f8a730347b8e2f_Y101sZmlsZQ==.jl:3\n\n\n\ntest_oggs = subset(ogg_plotting_order,\n    :description =&gt; ByRow(!=(\"\")), # drop unannotated oggs\n    :description =&gt; ByRow(!=(\"domain, Protein\")), # drop unannotated oggs\n    :log2FC =&gt; ByRow(&lt;(0)), # drop oggs increased in the presence of phage\n).ogg_name\nuniprot.var[indexin(sort(test_oggs), uniprot.var_names), [:og, :description]]\n\n16×2 DataFrame\n\n\n\nRow\nog\ndescription\n\n\n\nString\nString\n\n\n\n\n1\nCOG0835\nchemotaxis\n\n\n2\nCOG0842\nTransport permease protein\n\n\n3\nCOG1344\nbacterial-type flagellum-dependent cell motility\n\n\n4\nCOG1345\nRequired for morphogenesis and for the elongation of the flagellar filament by facilitating polymerization of the flagellin monomers at the tip of growing filament. Forms a capping structure, which prevents flagellin subunits (transported through the central channel of the flagellum) from leaking out without polymerization at the distal end\n\n\n5\nCOG1442\nlipopolysaccharide 3-alpha-galactosyltransferase activity\n\n\n6\nCOG1516\nflagellar protein fliS\n\n\n7\nCOG1776\nchemotaxis\n\n\n8\nCOG2186\nTranscriptional regulator\n\n\n9\nCOG2198\nHistidine kinase\n\n\n10\nCOG2944\nsequence-specific DNA binding\n\n\n11\nCOG3547\nTransposase (IS116 IS110 IS902 family)\n\n\n12\nCOG4495\nDomain of unknown function (DUF4176)\n\n\n13\nCOG4786\nFlagellar basal body rod\n\n\n14\nCOG5001\ncyclic-guanylate-specific phosphodiesterase activity\n\n\n15\nCOG5279\nprotein involved in cytokinesis, contains TGc (transglutaminase protease-like) domain\n\n\n16\nCOG5444\nnuclease activity\n\n\n\n\n\n\n\n# oggs from E. rectale test that are in Uniprot\nchosen_oggs_idx = indexin(test_oggs, uniprot.var_names);\n# make presence/absence matix `subset_ogg_mtx`\nsubset_ogg_mtx = upmtx[:, chosen_oggs_idx] .&gt; 0;\nchosen_oggs = uniprot.var.og[chosen_oggs_idx]\n@show chosen_oggs;\n\nchosen_oggs = [\"COG1345\", \"COG1344\", \"COG5444\", \"COG5001\", \"COG3547\", \"COG4495\", \"COG1442\", \"COG4786\", \"COG5279\", \"COG1776\", \"COG2944\", \"COG0842\", \"COG1516\", \"COG0835\", \"COG2186\", \"COG2198\"]\n\n\n\n# collect parent nodes back to pseudo-root of uniprot tree\nspecies_node_idx = findall(contains.(uniprot.obs.Species[treeorder], species_name))[1]\nspeciesnode = leafnodes[species_node_idx]\ndepthofspecies = network_distance(uptree, speciesnode)\nspeciesparents = []\nnode = speciesnode\nfor i in 1:depthofspecies\n    node = parent(node)\n    push!(speciesparents, node)\nend\ncladesizes = length.(getleafnames.(speciesparents))\n@info \"# of taxa per clade = $(cladesizes)\"\n\n┌ Info: # of taxa per clade = [3, 10, 23, 101, 216, 265, 380, 600, 733, 1022, 1065, 2376, 6709, 7047]\n└ @ Main /Users/bend/projects/Doran_etal_2023/notebooks/jl_notebook_cell_df34fa98e69747e1a8f8a730347b8e2f_Y104sZmlsZQ==.jl:12\n\n\n\n# only 1 E. rectale in uniprot\nsum(==(\"Agathobacter\"), uniprot.obs.Genus)\n\n1\n\n\nLocal subtree of E. rectale in Uniprot tree\n\nsubset_tree = readnw(nwstr(speciesparents[3]))\nfor leaf in getleaves(subset_tree)\n    NewickTree.setname!(leaf, only(uniprot.obs.Species[uniprot.obs.Proteome_ID .== name(leaf)]) )\nend\nplot(subset_tree, rightmargin=6Plots.cm, fs=9, size=(500,600))\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLarger subtree of E. rectale in Uniprot tree\n\nsubset_tree = readnw(nwstr(speciesparents[4]))\nfor leaf in getleaves(subset_tree)\n    NewickTree.setname!(leaf, only(uniprot.obs.Species[uniprot.obs.Proteome_ID .== name(leaf)]) )\nend\nplot(subset_tree, rightmargin=4Plots.cm, fs=5, size=(400,600))\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbblsvs = projectinLSV(bbmtx, upusv);\n\n\nrectale_mask = occursin.(\"rectale\", biobank.obs.Species);\n\n\njoined_dij = spectraldistances([upusv.U; bblsvs[rectale_mask, :]], upusv.S, alpha=1.5, q=0.75);\n\n\nrectale_dij = joined_dij[(size(upusv.U,1)+1):end, 1:(end-sum(rectale_mask))]\nrectale_upnns = first.(sortperm.(eachrow(rectale_dij)), 5);\n\n\nhcat(biobank.obs[rectale_mask, [:Strain_ID, :NCBI_Species]],\n    DataFrame(getindex.(Ref(uniprot.obs.Species), rectale_upnns) |&gt; stack |&gt; permutedims, [:nn_1, :nn_2, :nn_3, :nn_4, :nn_5]),\n     DataFrame(;\n    # uniprot_nearest_neighbor_Species=uniprot.obs.Species[rectale_upnns],\n    # uniprot_nearest_neighbor_Phylum=uniprot.obs.Phylum[rectale_upnns],\n    )\n)\n\n20×7 DataFrame\n\n\n\nRow\nStrain_ID\nNCBI_Species\nnn_1\nnn_2\nnn_3\nnn_4\nnn_5\n\n\n\nString\nString\nString\nString\nString\nString\nString\n\n\n\n\n1\nMSK.9.13\n[Eubacterium] rectale\n[Eubacterium] rectale\nAeromonas sp. w55\nPhotobacterium damselae\nCyanobacteria bacterium\nBacillus sp. UFRGS-B20\n\n\n2\nMSK.13.59\n[Eubacterium] rectale\nPhotobacterium damselae\nCyanobacteria bacterium\n[Eubacterium] rectale\nCandidatus Nasuia deltocephalinicola\nAeromonas sp. w55\n\n\n3\nMSK.16.22\n[Eubacterium] rectale\n[Eubacterium] rectale\nCyanobacteria bacterium\nCandidatus Vidania fulgoroideae\nCandidatus Carsonella ruddii\nBacillus sp. UFRGS-B20\n\n\n4\nMSK.9.15\n[Eubacterium] rectale\nAeromonas sp. w55\nPhotobacterium damselae\n[Eubacterium] rectale\nCyanobacteria bacterium\nCandidatus Tremblaya princeps\n\n\n5\nMSK.13.48\n[Eubacterium] rectale\nPhotobacterium damselae\nCyanobacteria bacterium\n[Eubacterium] rectale\nCandidatus Vidania fulgoroideae\nCandidatus Nasuia deltocephalinicola\n\n\n6\nMSK.13.50\n[Eubacterium] rectale\nPhotobacterium damselae\nCyanobacteria bacterium\n[Eubacterium] rectale\nCandidatus Nasuia deltocephalinicola\nCandidatus Vidania fulgoroideae\n\n\n7\nMSK.17.42\n[Eubacterium] rectale\n[Eubacterium] rectale\nRoseburia sp. CAG:18\nPhotobacterium damselae\nCyanobacteria bacterium\nOpitutae bacterium SCGC AG-212-L18\n\n\n8\nMSK.17.3\n[Eubacterium] rectale\n[Eubacterium] rectale\nRoseburia sp. CAG:18\nPhotobacterium damselae\nCyanobacteria bacterium\nOpitutae bacterium SCGC AG-212-L18\n\n\n9\nMSK.17.13\n[Eubacterium] rectale\n[Eubacterium] rectale\nRoseburia sp. CAG:18\nPhotobacterium damselae\nCyanobacteria bacterium\nOpitutae bacterium SCGC AG-212-L18\n\n\n10\nMSK.17.19\n[Eubacterium] rectale\n[Eubacterium] rectale\nRoseburia sp. CAG:18\nCyanobacteria bacterium\nPhotobacterium damselae\nOpitutae bacterium SCGC AG-212-L18\n\n\n11\nMSK.17.57\n[Eubacterium] rectale\n[Eubacterium] rectale\nRoseburia sp. CAG:18\nCyanobacteria bacterium\nPhotobacterium damselae\nOpitutae bacterium SCGC AG-212-L18\n\n\n12\nMSK.22.19\n[Eubacterium] rectale\n[Eubacterium] rectale\nRoseburia sp. CAG:18\nCyanobacteria bacterium\nPhotobacterium damselae\nCandidatus Tremblaya princeps\n\n\n13\nMSK.17.70\n[Eubacterium] rectale\n[Eubacterium] rectale\nRoseburia sp. CAG:18\nPhotobacterium damselae\nOpitutae bacterium SCGC AG-212-L18\nCyanobacteria bacterium\n\n\n14\nMSK.17.78\n[Eubacterium] rectale\n[Eubacterium] rectale\nRoseburia sp. CAG:18\nPhotobacterium damselae\nOpitutae bacterium SCGC AG-212-L18\nCyanobacteria bacterium\n\n\n15\nMSK.17.79\n[Eubacterium] rectale\n[Eubacterium] rectale\nRoseburia sp. CAG:18\nCyanobacteria bacterium\nPhotobacterium damselae\nOpitutae bacterium SCGC AG-212-L18\n\n\n16\nMSK.22.23\n[Eubacterium] rectale\n[Eubacterium] rectale\nRoseburia sp. CAG:18\nCyanobacteria bacterium\nPhotobacterium damselae\nCandidatus Tremblaya princeps\n\n\n17\nMSK.22.28\n[Eubacterium] rectale\n[Eubacterium] rectale\nRoseburia sp. CAG:18\nCyanobacteria bacterium\nPhotobacterium damselae\nCandidatus Tremblaya princeps\n\n\n18\nMSK.22.51\n[Eubacterium] rectale\n[Eubacterium] rectale\nRoseburia sp. CAG:18\nCyanobacteria bacterium\nPhotobacterium damselae\nCandidatus Tremblaya princeps\n\n\n19\nMSK.16.45\n[Eubacterium] rectale\n[Eubacterium] rectale\nCyanobacteria bacterium\nCandidatus Vidania fulgoroideae\nCandidatus Carsonella ruddii\nBacillus sp. UFRGS-B20\n\n\n20\nMSK.22.92\n[Eubacterium] rectale\n[Eubacterium] rectale\nRoseburia sp. CAG:18\nCyanobacteria bacterium\nPhotobacterium damselae\nCandidatus Vidania fulgoroideae",
    "crumbs": [
      "Fig. 5 - Interpreting New Strain Relationships"
    ]
  },
  {
    "objectID": "06_figure_05.html#conservation-of-motility-expanding-out-from-e.-rectale",
    "href": "06_figure_05.html#conservation-of-motility-expanding-out-from-e.-rectale",
    "title": "Fig. 5 - Interpreting New Strain Relationships",
    "section": "Conservation of motility expanding out from E. rectale",
    "text": "Conservation of motility expanding out from E. rectale\n\n# for each node find all children and measure percentage of children where \n# chosen oggs are present\ncladesateachtreelevel = getleafnames.(speciesparents);\nfrac_present = map(cladesateachtreelevel) do clade_ids\n    cladeidx = indexin(clade_ids, uniprot.obs_names)\n    mean(subset_ogg_mtx[cladeidx, :], dims=1) |&gt; vec\nend |&gt; stack\n\n# check how many oggs (n=16) are fully conserved across the smallest clade (n=3)\nislocallypresent = frac_present[:, 1] .== 1;\n@info \"# locally present = $(sum(islocallypresent)), # not locally present = $(sum(.!islocallypresent))\"\nnumcols = length(cladesizes);\n\n┌ Info: # locally present = 12, # not locally present = 4\n└ @ Main /Users/bend/projects/Doran_etal_2023/notebooks/jl_notebook_cell_df34fa98e69747e1a8f8a730347b8e2f_Y120sZmlsZQ==.jl:11\n\n\n\n# plot the locally present oggs up through the tree\nplot(\n    xticks=(1:numcols, string.(cladesizes)),\n    xrotation=45,\n    ylabel=\"fractional coverage of taxa\",\n    xlabel=\"# taxa in clade\",\n    margin=5Plots.Measures.mm,\n    ylims=(0,1), widen=true,\n    size=(600,300),\n    yticks=0:.25:1,\n    legend=:bottomleft,\n)\nhline!([.25, .5, .75], c=:grey, alpha=.5, linestyle=:dash)\nviolin!(permutedims(1:numcols), frac_present[islocallypresent, :], alpha=.3, c=\"#6182ce\")\ndotplot!(permutedims(1:numcols), frac_present[islocallypresent, :], c=\"#6182ce\", alpha=.5, mode=:none, )\nscatter!([NaN], label=permutedims([\"$(species_name) locally conserved OGG (n=$(sum(islocallypresent)))\"]), c=[\"#6182ce\"], alpha=[0.5] )\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nthese results seemed to show that indeed the orthologs absent from phage-assoiated strains in E. rectale are present on over half of the 250 most closely related species. And, even across all bacteria, there at least 3 orthologs that are conserved across half of bacteria.",
    "crumbs": [
      "Fig. 5 - Interpreting New Strain Relationships"
    ]
  },
  {
    "objectID": "06_figure_05.html#what-phage-related-differences-are-present-for-other-species",
    "href": "06_figure_05.html#what-phage-related-differences-are-present-for-other-species",
    "title": "Fig. 5 - Interpreting New Strain Relationships",
    "section": "What phage related differences are present for other species?",
    "text": "What phage related differences are present for other species?\nGiven the results in E. rectale we wanted to explore if these results were consistent across other species.\n\n\nfunction to plot sample oggs across distribution of oggs in uniprot\nfunction plot_conserved_oggs(species_title, chosen_oggs)\n    chosen_oggs_idx = indexin(chosen_oggs, uniprot.var_names);\n    coverage_uniprot = mean(upmtx .&gt; 0, dims=1) |&gt; vec\n    sample_coverage = coverage_uniprot# [chosen_oggs_idx]\n    sample_percentile = map(sample_coverage) do x \n        mean(coverage_uniprot .&lt; x)\n    end\n    order = sortperm(sample_percentile)\n    plot(\n        title=species_title,\n        xlabel=\"percentile\",\n        ylabel=\"fractional presence\",\n        lims=(0,1), \n        # widen=true, \n        ratio=1,\n        grid=true,\n        ticks=[0, .5, 1],\n        tickdirection=:out,\n        framestyle=:box,\n    )\n\n\n    plot!(sample_percentile[order], sample_coverage[order],\n        c=:lightgrey, linewidth=4,\n    )\n    sample_coverage = coverage_uniprot[chosen_oggs_idx]\n    sample_percentile = map(sample_coverage) do x \n        mean(coverage_uniprot .&lt; x)\n    end\n    p1 = scatter!(sample_percentile, sample_coverage,\n        alpha=.5,c=\"#6182ce\", markersize=6,\n    )\n    margindensity = density(coverage_uniprot, \n        trim=true, fill=0, c=:yellow, linecolor=:black, permute=(:x, :y),\n        ylabel=\"density\",  yrotation=270, yticks=0:5:10,\n        # xticks=false,\n    )\n    plot(p1, margindensity, layout = @layout([a{.9w} b]), size=(500,400), link=:y)\nend\n\n\nplot_conserved_oggs (generic function with 1 method)\n\n\n\n\nfunctions to extract strain ids and donor ids to each statistical test\nfunction getuniquedonors_fromtree(tree, target_id) \n    node = filter!(n -&gt; id(n) == target_id, prewalk(tree))[1]\n    grp1 = getleafnames(children(node)[1])\n    doner_ids_1 = join(unique(replace.(grp1, r\"\\.\\d+$\"=&gt;\"\")), \";\")\n    grp2 = getleafnames(children(node)[2])\n    doner_ids_2 = join(unique(replace.(grp2, r\"\\.\\d+$\"=&gt;\"\")), \";\")\n    doner_ids_1, doner_ids_2\nend\nfunction getuniquestrains_fromtree(tree, target_id) \n    node = filter!(n -&gt; id(n) == target_id, prewalk(tree))[1]\n    grp1 = getleafnames(children(node)[1])\n    doner_ids_1 = join(grp1, \";\")\n    grp2 = getleafnames(children(node)[2])\n    doner_ids_2 = join(grp2, \";\")\n    doner_ids_1, doner_ids_2\nend\n\n\ngetuniquestrains_fromtree (generic function with 1 method)\n\n\n\nstrain_level_testresults = testresults |&gt;\n    df-&gt;subset(df, \n        :tree_level =&gt; ByRow(==(\"strain level\")), \n        :log2FC =&gt; ByRow(x-&gt; abs(x) &gt; 1), \n        :qval_BH =&gt; ByRow(&lt;(0.05)),\n        ) |&gt;\n    df-&gt;leftjoin(df, uniprot.var[:, [:og, :description]], on = :ogg_name =&gt; :og) |&gt;\n    df-&gt;subset(df, :description =&gt; ByRow(x-&gt; (!ismissing(x)) && (x!=(\"\")))) |&gt;\n    df-&gt;select(df, :nodeids, :nodedepth, :grp1_species_mode =&gt; :species, :grp1_N, :grp2_N, :ogg_name,:ogg_freqs, :grp1_prp_exp, :grp2_prp_exp, :log2FC, :qval_BH, :description) |&gt;\n    df-&gt;groupby(df, :nodeids) |&gt;\n    df-&gt;transform(df, \n        :nodeids =&gt; ByRow(x -&gt; getuniquedonors_fromtree(strvartree, x)) =&gt; [:grp1_donor_ids, :grp2_donor_ids],\n        :nodeids =&gt; ByRow(x -&gt; getuniquestrains_fromtree(strvartree, x)) =&gt; [:grp1_strain_ids, :grp2_strain_ids],\n    ) |&gt;\n    df-&gt;sort(df, [:nodeids, :log2FC])\nfirst(strain_level_testresults, 5)\n\n5×16 DataFrame\n\n\n\nRow\nnodeids\nnodedepth\nspecies\ngrp1_N\ngrp2_N\nogg_name\nogg_freqs\ngrp1_prp_exp\ngrp2_prp_exp\nlog2FC\nqval_BH\ndescription\ngrp1_donor_ids\ngrp2_donor_ids\ngrp1_strain_ids\ngrp2_strain_ids\n\n\n\nInt64\nFloat64\nString31\nInt64\nInt64\nString15\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nString?\nString\nString\nString\nString\n\n\n\n\n1\n4\n1.59622\nBacteroides uniformis\n4\n23\nCOG1115\n0.924157\n0.25\n1.0\n-1.3891\n0.0\namino acid carrier protein\nDFI.1;MSK.17\nMSK.19;MSK.20;MSK.16;DFI.3;MSK.18;DFI.4\nDFI.1.247;DFI.1.135;DFI.1.173;MSK.17.15\nMSK.19.71;MSK.19.54;MSK.19.4;MSK.19.91;MSK.19.84;MSK.20.30;MSK.20.3;MSK.20.79;MSK.16.71;MSK.16.7;MSK.16.46;MSK.16.44;MSK.16.39;DFI.3.57;MSK.18.66;MSK.18.33;MSK.18.78;MSK.18.89;MSK.18.30;MSK.18.25;MSK.18.77;MSK.18.74;DFI.4.149\n\n\n2\n4\n1.59622\nBacteroides uniformis\n4\n23\nCOG0639\n0.266854\n0.25\n0.956522\n-1.26605\n0.0\nphosphoprotein phosphatase activity\nDFI.1;MSK.17\nMSK.19;MSK.20;MSK.16;DFI.3;MSK.18;DFI.4\nDFI.1.247;DFI.1.135;DFI.1.173;MSK.17.15\nMSK.19.71;MSK.19.54;MSK.19.4;MSK.19.91;MSK.19.84;MSK.20.30;MSK.20.3;MSK.20.79;MSK.16.71;MSK.16.7;MSK.16.46;MSK.16.44;MSK.16.39;DFI.3.57;MSK.18.66;MSK.18.33;MSK.18.78;MSK.18.89;MSK.18.30;MSK.18.25;MSK.18.77;MSK.18.74;DFI.4.149\n\n\n3\n4\n1.59622\nBacteroides uniformis\n4\n23\nCOG3958\n0.842697\n0.0\n1.0\n-1.12717\n0.0\ntransketolase activity\nDFI.1;MSK.17\nMSK.19;MSK.20;MSK.16;DFI.3;MSK.18;DFI.4\nDFI.1.247;DFI.1.135;DFI.1.173;MSK.17.15\nMSK.19.71;MSK.19.54;MSK.19.4;MSK.19.91;MSK.19.84;MSK.20.30;MSK.20.3;MSK.20.79;MSK.16.71;MSK.16.7;MSK.16.46;MSK.16.44;MSK.16.39;DFI.3.57;MSK.18.66;MSK.18.33;MSK.18.78;MSK.18.89;MSK.18.30;MSK.18.25;MSK.18.77;MSK.18.74;DFI.4.149\n\n\n4\n4\n1.59622\nBacteroides uniformis\n4\n23\nCOG3959\n0.842697\n0.0\n1.0\n-1.12717\n0.0\ntransketolase activity\nDFI.1;MSK.17\nMSK.19;MSK.20;MSK.16;DFI.3;MSK.18;DFI.4\nDFI.1.247;DFI.1.135;DFI.1.173;MSK.17.15\nMSK.19.71;MSK.19.54;MSK.19.4;MSK.19.91;MSK.19.84;MSK.20.30;MSK.20.3;MSK.20.79;MSK.16.71;MSK.16.7;MSK.16.46;MSK.16.44;MSK.16.39;DFI.3.57;MSK.18.66;MSK.18.33;MSK.18.78;MSK.18.89;MSK.18.30;MSK.18.25;MSK.18.77;MSK.18.74;DFI.4.149\n\n\n5\n4\n1.59622\nBacteroides uniformis\n4\n23\nCOG1226\n0.241573\n1.0\n1.0\n-1.06998\n0.0\n(belongs to the monovalent cation proton antiporter 2 (CPA2) transporter (TC 2.A.37) family)\nDFI.1;MSK.17\nMSK.19;MSK.20;MSK.16;DFI.3;MSK.18;DFI.4\nDFI.1.247;DFI.1.135;DFI.1.173;MSK.17.15\nMSK.19.71;MSK.19.54;MSK.19.4;MSK.19.91;MSK.19.84;MSK.20.30;MSK.20.3;MSK.20.79;MSK.16.71;MSK.16.7;MSK.16.46;MSK.16.44;MSK.16.39;DFI.3.57;MSK.18.66;MSK.18.33;MSK.18.78;MSK.18.89;MSK.18.30;MSK.18.25;MSK.18.77;MSK.18.74;DFI.4.149\n\n\n\n\n\n\n\nCSV.write(joinpath(rdir, \"strain_level_testresults_with_annotations.tsv\"), strain_level_testresults; delim=\"\\t\")\n\n\"/Users/bend/projects/Doran_etal_2023/_research/strain_variation_wilcoxon_tests/strain_level_testresults_with_annotations.tsv\"\n\n\n\n\nstrain-level test results where ogg is only shown if was not found elsewhere\nuniqueOGGresults |&gt;\n    df-&gt;subset(df, \n        :tree_level =&gt; ByRow(==(\"strain level\")), \n        :log2FC =&gt; ByRow(x-&gt; abs(x) &gt; 1), \n        :qval_BH =&gt; ByRow(&lt;(0.05)),\n        ) |&gt;\n    df-&gt;leftjoin(df, uniprot.var[:, [:og, :description]], on = :ogg_name =&gt; :og) |&gt;\n    df-&gt;subset(df, :description =&gt; ByRow(x-&gt; (!ismissing(x)) && (x!=(\"\")))) |&gt;\n    df-&gt;select(df, :nodeids, :nodedepth, :grp1_species_mode =&gt; :species, :grp1_N, :grp2_N, :ogg_name,:ogg_freqs, :grp1_prp_exp, :grp2_prp_exp, :log2FC, :qval_BH, :description) |&gt;\n    df-&gt;groupby(df, :nodeids) |&gt;\n    df-&gt;transform(df, \n        :nodeids =&gt; ByRow(x -&gt; getuniquedonors_fromtree(strvartree, x)) =&gt; [:grp1_donor_ids, :grp2_donor_ids],\n        :nodeids =&gt; ByRow(x -&gt; getuniquestrains_fromtree(strvartree, x)) =&gt; [:grp1_strain_ids, :grp2_strain_ids],\n    ) |&gt;\n    df-&gt;sort(df, [:nodeids, :log2FC]) |&gt;\n    df-&gt;CSV.write(joinpath(rdir, \"uniqueOGGresults_strainlevel_testresults.tsv\"), df; delim=\"\\t\")\n\n\n\"/Users/bend/projects/Doran_etal_2023/_research/strain_variation_wilcoxon_tests/uniqueOGGresults_strainlevel_testresults.tsv\"\n\n\nExploring these tables of test results revealed other instances of phage related strain level differences. For P. vulgatus, M. gnavus, B. thetaiotaomicron, and C. comes we found cases where OGGs associated with phage infection where more abundant in multiple strains in contrast to other “phage suppressed OGGs”. We found no specificity in degree of conservation for these phage suppressed OGGs, highly conserved OGGs were just as likely to be suppressed as OGGs only found in a small number of taxa across all of UniProt.\n\nP. vulgatus\n\nspecies_title = \"Phocaeicola vulgatus\"\ntargetid = \"DFI.3.23\"\nstrvar_leaves = getleaves(strvartree)\nbasenode = strvar_leaves[findfirst(n-&gt;name(n) == targetid, strvar_leaves)]\nsubtree = readnw(nwstr(nthparent(basenode, 4)))\nladderize!(subtree)\n# tiplabels = join.(eachrow(strvarobs[indexin(getleafnames(subtree), strvarobs.Strain_ID), [:Strain_ID, :NCBI_Species]]), \" \")\n# idmapping = Dict(k=&gt;v for (k,v) in zip(getleafnames(subtree), tiplabels))\n# rename_treeleaves!(subtree, idmapping)\n\nplot(subtree,\n    c=:black,\n    lw=3, fs=5,\n    size=(600,600),\n    rightmargin=3Plots.cm,\n    leftmargin=10Plots.mm,\n    ylabel=species_title * \" (n = $(length(getleaves(subtree))))\",\n    framestyle=:grid,\n    ticks=false,\n)\n\n# find and plot test nodes in subtree\nleaves_of_test_nodes = map(prewalk(nthparent(basenode, 4))) do node; test_nodes=unique(strain_level_testresults.nodeids)\n    if (Int(id(node)) ∈ test_nodes) && minimum(length.(getleaves.(children(node)))) &gt; 6\n        join(sort(getleafnames(node)), \";\")\n    else\n        nothing\n    end\nend |&gt; x-&gt;filter(!isnothing, x)\nsubtreepos = NewickTree.treepositions(subtree)\ntestnode_positions = map(keys(subtreepos), values(subtreepos)) do k,v\n    x, y = v\n    label = join(sort(getleafnames(k)), \";\")\n    if label ∈ leaves_of_test_nodes\n        (; x, y, label)\n    else\n        nothing\n    end\nend |&gt; x-&gt;filter(!isnothing, x)\n@df DataFrame(testnode_positions) scatter!(:x, :y, markersize=6, c=:yellow, markershape=:diamond)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# collected by manually searching through strain-level test results\nnotable_oggs = [\"COG0863\",\"COG1083\",\"COG4744\", \"32ZV1\", \"COG0666\",\"COG2214\",\"2Z8QV\"]\nplot_conserved_oggs(\"P. vulgatus\", notable_oggs) \n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nM. gnavus\n\nspecies_title = \"[Ruminococcus] gnavus\"\ntargetid = \"MSK.22.91\"\nstrvar_leaves = getleaves(strvartree)\nbasenode = strvar_leaves[findfirst(n-&gt;name(n) == targetid, strvar_leaves)]\nsubtreeroot = nthparent(basenode, 5)\nsubtree = readnw(nwstr(subtreeroot))\nladderize!(subtree)\n# tiplabels = join.(eachrow(strvarobs[indexin(getleafnames(subtree), strvarobs.Strain_ID), [:Strain_ID, :NCBI_Species]]), \" \")\n# idmapping = Dict(k=&gt;v for (k,v) in zip(getleafnames(subtree), tiplabels))\n# rename_treeleaves!(subtree, idmapping)\n\nplot(subtree,\n    c=:black,\n    lw=3, fs=5,\n    size=(600,600),\n    rightmargin=3Plots.cm,\n    leftmargin=10Plots.mm,\n    ylabel=\"M. gnavus (n = 41)\",\n    framestyle=:grid,\n    ticks=false,\n)\n\n# find and plot test nodes in subtree\nleaves_of_test_nodes = map(prewalk(subtreeroot)) do node; test_nodes=unique(strain_level_testresults.nodeids)\n    if (Int(id(node)) ∈ test_nodes) && minimum(length.(getleaves.(children(node)))) &gt;= 4\n        join(sort(getleafnames(node)), \";\")\n    else\n        nothing\n    end\nend |&gt; x-&gt;filter(!isnothing, x)\nsubtreepos = NewickTree.treepositions(subtree)\ntestnode_positions = map(keys(subtreepos), values(subtreepos)) do k,v\n    x, y = v\n    label = join(sort(getleafnames(k)), \";\")\n    if label ∈ leaves_of_test_nodes\n        (; x, y, label)\n    else\n        nothing\n    end\nend |&gt; x-&gt;filter(!isnothing, x)\n@df DataFrame(testnode_positions) scatter!(:x, :y, markersize=6, c=:yellow, markershape=:diamond)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# collected by manually searching through strain-level test results\nnotable_oggs =     [\"COG1440\",\"COG1447\",\"COG1694\", \"COG0531\",\"COG1501\",\"COG2222\"]\nplot_conserved_oggs(\"M. gnavus\", notable_oggs) \n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nB. thetaiotaomicron\n\nspecies_title = \"Bacteroides thetaiotaomicron\"\ntargetid = \"DFI.4.108\"\nstrvar_leaves = getleaves(strvartree)\nbasenode = strvar_leaves[findfirst(n-&gt;name(n) == targetid, strvar_leaves)]\nsubtreeroot = nthparent(basenode, 4)\nsubtree = readnw(nwstr(subtreeroot))\nladderize!(subtree)\n# tiplabels = join.(eachrow(strvarobs[indexin(getleafnames(subtree), strvarobs.Strain_ID), [:Strain_ID, :NCBI_Species]]), \" \")\n# idmapping = Dict(k=&gt;v for (k,v) in zip(getleafnames(subtree), tiplabels))\n# rename_treeleaves!(subtree, idmapping)\n\nplot(subtree,\n    c=:black,\n    lw=3, fs=5,\n    size=(600,600),\n    rightmargin=3Plots.cm,\n    leftmargin=10Plots.mm,\n    ylabel=species_title * \" (n = $(length(getleaves(subtree))))\",\n    framestyle=:grid,\n    ticks=false,\n)\n\n# find and plot phage related test nodes in subtree\nleaves_of_test_nodes = map(prewalk(subtreeroot)) do node; test_nodes=unique(strain_level_testresults.nodeids)\n    if (Int(id(node)) ∈ test_nodes) && minimum(length.(getleaves.(children(node)))) == 7\n        join(sort(getleafnames(node)), \";\")\n    else\n        nothing\n    end\nend |&gt; x-&gt;filter(!isnothing, x)\nsubtreepos = NewickTree.treepositions(subtree)\ntestnode_positions = map(keys(subtreepos), values(subtreepos)) do k,v\n    x, y = v\n    label = join(sort(getleafnames(k)), \";\")\n    if label ∈ leaves_of_test_nodes\n        (; x, y, label)\n    else\n        nothing\n    end\nend |&gt; x-&gt;filter(!isnothing, x)\n@df DataFrame(testnode_positions) scatter!(:x, :y, markersize=6, c=:yellow, markershape=:diamond)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# collected by manually searching through strain-level test results\nnotable_oggs = [\"COG1474\",\"COG2942\",\"COG3410\"]\nplot_conserved_oggs(\"B. thetaiotaomicron\", notable_oggs)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nC. comes\n\nspecies_title = \"Coprococcus comes\"\ntargetid = \"MSK.20.88\"\nstrvar_leaves = getleaves(strvartree)\nbasenode = strvar_leaves[findfirst(n-&gt;name(n) == targetid, strvar_leaves)]\nsubtreeroot = nthparent(basenode, 6)\nsubtree = readnw(nwstr(subtreeroot))\nladderize!(subtree)\n# tiplabels = join.(eachrow(strvarobs[indexin(getleafnames(subtree), strvarobs.Strain_ID), [:Strain_ID, :NCBI_Species]]), \" \")\n# idmapping = Dict(k=&gt;v for (k,v) in zip(getleafnames(subtree), tiplabels))\n# rename_treeleaves!(subtree, idmapping)\n\nplot(subtree,\n    c=:black,\n    lw=3, fs=5,\n    size=(600,600),\n    rightmargin=3Plots.cm,\n    leftmargin=10Plots.mm,\n    ylabel=species_title * \" (n = $(length(getleaves(subtree))))\",\n    framestyle=:grid,\n    ticks=false,\n)\n\n# find and plot phage related test nodes in subtree\nleaves_of_test_nodes = map(prewalk(subtreeroot)) do node; test_nodes=unique(strain_level_testresults.nodeids)\n    if (Int(id(node)) ∈ test_nodes) && minimum(length.(getleaves.(children(node)))) ==5\n        join(sort(getleafnames(node)), \";\")\n    else\n        nothing\n    end\nend |&gt; x-&gt;filter(!isnothing, x)\nsubtreepos = NewickTree.treepositions(subtree)\ntestnode_positions = map(keys(subtreepos), values(subtreepos)) do k,v\n    x, y = v\n    label = join(sort(getleafnames(k)), \";\")\n    if label ∈ leaves_of_test_nodes\n        (; x, y, label)\n    else\n        nothing\n    end\nend |&gt; x-&gt;filter(!isnothing, x)\n@df DataFrame(testnode_positions) scatter!(:x, :y, markersize=6, c=:yellow, markershape=:diamond)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# collected by manually searching through strain-level test results\nnotable_oggs = [\"COG0145\",\"COG1011\",\"COG1351\",\"COG4951\",\"2Z81G\",]\nplot_conserved_oggs(\"C. comes\", notable_oggs)",
    "crumbs": [
      "Fig. 5 - Interpreting New Strain Relationships"
    ]
  },
  {
    "objectID": "07_figure_06.html",
    "href": "07_figure_06.html",
    "title": "Fig. 6 - SLE-Lasso models",
    "section": "",
    "text": "julia setup\nusing DrWatson\n@quickactivate projectdir()\n\nusing DataFramesMeta\nusing SpectralInference\nusing NewickTree\nusing MLJ\nimport JLD2\nusing GLMNet: GLMNet, glmnet\nusing Chain\nusing Distributions: Normal\nusing MLJBase: train_test_pairs\nusing Distances, Clustering\nusing Distributions\nusing Printf: @sprintf\nusing Muon, CSV, DataFrames\nusing Gotree_jll\nusing Random: seed!\nusing FreqTables\nusing NearestNeighbors\nusing HypothesisTests\nusing MultipleTesting: adjust, Bonferroni, BenjaminiHochberg\nusing StatsPlots, StatsBase\ntheme(:default, grid=false, tickdir=:out, label=\"\")\ninclude(srcdir(\"helpers.jl\"))\n\nddir = datadir(\"exp_raw\", \"BB669\")\nrdir = projectdir(\"_research\", \"metabolite_model_outofbag\") |&gt; mkpath\npdir = plotsdir(\"metabolite_model_outofbag\") |&gt; mkpath\nsupptbl_dir = projectdir(\"_research\", \"SuppTables\") |&gt; mkpath\n\nspeciescolordf = CSV.read(datadir(\"exp_raw\", \"BB669\", \"subsettreecolors.csv\"), DataFrame)\nspecies_color_dict = Dict(k =&gt; v for (k, v) in zip(speciescolordf.species_name, speciescolordf.color));",
    "crumbs": [
      "Fig. 6 - SLE-Lasso models"
    ]
  },
  {
    "objectID": "07_figure_06.html#plot-tree-and-metabolites",
    "href": "07_figure_06.html#plot-tree-and-metabolites",
    "title": "Fig. 6 - SLE-Lasso models",
    "section": "Plot tree and metabolites",
    "text": "Plot tree and metabolites\nWhen we look at the Spectral Tree in relation to metabolites, we see structure in that clades tend to have similar metabolite capacities.\nWe define the SLE-Lasso models, based on the tree structure by using a Lasso model to discover which clade branches (portions of the tree) are most important for describing particular metabolites.\n\n# plot cladogram\nstrvar_tree_hc = UPGMA_tree(subsetDij ./ size(biobank[\"UPorder_oggs\"], 2))\nsubsettreestring = SpectralInference.newickstring(strvar_tree_hc, trnYdf.Strain_ID)\nsubsettree = readnw(subsettreestring);\nplot(strvar_tree_hc,\n    # size=(600, 900),\n    lw=0.5,\n    yflip=true,\n    xmirror=true,\n    xticks=:none,\n    permute=(:y, :x),\n    grid=false,\n    tickdirection=:none,\n    rightmargin=1Plots.Measures.mm,\n    label=\"\",\n    framestyle=:grid,\n)\n\n# plot annotation rectangles\nrectangle(w, h, x, y) = Shape(x .+ [0, w, w, 0], y .+ [0, 0, h, h])\nspeciesvector = trnYdf.Species[strvar_tree_hc.order]\nbreaks = findall(speciesvector[begin:(end-1)] .!= speciesvector[2:end])[Not([10, 11, 12, 13, 14, 15])]\nedges = [(s, e) for (s, e) in zip(vcat([0], breaks), vcat(breaks, [length(speciesvector)]))];\nrects = [rectangle(2, (e - s), 0, s + 0.5) for (s, e) in zip(vcat([0], breaks), vcat(breaks, [length(speciesvector)]))];\nrectspeciescolors = permutedims(speciescolordf.color[indexin(speciesvector[first.(edges).+1], speciescolordf.species_name)]);\nfancy_treeplot = plot!(permutedims(rects), fill=0.35, lw=0, c=rectspeciescolors, label=\"\")\n\n# plot legend for tree\nspecieslabels = [\n    \"Bacteroides uniformis\",\n    \"Phocaeicola vulgatus\",\n    \"Bacteroides thetaiotaomicron\",\n    \"[Ruminococcus] gnavus\",\n    \"Bifidobacterium breve\",\n    \"[Eubacterium] rectale\",\n    \"Dorea formicigenerans\",\n    \"Coprococcus comes\",\n    \"Blautia luti & Blautia wexlerae\",\n    \"Anaerostipes hadrus\",\n]\nfancy_treeplot = plot!(zeros(1, 10),\n    legend=:left,\n    labels=permutedims(reverse(specieslabels)),\n    c=reverse(rectspeciescolors),\n    legendfontsize=5,\n);\n\n# plot metabolite heatmap\ntreeorder = indexin(getleafnames(subsettree), trnYdf.Strain_ID);\nhplot = heatmap(metab_trnY[treeorder, :],\n    c=:bwr, clims=getlims(metab_trnY),\n    xticks=(1:size(metab_trnY, 2), metabolite_label),\n    xrotation=90, xtickfontsize=7,\n    yticks=:none,\n);\n\nplot(fancy_treeplot, hplot, size=(900, 900))",
    "crumbs": [
      "Fig. 6 - SLE-Lasso models"
    ]
  },
  {
    "objectID": "07_figure_06.html#sle-lambda-value-analysis",
    "href": "07_figure_06.html#sle-lambda-value-analysis",
    "title": "Fig. 6 - SLE-Lasso models",
    "section": "SLE Lambda value analysis",
    "text": "SLE Lambda value analysis\n\n# Takes 3 min\nK = 1 # Make predictions with SPI-LASSO on 1 nearest neighbor\nλ = 0.001\nlambdas = exp10.(range(-4, 0, length=101))\nlambdacol = last(findmin(x -&gt; abs(x - λ), lambdas))\nREPS = 5\nNFOLDS = 4\nadjust_rsquared(r2, n, df) = 1 - (1 - r2) * ((n - 1) / (n - 1 - df))\n\nadjust_rsquared (generic function with 1 method)\n\n\n\nseed!(424242) # this is stable within julia versions, for exact results use Julia 1.10\ncv = StratifiedCV(nfolds=NFOLDS, shuffle=true);\nfolds = vcat([train_test_pairs(cv, 1:sum(full_train_mask), trnYdf.Species) for i in 1:REPS]...)\n\noof_preds_df_stacked = DataFrame()\noof_dropout_preds_df_stacked = DataFrame()\ninf_preds_df_stacked = DataFrame()\ncoefdf = DataFrame()\nmodels_tbl = []\nfor (i, (fold_trn, fold_tst)) in collect(enumerate(folds))\n\n    # Use tree to get lineage traces for each training and test sample\n    # using projections of taxa into UniProt so these loadings are constant regardless of folds\n    foldPCs = UPfullPCs[fold_trn, :]\n    # trn_nns = map(r-&gt;partialsortperm(r, 1:K), eachrow(subsetDij[fold_trn, fold_trn]))\n    tst_nns = map(r -&gt; partialsortperm(r, 1:K), eachrow(subsetDij[fold_tst, fold_trn]))\n    # oob_nns = map(r -&gt; partialsortperm(r, 1:K), eachrow(subset_oob_Dij[:, fold_trn]))\n    bbextra_nns = map(r -&gt; partialsortperm(r, 1:K), eachrow(subset_bbextra_Dij[:, fold_trn]))\n\n    # UPGMA tree building...\n    foldhc = UPGMA_tree(subsetDij[fold_trn, fold_trn])\n    foldtree = readnw(SpectralInference.newickstring(foldhc, trnYdf.Strain_ID[fold_trn]))\n    ordered_treeids = getleafids(foldtree)[indexin(trnYdf.Strain_ID[fold_trn], getleafnames(foldtree))]\n    # ladderize!(foldtree, rev=false)\n\n    # Make SLE ancester encoding for training set\n    trnX_all = @chain begin\n        spectral_lineage_encoding(foldtree, ordered_treeids)\n        getfield.(:sle)\n        stack\n        float.(_)\n    end\n    isinternal_fold = map(!isleaf, prewalk(foldtree))\n    trnX = trnX_all[:, isinternal_fold]\n\n    num_descendent_species = map(prewalk(foldtree)) do node\n        if !isroot(node)\n            sps = trnYdf.Species[indexin(getleafnames(parent(node)), trnYdf.Strain_ID)]\n            return length(unique(sps))\n        else\n            NaN\n        end\n    end\n\n    # prepare mask for dropping out subspecies branches\n    # any branch that only has a single species as desendents of its parent\n    dropout_mask = num_descendent_species[isinternal_fold] .&lt;= 1.0\n\n    # Get features for each out-of-fold isolate\n    oofX = map(tst_nns) do nn\n        trnX[nn, :] |&gt;\n        mtx -&gt; mean(mtx, dims=1)\n        # df -&gt; combine(df, [c =&gt; mean for c in 1:size(df, 2)])\n    end |&gt; x -&gt; vcat(x...)\n\n\n    # fit lasso model\n    individual_metabolite_results = []\n    # (target_idx, (target, mlabel)) = (findfirst(==(\"Phenylacetate\"), metabolite_label), (\"Phenylacetate\", \"Phenylacetate\"))\n    for (target_idx, (target, mlabel)) in enumerate(zip(metabolite_names, metabolite_label))\n\n        mpath = glmnet(trnX, metab_trnY[fold_trn, target_idx], Normal();\n            lambda=lambdas,\n        )\n\n        # get coefficients dropping out subspecies branches\n        betas_droppedout = Matrix(deepcopy(mpath.betas))\n        betas_droppedout[dropout_mask, :] .= 0.0\n\n        push!(models_tbl, (;\n            metabolite_name = target,\n            metabolite_label = mlabel,\n            fold = ((i - 1) % NFOLDS) + 1,\n            resample = ((i - 1) ÷ NFOLDS) + 1,\n            model = mpath\n        ))\n\n        # save results of trained model\n        # in fold predictions\n        inf_preds_df_stacked = vcat(inf_preds_df_stacked, DataFrame(\n            :row_id =&gt; fold_trn,\n            :msk_id =&gt; trnYdf.Strain_ID[fold_trn],\n            :metabolite_name =&gt; target,\n            :metabolite_label =&gt; mlabel,\n            :fold =&gt; ((i - 1) % NFOLDS) + 1,\n            :resample =&gt; ((i - 1) ÷ NFOLDS) + 1,\n            :truth =&gt; metab_trnY[fold_trn, target_idx],\n            # :preds =&gt; GLMNet.predict(mpath, trnX)[:, lambdacol],\n            [Symbol(\"preds_$i\") =&gt; v for (i, v) in zip(lambdas, eachcol(GLMNet.predict(mpath, trnX)))]...))\n\n        # out-of-fold predictions\n        oof_preds_df_stacked = vcat(oof_preds_df_stacked, DataFrame(\n            :row_id =&gt; fold_tst,\n            :msk_id =&gt; trnYdf.Strain_ID[fold_tst],\n            :metabolite_name =&gt; target,\n            :metabolite_label =&gt; mlabel,\n            :fold =&gt; ((i - 1) % NFOLDS) + 1,\n            :resample =&gt; ((i - 1) ÷ NFOLDS) + 1,\n            :truth =&gt; metab_trnY[fold_tst, target_idx],\n            # :preds =&gt; GLMNet.predict(mpath, tstX)[:, lambdacol],\n            [Symbol(\"preds_$i\") =&gt; v for (i, v) in zip(lambdas, eachcol(GLMNet.predict(mpath, oofX)))]...))\n        \n        # out-of-fold predictions dropping out subspecies branches\n        oof_dropout_preds_df_stacked = vcat(oof_dropout_preds_df_stacked, DataFrame(\n            :row_id =&gt; fold_tst,\n            :msk_id =&gt; trnYdf.Strain_ID[fold_tst],\n            :metabolite_name =&gt; target,\n            :metabolite_label =&gt; mlabel,\n            :fold =&gt; ((i - 1) % NFOLDS) + 1,\n            :resample =&gt; ((i - 1) ÷ NFOLDS) + 1,\n            :truth =&gt; metab_trnY[fold_tst, target_idx],\n            # :preds =&gt; GLMNet.predict(mpath, tstX)[:, lambdacol],\n            [Symbol(\"preds_$i\") =&gt; v for (i, v) in zip(lambdas, eachcol(oofX * betas_droppedout))]...))\n\n        # coefs of model\n        coefdf = vcat(coefdf, DataFrame(\n            :metabolite_name =&gt; target,\n            :metabolite_label =&gt; mlabel,\n            :fold =&gt; ((i - 1) % NFOLDS) + 1,\n            :resample =&gt; ((i - 1) ÷ NFOLDS) + 1,\n            :num_species_descendents =&gt; num_descendent_species[isinternal_fold],\n            [Symbol(\"coefs_$k\") =&gt; v for (k, v) in zip(lambdas, eachcol(mpath.betas))]...\n        ))\n    end\n    println(\"on $(i)th resample\")\nend\n\nCSV.write(joinpath(rdir, \"oof_predictions_stacked_SLE_lambda=many.csv\"), oof_preds_df_stacked)\nCSV.write(joinpath(rdir, \"oof_dropout_predictions_stacked_SLE_lambda=many.csv\"), oof_dropout_preds_df_stacked)\nCSV.write(joinpath(rdir, \"infold_predictions_stacked_SLE_lambda=many.csv\"), inf_preds_df_stacked)\nCSV.write(joinpath(rdir, \"coefs_SLE_lambda=many.csv\"), coefdf)\nJLD2.save(joinpath(rdir, \"models_SLE_lambda=many.jld2\"), Dict(\"models\" =&gt; models_tbl))\nJLD2.save(joinpath(rdir, \"folds_SLE_lambda=many.jld2\"), @strdict(folds))\n\non 1th resample\non 2th resample\non 3th resample\non 4th resample\non 5th resample\non 6th resample\non 7th resample\non 8th resample\non 9th resample\non 10th resample\non 11th resample\non 12th resample\non 13th resample\non 14th resample\non 15th resample\non 16th resample\non 17th resample\non 18th resample\non 19th resample\non 20th resample\n\n\n\noof_preds_df_stacked = CSV.read(joinpath(rdir, \"oof_predictions_stacked_SLE_lambda=many.csv\"), DataFrame)\noof_preds_df_stacked =\n    @chain oof_preds_df_stacked begin\n        stack(8:108)\n        transform!(:variable =&gt; ByRow(s -&gt; parse(Float64, last(split(s, \"_\")))) =&gt; :lambda)\n        select(Not([:variable, :value]), :value =&gt; :preds)\n    end\ncoefdf_stacked =\n    @chain CSV.read(joinpath(rdir, \"coefs_SLE_lambda=many.csv\"), DataFrame) begin\n        stack(6:106)\n        transform!(:variable =&gt; ByRow(s -&gt; parse(Float64, last(split(s, \"_\")))) =&gt; :lambda)\n        select(Not([:variable, :value]), :value =&gt; :coef)\n    end\nmdlstatsdf_stacked =\n    @chain coefdf_stacked begin\n        groupby([:metabolite_label, :fold, :resample, :lambda])\n        combine(\n            :coef =&gt; (x -&gt; sum(x .!= 0)) =&gt; :degrees_freedom,\n            :fold =&gt; (x -&gt; (3 / 4 * sum(full_train_mask) - 1)) =&gt; :orig_degrees_freedom, # num params possible\n            :coef =&gt; (x -&gt; mean(x .!= 0)) =&gt; :degrees_freedom_prop,\n            [:num_species_descendents, :coef] =&gt; ((n, c) -&gt; mean((n.==11)[(c.!=0)])) =&gt; :phylum_level,\n            [:num_species_descendents, :coef] =&gt; ((n, c) -&gt; mean((1 .&lt; n .&lt; 11)[(c.!=0)])) =&gt; :species_level,\n            [:num_species_descendents, :coef] =&gt; ((n, c) -&gt; mean((n.==1)[(c.!=0)])) =&gt; :strain_level,\n        )\n    end\nmdlstatsdf =\n    @chain oof_preds_df_stacked begin\n        groupby([:metabolite_label, :fold, :resample, :lambda])\n        combine(\n            [:truth, :preds] =&gt; ((y, yhat) -&gt; rsquared(yhat, y)) =&gt; :rsq,\n            [:truth, :preds] =&gt; ((y, yhat) -&gt; cor(yhat, y)) =&gt; :cor,\n        )\n        leftjoin(mdlstatsdf_stacked, on=[:metabolite_label, :fold, :resample, :lambda])\n        transform!(\n            [:rsq, :orig_degrees_freedom, :degrees_freedom] =&gt; ByRow((r, n, d) -&gt; adjust_rsquared(r, n, d)) =&gt; :rsq_adj,\n            :phylum_level =&gt; (x -&gt; replace(x, NaN =&gt; 0.0)) =&gt; identity,\n            :species_level =&gt; (x -&gt; replace(x, NaN =&gt; 0.0)) =&gt; identity,\n            :strain_level =&gt; (x -&gt; replace(x, NaN =&gt; 0.0)) =&gt; identity,\n        )\n        select!([:metabolite_label, :fold, :resample, :lambda], :rsq, :rsq_adj, :cor, 6:12)\n        disallowmissing\n    end\nCSV.write(joinpath(rdir, \"oof_modelstats_SLE_lambda=many.csv\"), mdlstatsdf)\n\nmdlstatsdf_mean =\n    @chain mdlstatsdf begin\n        subset(:lambda =&gt; ByRow(&gt;=(1e-3)))\n        groupby([:metabolite_label, :lambda])\n        combine(\n            5:13 .=&gt; mean,\n            5:13 .=&gt; std,\n        )\n    end\n\nbestlambdamodels = @chain mdlstatsdf_mean begin\n    groupby(:metabolite_label)\n    subset(:rsq_adj_mean =&gt; (x -&gt; x .== maximum(x)))\nend\n\n32×20 DataFrame7 rows omitted\n\n\n\nRow\nmetabolite_label\nlambda\nrsq_mean\nrsq_adj_mean\ncor_mean\ndegrees_freedom_mean\norig_degrees_freedom_mean\ndegrees_freedom_prop_mean\nphylum_level_mean\nspecies_level_mean\nstrain_level_mean\nrsq_std\nrsq_adj_std\ncor_std\ndegrees_freedom_std\norig_degrees_freedom_std\ndegrees_freedom_prop_std\nphylum_level_std\nspecies_level_std\nstrain_level_std\n\n\n\nString31\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\n\n\n\n\n1\nAcetate\n0.0758578\n0.713737\n0.678213\n0.853746\n29.3\n266.0\n0.11015\n0.0\n0.344767\n0.655233\n0.0471556\n0.0524868\n0.0290627\n2.47301\n0.0\n0.00929704\n0.0\n0.0434495\n0.0434495\n\n\n2\nButyrate\n0.131826\n0.852513\n0.843584\n0.927411\n15.2\n266.0\n0.0571429\n0.132768\n0.341282\n0.52595\n0.0365737\n0.0384522\n0.0217612\n1.47256\n0.0\n0.00553592\n0.0129736\n0.042269\n0.0513115\n\n\n3\nPropionate\n0.144544\n0.537103\n0.501361\n0.741929\n19.0\n266.0\n0.0714286\n0.0164044\n0.224591\n0.759005\n0.0529746\n0.0564935\n0.0433324\n2.42791\n0.0\n0.00912747\n0.0419871\n0.0450987\n0.0734243\n\n\n4\nSuccinate\n0.1\n0.61316\n0.567427\n0.791151\n27.95\n266.0\n0.105075\n0.00740741\n0.300704\n0.691888\n0.0363944\n0.0415038\n0.0250723\n3.73427\n0.0\n0.0140386\n0.0227995\n0.0448213\n0.0465965\n\n\n5\n2-Methylbutyrate\n0.229087\n0.594906\n0.569073\n0.781151\n16.0\n266.0\n0.0601504\n0.127386\n0.127386\n0.745227\n0.0598302\n0.0620661\n0.0443341\n2.2711\n0.0\n0.00853797\n0.0178117\n0.0178117\n0.0356234\n\n\n6\n3-Aminoisobutyrate\n0.144544\n0.177975\n0.133944\n0.455166\n13.5\n266.0\n0.0507519\n0.0\n0.158138\n0.841862\n0.120498\n0.12507\n0.118141\n1.90567\n0.0\n0.00716417\n0.0\n0.0359807\n0.0359807\n\n\n7\n5-Aminovalerate\n0.275423\n0.543044\n0.506948\n0.747554\n19.4\n266.0\n0.0729323\n0.0488415\n0.269576\n0.681582\n0.0374495\n0.039984\n0.0263265\n2.64376\n0.0\n0.00993895\n0.0506661\n0.0730989\n0.0667503\n\n\n8\nAlanine\n0.057544\n0.0639759\n0.0281666\n0.304284\n9.75\n266.0\n0.0366541\n0.0\n0.38438\n0.61562\n0.0437672\n0.0461699\n0.103909\n2.07428\n0.0\n0.00779804\n0.0\n0.117553\n0.117553\n\n\n9\nAspartate\n0.144544\n0.44623\n0.394543\n0.678519\n22.55\n266.0\n0.0847744\n0.0719725\n0.198808\n0.72922\n0.0827505\n0.0913016\n0.0659453\n2.23548\n0.0\n0.00840406\n0.0331121\n0.0457345\n0.054044\n\n\n10\nBenzoate\n0.275423\n0.0891614\n0.0758291\n0.397764\n3.8\n266.0\n0.0142857\n0.0\n0.500119\n0.499881\n0.101351\n0.103552\n0.148358\n1.39925\n0.0\n0.00526033\n0.0\n0.232841\n0.232841\n\n\n11\nCysteine\n0.0691831\n0.281043\n0.17623\n0.544532\n33.65\n266.0\n0.126504\n0.0\n0.212563\n0.787437\n0.101866\n0.118007\n0.0956086\n2.43386\n0.0\n0.00914986\n0.0\n0.0467705\n0.0467705\n\n\n12\nGlutamate\n0.0691831\n0.182157\n0.114249\n0.456756\n20.3\n266.0\n0.0763158\n0.0\n0.21916\n0.78084\n0.0474709\n0.0518121\n0.0648258\n2.55672\n0.0\n0.00961175\n0.0\n0.0511875\n0.0511875\n\n\n13\nGlycine\n0.20893\n0.711895\n0.710018\n0.860794\n1.8\n266.0\n0.00676692\n0.0\n0.608333\n0.391667\n0.168478\n0.169533\n0.0820137\n0.523148\n0.0\n0.00196672\n0.0\n0.260875\n0.260875\n\n\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n\n\n21\nPalmitate\n0.0630957\n0.054432\n0.0274684\n0.297454\n7.35\n266.0\n0.0276316\n0.0\n0.370325\n0.629675\n0.0228067\n0.0222852\n0.0457244\n1.38697\n0.0\n0.00521417\n0.0\n0.137163\n0.137163\n\n\n22\nPhenylacetate\n0.190546\n0.753281\n0.730152\n0.873597\n22.85\n266.0\n0.0859023\n0.0\n0.21961\n0.78039\n0.0417033\n0.0445242\n0.0239348\n2.39022\n0.0\n0.00898579\n0.0\n0.0285486\n0.0285486\n\n\n23\nPhenylalanine\n0.0398107\n0.161741\n0.078399\n0.428751\n23.95\n266.0\n0.0900376\n0.0\n0.180211\n0.819789\n0.0921165\n0.101669\n0.119583\n2.60516\n0.0\n0.00979382\n0.0\n0.0535672\n0.0535672\n\n\n24\nProline\n0.0630957\n0.283207\n0.227891\n0.548492\n19.0\n266.0\n0.0714286\n0.107395\n0.286167\n0.606439\n0.0652789\n0.0692945\n0.063463\n2.75299\n0.0\n0.0103496\n0.0156659\n0.0656436\n0.0660317\n\n\n25\nSerine\n0.229087\n0.252343\n0.230219\n0.562255\n7.35\n266.0\n0.0276316\n0.0\n0.160022\n0.839978\n0.197141\n0.207998\n0.100998\n1.81442\n0.0\n0.00682111\n0.0\n0.0611798\n0.0611798\n\n\n26\nThreonine\n0.0630957\n0.123956\n0.0632694\n0.442701\n17.05\n266.0\n0.0640977\n0.0\n0.218394\n0.781606\n0.401533\n0.433177\n0.171421\n2.13923\n0.0\n0.00804223\n0.0\n0.0780699\n0.0780699\n\n\n27\nTryptamine\n0.20893\n0.743699\n0.726334\n0.867432\n17.05\n266.0\n0.0640977\n0.0\n0.169351\n0.830649\n0.0507361\n0.0523907\n0.0288667\n2.85574\n0.0\n0.0107359\n0.0\n0.0573328\n0.0573328\n\n\n28\nTryptophan\n0.057544\n0.307183\n0.24848\n0.578114\n20.7\n266.0\n0.0778195\n0.0\n0.239016\n0.760984\n0.0732773\n0.0796236\n0.0797394\n1.68897\n0.0\n0.00634952\n0.0\n0.0659877\n0.0659877\n\n\n29\nTyramine\n0.0331131\n0.263256\n0.20591\n0.553014\n19.2\n266.0\n0.0721805\n0.0\n0.34614\n0.65386\n0.0523266\n0.0524228\n0.0564838\n2.82097\n0.0\n0.0106052\n0.0\n0.0526799\n0.0526799\n\n\n30\nTyrosine\n0.190546\n0.0381358\n0.0291187\n0.30607\n2.45\n266.0\n0.00921053\n0.0\n0.330833\n0.669167\n0.0622661\n0.0634383\n0.155491\n0.944513\n0.0\n0.0035508\n0.0\n0.253298\n0.253298\n\n\n31\nValerate\n0.190546\n0.379166\n0.336592\n0.634284\n17.0\n266.0\n0.0639098\n0.100846\n0.274531\n0.624623\n0.051993\n0.0556162\n0.0474183\n1.86378\n0.0\n0.0070067\n0.0353121\n0.0359245\n0.0516123\n\n\n32\nValine\n0.0363078\n0.163081\n0.0880475\n0.437981\n21.8\n266.0\n0.0819549\n0.0\n0.34365\n0.65635\n0.0587783\n0.0633141\n0.0934369\n3.01924\n0.0\n0.0113505\n0.0\n0.0546937\n0.0546937\n\n\n\n\n\n\n\ninfold_preds_df_stacked = CSV.read(joinpath(rdir, \"infold_predictions_stacked_SLE_lambda=many.csv\"), DataFrame)\ninfold_preds_df_stacked =\n    @chain infold_preds_df_stacked begin\n        stack(8:108)\n        transform!(:variable =&gt; ByRow(s -&gt; parse(Float64, last(split(s, \"_\")))) =&gt; :lambda)\n        select(Not([:variable, :value]), :value =&gt; :preds)\n    end;\n\ninfold_mdlstatsdf =\n    @chain infold_preds_df_stacked begin\n        groupby([:metabolite_label, :fold, :resample, :lambda])\n        combine(\n            [:truth, :preds] =&gt; ((y, yhat) -&gt; rsquared(yhat, y)) =&gt; :rsq,\n            [:truth, :preds] =&gt; ((y, yhat) -&gt; cor(yhat, y)) =&gt; :cor,\n        )\n        leftjoin(mdlstatsdf_stacked, on=[:metabolite_label, :fold, :resample, :lambda])\n        transform!(\n            [:rsq, :orig_degrees_freedom, :degrees_freedom] =&gt; ByRow((r, n, d) -&gt; adjust_rsquared(r, n, d)) =&gt; :rsq_adj,\n            :phylum_level =&gt; (x -&gt; replace(x, NaN =&gt; 0.0)) =&gt; identity,\n            :species_level =&gt; (x -&gt; replace(x, NaN =&gt; 0.0)) =&gt; identity,\n            :strain_level =&gt; (x -&gt; replace(x, NaN =&gt; 0.0)) =&gt; identity,\n        )\n        select!([:metabolite_label, :fold, :resample, :lambda], :rsq, :rsq_adj, :cor, 6:12)\n        disallowmissing\n    end;",
    "crumbs": [
      "Fig. 6 - SLE-Lasso models"
    ]
  },
  {
    "objectID": "07_figure_06.html#plot-acetate",
    "href": "07_figure_06.html#plot-acetate",
    "title": "Fig. 6 - SLE-Lasso models",
    "section": "Plot Acetate",
    "text": "Plot Acetate\n\nspeciescolordf = CSV.read(datadir(\"exp_raw\", \"BB669\", \"subsettreecolors.csv\"), DataFrame)\nspecies_color_dict = Dict(k =&gt; v for (k, v) in zip(speciescolordf.species_name, speciescolordf.color));\n\n\ncompound = \"Acetate\"\npltdf =\n    @chain bestlambdamodels begin\n        select([:metabolite_label, :lambda])\n        leftjoin(oof_preds_df_stacked, on=[:metabolite_label, :lambda])\n        leftjoin(biobank.obs[:, [:Strain_ID, :Species, :Donor]], on=:msk_id =&gt; :Strain_ID)\n        subset(\n            :metabolite_label =&gt; ByRow(==(compound)),\n            :resample =&gt; ByRow(==(1)),\n        )\n        disallowmissing\n    end;\n\n\nps = []\nfor lambda_index in [1, 17, 26, 51]\n    compound = \"Acetate\"\n    L = reverse(lambdas)[lambda_index]\n    pltdf =\n        @chain oof_preds_df_stacked begin\n            leftjoin(biobank.obs[:, [:Strain_ID, :Species, :Donor]], on=:msk_id =&gt; :Strain_ID)\n            subset(\n                :metabolite_label =&gt; ByRow(==(compound)),\n                :resample =&gt; ByRow(==(2)),\n                :lambda =&gt; ByRow(==(L))\n            )\n            disallowmissing\n        end\n\n    speciescolors_ordered = get.(Ref(species_color_dict), pltdf.Species, :grey)\n    pltlims = extrema(vcat(pltdf.preds, pltdf.truth))\n    rsq = rsquared(pltdf.preds, pltdf.truth)\n\n    p = plot(\n        title=\"lambda = $(round(log10(L), digits=2)), r² = $(round(rsq, digits=2))\",\n        ylabel=\"$compound (log2FC)\",\n        xlabel=\"out-of-fold prediction (log2FC)\",\n        legend=:outerright,\n        size=(800, 600),\n        lims=pltlims,\n        widen=true,\n        margin=5Plots.mm,\n    )\n    plot!(identity, -20, 20, linestyle=:dash, color=:grey, label=\"1:1 line\")\n    @df pltdf scatter!(:preds, :truth,\n        group=:Species,\n        color=speciescolors_ordered,\n        markerstrokewidth=0.1,\n        markersize=8,\n        # markeralpha=0.5,\n    )\n    push!(ps, p)\n    savefig(joinpath(pdir, \"scatter_$(compound)_lambda=$(L).pdf\"))\nend\n\n\nplot(ps..., layout=grid(2,2), size=(800,800), legend=false)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncompound = \"Acetate\"\nL = reverse(lambdas)[51]\npltdf =\n    @chain oof_preds_df_stacked begin\n        leftjoin(biobank.obs[:, [:Strain_ID, :Species, :Donor]], on=:msk_id =&gt; :Strain_ID)\n        subset(\n            :metabolite_label =&gt; ByRow(==(compound)),\n            :resample =&gt; ByRow(==(2)),\n            :lambda =&gt; ByRow(==(L))\n        )\n        disallowmissing\n    end;\n\nspeciescolors_ordered = get.(Ref(species_color_dict), pltdf.Species, :grey);\npltlims = extrema(vcat(pltdf.preds, pltdf.truth))\nrsq = rsquared(pltdf.preds, pltdf.truth)\nplot(\n    title=\"lambda = $L, r² = $(round(rsq, digits=2))\",\n    ylabel=\"$compound (log2FC)\",\n    xlabel=\"out-of-fold prediction (log2FC)\",\n    legend=:outerright,\n    size=(800, 600),\n    lims=pltlims,\n    widen=true,\n    margin=5Plots.mm,\n)\nplot!(identity, -20,20, linestyle=:dash, color=:grey, label=\"1:1 line\")\n@df pltdf scatter!(:preds, :truth,\n    group=:Species,\n    color=speciescolors_ordered,\n    markerstrokewidth=0.1,\n    markersize=8,\n    # markeralpha=0.5,\n)\n# savefig(joinpath(pdir, \"scatter_$(compound)_lambda=$(L).pdf\"))\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npreds_std_pltdf = map([1, 17, 26, 51,]) do lambda_index\n    compound = \"Acetate\"\n    L = reverse(lambdas)[lambda_index]\n    pltdf =\n        @chain oof_preds_df_stacked begin\n            leftjoin(biobank.obs[:, [:Strain_ID, :Species, :Donor]], on=:msk_id =&gt; :Strain_ID)\n            subset(\n                :metabolite_label =&gt; ByRow(==(compound)),\n                :resample =&gt; ByRow(==(2)),\n                :lambda =&gt; ByRow(==(L))\n            )\n            disallowmissing\n            groupby(:Species)\n            combine(\n                :preds =&gt; std,\n            )\n        end\n    \n    (; lambda=L,lambda_log10=log10(L), preds_std_mean=pltdf.preds_std |&gt; mean, preds_std_std=pltdf.preds_std |&gt; std)\nend |&gt; DataFrame\n\n4×4 DataFrame\n\n\n\nRow\nlambda\nlambda_log10\npreds_std_mean\npreds_std_std\n\n\n\nFloat64\nFloat64\nFloat64\nFloat64\n\n\n\n\n1\n1.0\n0.0\n0.0198439\n0.000378193\n\n\n2\n0.229087\n-0.64\n0.074131\n0.0863078\n\n\n3\n0.1\n-1.0\n0.122492\n0.123941\n\n\n4\n0.01\n-2.0\n0.450392\n0.202781\n\n\n\n\n\n\nZooming in we can look at A. hadrus, and its measured Acetate relative concentration and our prediction for those Acetate relative concentration\n\nPlot A.hadrus zoomin - Acetate\n\nsubsettree =\n    @chain begin\n        UPGMA_tree(Dij[full_train_mask, full_train_mask] ./ size(biobank[\"UPorder_oggs\"], 2))\n        SpectralInference.newickstring(biobank.obs.Strain_ID[full_train_mask])\n        readnw\n    end\n\n# tree data\ntreeorder = indexin(getleafnames(subsettree), trnYdf.Strain_ID);\nhadrusnames = trnYdf.Strain_ID[findall(contains.(trnYdf.Species, \"hadrus\"))]\nhadrus_treeidxs = indexin(hadrusnames, getleafnames(subsettree));\nhadrustree = readnw(NewickTree.nwstr(NewickTree.extract(subsettree, hadrusnames)))\nhadrusnames = getleafnames(hadrustree)\nhadrus_treeidxs = indexin(hadrusnames, getleafnames(subsettree));\n\n# tree plot\ntp = plot(hadrustree, fs=6,\n    ylabel=\"A. hadrus\",\n    rightmargin=15Plots.mm,\n    leftmargin=5Plots.mm,\n    framestyle=:grid,\n    ticks=false,\n)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLs = reverse(lambdas)[[1, 17, 26, 51]]\nLs_labs = round.(log10.(Ls), digits=2)\n\npltdf =\n    @chain oof_preds_df_stacked begin\n        leftjoin(biobank.obs[:, [:Strain_ID, :Species, :Donor]], on=:msk_id =&gt; :Strain_ID)\n        subset(\n            :metabolite_label =&gt; ByRow(==(compound)),\n            :Species =&gt; ByRow(==(\"Anaerostipes hadrus\")),\n            :resample =&gt; ByRow(==(2)),\n            :lambda =&gt; ByRow(∈(Ls)),\n        )\n        disallowmissing\n        unstack([:msk_id, :truth], :lambda, :preds)\n        select(:msk_id, :truth, \"1.0\", \"0.2290867652767773\", \"0.1\", \"0.01\")\n        _[indexin(hadrusnames, _.msk_id), :]\n        # Matrix\n    end\npltmtx = Matrix(pltdf[:, 2:end])\nhp = heatmap(pltmtx, \n    c=:bwr, clims=getlims(pltmtx),\n    xticks=(1:length(Ls)+1, [\"measured\", Ls_labs...]),\n    xrotation=45,\n    yticks=false,\n    framestyle=:grid,\n)\n\n# combined plot\nlayout = @layout [a{0.4w} b]\nplot(tp, hp, layout=layout, link=:y, size=(600, 600))\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\nps = map(2:5) do i\n    heatmap(pltmtx[:, [1,i]],\n        c=:bwr, clims=getlims(pltmtx),\n        xticks=(1:2, [\"measured\", Ls_labs[i-1]]),\n        colorbar=false,\n    )\nend\nplot(ps..., layout=grid(2,2))\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsavefig(joinpath(pdir, \"ahadrus_predictions_acetate_seperated_heatmaps.pdf\"))\n\n\"/Users/bend/projects/Doran_etal_2023/plots/metabolite_model_outofbag/ahadrus_predictions_acetate_seperated_heatmaps.pdf\"\n\n\n\n# Ls = reverse(lambdas)[[1, 17, 26, 51, 76, 101]]\nLs = reverse(lambdas)[[1, 17, 26, 51]]\nLs_labs = round.(log10.(Ls), digits=2)\n\npltdf =\n    @chain oof_preds_df_stacked begin\n        leftjoin(biobank.obs[:, [:Strain_ID, :Species, :Donor]], on=:msk_id =&gt; :Strain_ID)\n        subset(\n            :metabolite_label =&gt; ByRow(==(compound)),\n            :Species =&gt; ByRow(==(\"Anaerostipes hadrus\")),\n            :resample =&gt; ByRow(==(2)),\n            :lambda =&gt; ByRow(∈(Ls)),\n        )\n        disallowmissing\n        unstack([:msk_id, :truth], :lambda, :preds)\n        select(:msk_id, :truth, \"1.0\", \"0.2290867652767773\", \"0.1\", \"0.01\")\n        _[indexin(hadrusnames, _.msk_id), :]\n        # Matrix\n    end\npltmtx = Matrix(pltdf[:, 2:end])\nhp = heatmap(pltmtx, \n    c=:bwr, clims=getlims(pltmtx),\n    xticks=(1:length(Ls)+1, [\"measured\", Ls_labs...]),\n    xrotation=45,\n    yticks=false,\n    framestyle=:grid,\n)\n\n# combined plot\nlayout = @layout [a{0.4w} b]\nplot(tp, hp, layout=layout, link=:y, size=(600, 600))\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\nsavefig(joinpath(pdir, \"ahadrus_predictions_acetate.pdf\"))\n\n\"/Users/bend/projects/Doran_etal_2023/plots/metabolite_model_outofbag/ahadrus_predictions_acetate.pdf\"",
    "crumbs": [
      "Fig. 6 - SLE-Lasso models"
    ]
  },
  {
    "objectID": "07_figure_06.html#plot-performance-by-regularization",
    "href": "07_figure_06.html#plot-performance-by-regularization",
    "title": "Fig. 6 - SLE-Lasso models",
    "section": "Plot performance by regularization",
    "text": "Plot performance by regularization\n\nfirst(mdlstatsdf, 5)\n\n5×13 DataFrame\n\n\n\nRow\nmetabolite_label\nfold\nresample\nlambda\nrsq\nrsq_adj\ncor\ndegrees_freedom\norig_degrees_freedom\ndegrees_freedom_prop\nphylum_level\nspecies_level\nstrain_level\n\n\n\nString31\nInt64\nInt64\nFloat64\nFloat64\nFloat64\nFloat64\nInt64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\n\n\n\n\n1\nAcetate\n1\n1\n0.0001\n0.701449\n-5.593\n0.846187\n253\n266.0\n0.951128\n0.00790514\n0.13834\n0.853755\n\n\n2\nAcetate\n1\n1\n0.000109648\n0.701549\n-5.59078\n0.846249\n253\n266.0\n0.951128\n0.00790514\n0.13834\n0.853755\n\n\n3\nAcetate\n1\n1\n0.000120226\n0.701657\n-6.18734\n0.846315\n254\n266.0\n0.954887\n0.00787402\n0.137795\n0.854331\n\n\n4\nAcetate\n1\n1\n0.000131826\n0.701774\n-6.18453\n0.846385\n254\n266.0\n0.954887\n0.00787402\n0.137795\n0.854331\n\n\n5\nAcetate\n1\n1\n0.000144544\n0.701899\n-6.18152\n0.846459\n254\n266.0\n0.954887\n0.00787402\n0.137795\n0.854331\n\n\n\n\n\n\n\nlast(mdlstatsdf, 5)\n\n5×13 DataFrame\n\n\n\nRow\nmetabolite_label\nfold\nresample\nlambda\nrsq\nrsq_adj\ncor\ndegrees_freedom\norig_degrees_freedom\ndegrees_freedom_prop\nphylum_level\nspecies_level\nstrain_level\n\n\n\nString31\nInt64\nInt64\nFloat64\nFloat64\nFloat64\nFloat64\nInt64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\n\n\n\n\n1\nValine\n4\n5\n0.691831\n-0.021575\n-0.021575\n-2.85521e-17\n0\n266.0\n0.0\n0.0\n0.0\n0.0\n\n\n2\nValine\n4\n5\n0.758578\n-0.021575\n-0.021575\n-2.85521e-17\n0\n266.0\n0.0\n0.0\n0.0\n0.0\n\n\n3\nValine\n4\n5\n0.831764\n-0.021575\n-0.021575\n-2.85521e-17\n0\n266.0\n0.0\n0.0\n0.0\n0.0\n\n\n4\nValine\n4\n5\n0.912011\n-0.021575\n-0.021575\n-2.85521e-17\n0\n266.0\n0.0\n0.0\n0.0\n0.0\n\n\n5\nValine\n4\n5\n1.0\n-0.021575\n-0.021575\n-2.85521e-17\n0\n266.0\n0.0\n0.0\n0.0\n0.0\n\n\n\n\n\n\n\npltdf = mdlstatsdf_mean;\n\n\nmeandf = unstack(pltdf, :lambda, :metabolite_label, :rsq_adj_mean)\nstrainlvl_df = unstack(pltdf, :lambda, :metabolite_label, :strain_level_mean)\nstddf = unstack(pltdf, :lambda, :metabolite_label, :rsq_adj_std);\nplot(\n    title=\"SLE model\",\n    ylabel=\"adjusted R²\",\n    xlabel=\"λ\",\n    xscale=:log10,\n    xlims=(1e-3, 1),\n    ylims=(-0.25, 1),\n    margin=5Plots.mm,\n    size=(800, 400),\n    # widen=true,\n)\n\n# adj rsq traces\nforeach(names(meandf)[2:end]) do cname\n    plot!(meandf.lambda, meandf[!, cname],\n        c=:lightblue,\n        yticks=[-0.25, 0, 0.5, 1],\n        xticks=[1e-3, 1e-2, 1e-1, 1e-0],\n    )\nend\n\n@df bestlambdamodels scatter!(:lambda, :rsq_adj_mean, ms=5,\n    c=:orange,\n    # mz=:strain_level_mean, cmap=:hawaii,\n)\nmets_to_annotate = [\n    \"Acetate\", \"Butyrate\", \"Propionate\", \"Succinate\", \"Glycine\", \"Lysine\",\n    \"Phenylalanine\", \"Tyramine\", \"Tryptophan\",\n]\n# @df filter(:metabolite_label =&gt; ∈(mets_to_annotate), bestlambdamodels) begin\n@df bestlambdamodels begin\n    annotate!(:lambda, :rsq_adj_mean, text.(:metabolite_label .* \"  \", 5, :right))\nend\nannotate!(1, 1, text(\"32 metabolites\", 6, :right))\nplot!()\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsavefig(joinpath(pdir, \"SLE_lasso_adjrsq_lambda_strainlevel_simplified.pdf\"))\n\n\"/Users/bend/projects/Doran_etal_2023/plots/metabolite_model_outofbag/SLE_lasso_adjrsq_lambda_strainlevel_simplified.pdf\"\n\n\n\nplot(\n    size=(600, 150),\n    xlims=(-3, 0),\n    margin=5Plots.mm,\n    yticks=0:3:6\n)\nhistogram!(log10.(bestlambdamodels.lambda), bins=-3:0.1:0, c=:orange)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsavefig(joinpath(pdir, \"SLE_lasso_peak_adjrsq_lambda_histogram.pdf\"))\n\n\"/Users/bend/projects/Doran_etal_2023/plots/metabolite_model_outofbag/SLE_lasso_peak_adjrsq_lambda_histogram.pdf\"",
    "crumbs": [
      "Fig. 6 - SLE-Lasso models"
    ]
  },
  {
    "objectID": "07_figure_06.html#strain-level-branches-by-lambda",
    "href": "07_figure_06.html#strain-level-branches-by-lambda",
    "title": "Fig. 6 - SLE-Lasso models",
    "section": "strain level branches by lambda",
    "text": "strain level branches by lambda\n\npltdf = @chain mdlstatsdf begin\n    subset(:lambda =&gt; ByRow(&gt;(1e-3)))\n    groupby(:lambda)\n    combine(\n        :strain_level =&gt; mean,\n        :strain_level =&gt; std,\n        :species_level =&gt; mean,\n        :species_level =&gt; std,\n        :rsq_adj =&gt; mean,\n    )\nend\n\n75×6 DataFrame50 rows omitted\n\n\n\nRow\nlambda\nstrain_level_mean\nstrain_level_std\nspecies_level_mean\nspecies_level_std\nrsq_adj_mean\n\n\n\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\n\n\n\n\n1\n0.00109648\n0.871257\n0.0200739\n0.124428\n0.0191009\n-1.3691\n\n\n2\n0.00120226\n0.871614\n0.0201968\n0.12415\n0.0192005\n-1.31653\n\n\n3\n0.00131826\n0.871607\n0.0203881\n0.124124\n0.0192575\n-1.26223\n\n\n4\n0.00144544\n0.871831\n0.0199868\n0.123921\n0.0190958\n-1.2066\n\n\n5\n0.00158489\n0.872342\n0.020021\n0.123609\n0.01937\n-1.15839\n\n\n6\n0.0017378\n0.872332\n0.0197473\n0.123729\n0.0194016\n-1.1029\n\n\n7\n0.00190546\n0.87226\n0.0197135\n0.123856\n0.0195209\n-1.04971\n\n\n8\n0.0020893\n0.872532\n0.0195717\n0.123701\n0.0195293\n-0.999268\n\n\n9\n0.00229087\n0.872663\n0.0195391\n0.123581\n0.0196881\n-0.9461\n\n\n10\n0.00251189\n0.873215\n0.0200185\n0.123029\n0.0203484\n-0.891564\n\n\n11\n0.00275423\n0.873548\n0.0213664\n0.122647\n0.0216841\n-0.839968\n\n\n12\n0.00301995\n0.873609\n0.0217357\n0.122589\n0.0219744\n-0.78452\n\n\n13\n0.00331131\n0.8732\n0.0221041\n0.122956\n0.0224467\n-0.72992\n\n\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n\n\n64\n0.363078\n0.236376\n0.317135\n0.238696\n0.313711\n0.212032\n\n\n65\n0.398107\n0.199054\n0.294403\n0.248549\n0.326514\n0.203829\n\n\n66\n0.436516\n0.168395\n0.280825\n0.25913\n0.339121\n0.195533\n\n\n67\n0.47863\n0.146054\n0.267577\n0.265849\n0.349479\n0.186798\n\n\n68\n0.524807\n0.12389\n0.254061\n0.274229\n0.359781\n0.176741\n\n\n69\n0.57544\n0.0988073\n0.226709\n0.276658\n0.370469\n0.165939\n\n\n70\n0.630957\n0.0684917\n0.179011\n0.280082\n0.378822\n0.154982\n\n\n71\n0.691831\n0.0585419\n0.160946\n0.2793\n0.384192\n0.14471\n\n\n72\n0.758578\n0.0486012\n0.146953\n0.272653\n0.398665\n0.133771\n\n\n73\n0.831764\n0.0343973\n0.122032\n0.237085\n0.390501\n0.122831\n\n\n74\n0.912011\n0.0272135\n0.106901\n0.19901\n0.372846\n0.112608\n\n\n75\n1.0\n0.0233073\n0.0997593\n0.1925\n0.374488\n0.101416\n\n\n\n\n\n\n\nplot(\n    # title=\"SLE model\",\n    ylabel=\"fraction of\\nstrain-level\\nbranches\",\n    xlabel=\"λ\",\n    xscale=:log10,\n    xlims=(1e-3, 1),\n    ylims=(0, 1),\n    yticks=[0,0.5,1],\n    margin=5Plots.mm,\n    leftmargin=10Plots.mm,\n    size=(700, 200),\n    # widen=true,\n)\n@df pltdf plot!(:lambda, :strain_level_mean,\n    ribbon=:strain_level_std,\n    # alpha=0.5,\n    fillalpha=0.3,\n    c=:grey,\n    # label=\"strain-level\",\n\n)\n# @df pltdf plot!(:lambda, :species_level_mean,\n#     ribbon=:species_level_std,\n#     # label=\"species-level\",\n# )\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsavefig(joinpath(pdir, \"SLE_lasso_fractionstrainlevel_lambda_plot.pdf\"))\n\n\"/Users/bend/projects/Doran_etal_2023/plots/metabolite_model_outofbag/SLE_lasso_fractionstrainlevel_lambda_plot.pdf\"",
    "crumbs": [
      "Fig. 6 - SLE-Lasso models"
    ]
  },
  {
    "objectID": "07_figure_06.html#strain-level-branches-for-peak-models",
    "href": "07_figure_06.html#strain-level-branches-for-peak-models",
    "title": "Fig. 6 - SLE-Lasso models",
    "section": "Strain level branches for peak models",
    "text": "Strain level branches for peak models\n\nstbl = CSV.read(joinpath(rdir, \"supptable_for_adjrsq_by_lambda_plt.csv\"), DataFrame);\npltdf = @chain stbl begin\n    groupby(:metabolite_label)\n    subset(:rsq_adj_mean =&gt; x -&gt; x .== (maximum(x)))\nend\n\n32×8 DataFrame7 rows omitted\n\n\n\nRow\nmetabolite_label\nlambda\nrsq_mean\nrsq_std\nrsq_adj_mean\nrsq_adj_std\ndegrees_freedom_mean\nstrain_level_mean\n\n\n\nString31\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\n\n\n\n\n1\nAcetate\n0.0758578\n0.713737\n0.0471556\n0.678213\n0.0524868\n29.3\n0.655233\n\n\n2\nButyrate\n0.131826\n0.852513\n0.0365737\n0.843584\n0.0384522\n15.2\n0.52595\n\n\n3\nPropionate\n0.144544\n0.537103\n0.0529746\n0.501361\n0.0564935\n19.0\n0.759005\n\n\n4\nSuccinate\n0.1\n0.61316\n0.0363944\n0.567427\n0.0415038\n27.95\n0.691888\n\n\n5\n2-Methylbutyrate\n0.229087\n0.594906\n0.0598302\n0.569073\n0.0620661\n16.0\n0.745227\n\n\n6\n3-Aminoisobutyrate\n0.144544\n0.177975\n0.120498\n0.133944\n0.12507\n13.5\n0.841862\n\n\n7\n5-Aminovalerate\n0.275423\n0.543044\n0.0374495\n0.506948\n0.039984\n19.4\n0.681582\n\n\n8\nAlanine\n0.057544\n0.0639759\n0.0437672\n0.0281666\n0.0461699\n9.75\n0.61562\n\n\n9\nAspartate\n0.144544\n0.44623\n0.0827505\n0.394543\n0.0913016\n22.55\n0.72922\n\n\n10\nBenzoate\n0.275423\n0.0891614\n0.101351\n0.0758291\n0.103552\n3.8\n0.499881\n\n\n11\nCysteine\n0.0691831\n0.281043\n0.101866\n0.17623\n0.118007\n33.65\n0.787437\n\n\n12\nGlutamate\n0.0691831\n0.182157\n0.0474709\n0.114249\n0.0518121\n20.3\n0.78084\n\n\n13\nGlycine\n0.20893\n0.711895\n0.168478\n0.710018\n0.169533\n1.8\n0.391667\n\n\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n\n\n21\nPalmitate\n0.0630957\n0.054432\n0.0228067\n0.0274684\n0.0222852\n7.35\n0.629675\n\n\n22\nPhenylacetate\n0.190546\n0.753281\n0.0417033\n0.730152\n0.0445242\n22.85\n0.78039\n\n\n23\nPhenylalanine\n0.0398107\n0.161741\n0.0921165\n0.078399\n0.101669\n23.95\n0.819789\n\n\n24\nProline\n0.0630957\n0.283207\n0.0652789\n0.227891\n0.0692945\n19.0\n0.606439\n\n\n25\nSerine\n0.229087\n0.252343\n0.197141\n0.230219\n0.207998\n7.35\n0.839978\n\n\n26\nThreonine\n0.0630957\n0.123956\n0.401533\n0.0632694\n0.433177\n17.05\n0.781606\n\n\n27\nTryptamine\n0.20893\n0.743699\n0.0507361\n0.726334\n0.0523907\n17.05\n0.830649\n\n\n28\nTryptophan\n0.057544\n0.307183\n0.0732773\n0.24848\n0.0796236\n20.7\n0.760984\n\n\n29\nTyramine\n0.0331131\n0.263256\n0.0523266\n0.20591\n0.0524228\n19.2\n0.65386\n\n\n30\nTyrosine\n0.190546\n0.0381358\n0.0622661\n0.0291187\n0.0634383\n2.45\n0.669167\n\n\n31\nValerate\n0.190546\n0.379166\n0.051993\n0.336592\n0.0556162\n17.0\n0.624623\n\n\n32\nValine\n0.0363078\n0.163081\n0.0587783\n0.0880475\n0.0633141\n21.8\n0.65635\n\n\n\n\n\n\n\n@df pltdf histogram(:strain_level_mean,\n    bins=10,\n    fillcolor=:lightgrey,\n    size=(700, 200),\n    xlims=(0,1),\n    widen=true,\n    xlabel=\"fraction of strain level branches\",\n    ylabel=\"count\",\n    margin=5Plots.mm,\n)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsavefig(joinpath(pdir, \"SLE_lasso_adjrsq_strainlevel_histogram.pdf\"))\n\n\"/Users/bend/projects/Doran_etal_2023/plots/metabolite_model_outofbag/SLE_lasso_adjrsq_strainlevel_histogram.pdf\"",
    "crumbs": [
      "Fig. 6 - SLE-Lasso models"
    ]
  },
  {
    "objectID": "07_figure_06.html#train-test-performance-panel",
    "href": "07_figure_06.html#train-test-performance-panel",
    "title": "Fig. 6 - SLE-Lasso models",
    "section": "Train & test performance panel",
    "text": "Train & test performance panel\n\noof_meandf = unstack(pltdf, :lambda, :metabolite_label, :rsq_adj_mean)\ninfold_meandf = unstack(infold_pltdf, :lambda, :metabolite_label, :rsq_adj_mean)\nbestlambdamodels = @chain pltdf begin\n    groupby(:metabolite_label)\n    subset(:rsq_adj_mean =&gt; (x -&gt; x .== maximum(x)))\n    sort(:rsq_adj_mean, rev=true)\nend\n\n\nps = []\nforeach(bestlambdamodels.metabolite_label) do cname\n    p = plot(\n        title=cname,\n        xlims=(1e-3, 1),\n        ylims=(-0.25, 1),\n        yticks=[-0.25, 0, 0.5, 1],\n        xticks=[1e-3, 1e-2, 1e-1, 1e-0],\n        xscale=:log10,\n        tickfontsize=5,\n        titlefontsize=8,\n        margin=2Plots.mm,\n    )\n    plot!(infold_meandf.lambda, infold_meandf[!, cname],\n        c=:grey, ls=:dash,\n    )\n    plot!(oof_meandf.lambda, oof_meandf[!, cname],\n        c=:grey,\n    )\n    met_mask = bestlambdamodels.metabolite_label .== cname\n    scatter!(bestlambdamodels.lambda[met_mask], bestlambdamodels.rsq_adj_mean[met_mask], \n        mc=:orange,\n        msw=0.25,\n    )\n    push!(ps, p)\nend\nplot(ps..., layout=grid(4, 8), size=(1500, 750))\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdjusted r2 (y-axis) versus penalty value of SLE-LASSO model (x-axis) for predicting metabolite concentrations across all strains. Adjusted r2 value plotted for both training and test set with peak predictive capacity of the test set delineated as a yellow dot in each plot (see key).\n\nsavefig(joinpath(pdir, \"train-vs-test_mean-adjusted-r2_linecharts.pdf\"))\n\n\"/Users/bend/projects/Doran_etal_2023/plots/metabolite_model_outofbag/train-vs-test_mean-adjusted-r2_linecharts.pdf\"\n\n\n\ninfold_adjr2 = select(infold_pltdf,\n    :metabolite_label =&gt; :Metabolite,\n    :lambda =&gt; :Penalty_value,\n    :rsq_adj_mean =&gt; :training_adj_rsq_mean,\n    :rsq_adj_std =&gt; :training_adj_rsq_std,\n)\n\n@chain pltdf begin\n    select(\n        :metabolite_label =&gt; :Metabolite,\n        :lambda =&gt; :Penalty_value,\n        :rsq_adj_mean =&gt; :outofsample_adj_rsq_mean,\n        :rsq_adj_std =&gt; :outofsample_adj_rsq_std,\n    )\n    leftjoin(infold_adjr2, on=[:Metabolite, :Penalty_value])\n    groupby(:Metabolite)\n    transform!(\n        :outofsample_adj_rsq_mean =&gt; ((x)-&gt; ifelse.(x.==maximum(x), \"peak value\", \"\")) =&gt; :Peak_outofsample_adj_rsq\n    )\n    CSV.write(\n        projectdir(\"_research\", \"SuppTables\", \"Supplementary_Table_6.tsv\"),\n        _,\n        delim=\"\\t\",\n    )\nend\n\n\"/Users/bend/projects/Doran_etal_2023/_research/SuppTables/Supplementary_Table_6.tsv\"",
    "crumbs": [
      "Fig. 6 - SLE-Lasso models"
    ]
  },
  {
    "objectID": "07_figure_06.html#coefficients-of-sle-lasso-models",
    "href": "07_figure_06.html#coefficients-of-sle-lasso-models",
    "title": "Fig. 6 - SLE-Lasso models",
    "section": "Coefficients of SLE-Lasso models",
    "text": "Coefficients of SLE-Lasso models\n\ncoefdf_stacked =\n    @chain CSV.read(joinpath(rdir, \"coefs_SLE_lambda=many.csv\"), DataFrame) begin\n        stack(6:106)\n        transform!(:variable =&gt; ByRow(s -&gt; parse(Float64, last(split(s, \"_\")))) =&gt; :lambda)\n        select(Not([:variable, :value]), :value =&gt; :coef)\n    end\n\n17194240×7 DataFrame17194215 rows omitted\n\n\n\nRow\nmetabolite_name\nmetabolite_label\nfold\nresample\nnum_species_descendents\nlambda\ncoef\n\n\n\nString31\nString31\nInt64\nInt64\nFloat64\nFloat64\nFloat64\n\n\n\n\n1\nAcetate\nAcetate\n1\n1\nNaN\n0.0001\n0.0\n\n\n2\nAcetate\nAcetate\n1\n1\n11.0\n0.0001\n-0.451036\n\n\n3\nAcetate\nAcetate\n1\n1\n3.0\n0.0001\n-0.32701\n\n\n4\nAcetate\nAcetate\n1\n1\n2.0\n0.0001\n-0.107274\n\n\n5\nAcetate\nAcetate\n1\n1\n1.0\n0.0001\n-0.169603\n\n\n6\nAcetate\nAcetate\n1\n1\n1.0\n0.0001\n0.863021\n\n\n7\nAcetate\nAcetate\n1\n1\n1.0\n0.0001\n0.122345\n\n\n8\nAcetate\nAcetate\n1\n1\n1.0\n0.0001\n0.027476\n\n\n9\nAcetate\nAcetate\n1\n1\n1.0\n0.0001\n0.574951\n\n\n10\nAcetate\nAcetate\n1\n1\n1.0\n0.0001\n-0.134015\n\n\n11\nAcetate\nAcetate\n1\n1\n1.0\n0.0001\n0.400922\n\n\n12\nAcetate\nAcetate\n1\n1\n1.0\n0.0001\n-0.823842\n\n\n13\nAcetate\nAcetate\n1\n1\n1.0\n0.0001\n0.947637\n\n\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n\n\n17194229\nValine\nValine\n4\n5\n1.0\n1.0\n0.0\n\n\n17194230\nValine\nValine\n4\n5\n1.0\n1.0\n0.0\n\n\n17194231\nValine\nValine\n4\n5\n1.0\n1.0\n0.0\n\n\n17194232\nValine\nValine\n4\n5\n1.0\n1.0\n0.0\n\n\n17194233\nValine\nValine\n4\n5\n1.0\n1.0\n0.0\n\n\n17194234\nValine\nValine\n4\n5\n1.0\n1.0\n0.0\n\n\n17194235\nValine\nValine\n4\n5\n1.0\n1.0\n0.0\n\n\n17194236\nValine\nValine\n4\n5\n1.0\n1.0\n0.0\n\n\n17194237\nValine\nValine\n4\n5\n1.0\n1.0\n0.0\n\n\n17194238\nValine\nValine\n4\n5\n1.0\n1.0\n0.0\n\n\n17194239\nValine\nValine\n4\n5\n1.0\n1.0\n0.0\n\n\n17194240\nValine\nValine\n4\n5\n1.0\n1.0\n0.0\n\n\n\n\n\n\n\ncoef_pltdf = @chain coefdf_stacked begin\n    @rsubset(:coef != 0.0, :lambda &gt;= 0.001)\n    @rtransform(:is_subspecies = :num_species_descendents &lt;= 1.0)\n    @groupby(:metabolite_label, :fold, :resample, :lambda, :is_subspecies)\n    @combine(\n        :mean_coef_magnitude = mean(abs, :coef),\n    )\n    unstack(:is_subspecies, :mean_coef_magnitude)\n    rename(\n        \"false\" =&gt; :speciesbranches_mean_coef_magnitude,\n        \"true\" =&gt; :subspeciesbranches_mean_coef_magnitude,\n    )\n    @groupby(:metabolite_label, :lambda)\n    @combine(\n        :mean_coef_magnitude_subspecies = (mean ∘ skipmissing)(:subspeciesbranches_mean_coef_magnitude),\n        :mean_coef_magnitude_species = (mean ∘ skipmissing)(:speciesbranches_mean_coef_magnitude),\n    )\n    sort([:metabolite_label, :lambda])\n    # coalesce.(NaN)\nend;\n\n\nordered_metabolite_labels = sort(bestlambdamodels, :rsq_adj_mean, rev=true).metabolite_label;\n\n\nps = []\nfor mlabel in ordered_metabolite_labels\n    p = plot(\n        title=mlabel,\n        xscale=:log10,\n        xticks=[0.001, 0.01, 0.1, 1],\n        xlims=(0.001, 1),\n        ylims=(0, Inf),\n        widen=true,\n    )\n    @df @rsubset(coef_pltdf, :metabolite_label == mlabel) plot!(\n        :lambda, :mean_coef_magnitude_species;\n        linestyle=:solid,\n        color=:grey\n    )\n    @df @rsubset(coef_pltdf, :metabolite_label == mlabel) plot!(\n        :lambda, :mean_coef_magnitude_subspecies;\n        linestyle=:dash,\n        color=:black,\n    )\n    vline!([bestlambdamodels.lambda[bestlambdamodels.metabolite_label.==mlabel]],\n        color=:lightgrey, linewidth=0.5,\n    )\n    push!(ps, p)\nend\nplot(ps..., layout=grid(4, 8), size=(1200, 600), titlefontsize=6, tickfontsize=6)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMean magnitude of coefficients in SLE-model (y-axis) versus penalty value (x-axis) for each metabolite (panel). Dashed curves correspond to coefficients of SLE branches defining differences amongst strains belonging to the same species (‘inter-species variation’); solid curves corresponds to coefficients of SLE branches defining differences amongst strains belonging to different species (‘intra-species variation’). Solid vertical gray line in each plot delineates the penalty value for which the peak predictive SLE-LASSO model is observed as shown in Figure 7D.\n\nsavefig(joinpath(pdir, \"averaged_coeff_magnitude_dash=subspecies.pdf\"))\n\n\"/Users/bend/projects/Doran_etal_2023/plots/metabolite_model_outofbag/averaged_coeff_magnitude_dash=subspecies.pdf\"",
    "crumbs": [
      "Fig. 6 - SLE-Lasso models"
    ]
  },
  {
    "objectID": "07_figure_06.html#a.-hadrus-subtree",
    "href": "07_figure_06.html#a.-hadrus-subtree",
    "title": "Fig. 6 - SLE-Lasso models",
    "section": "A. hadrus subtree",
    "text": "A. hadrus subtree\n\nsubtreeleafids = trnYdf.Strain_ID[fold_trn][occursin.(\"hadrus\", trnYdf.Species[fold_trn])];\nsubtree = readnw(nwstr(NewickTree.extract(foldtree, subtreeleafids)))\ntrainingset_treeorder = indexin(getleafnames(subtree), trnYdf.Strain_ID[fold_trn]);\nsubtree_coeffs = map(prewalk(subtree)) do node\n    NewickTree.support(node)\nend |&gt; x-&gt;replace(x, NaN=&gt;0.0);\n\n\n# plot(size=(400, 600))\ntp = plot(subtree, \n    fs=5,\n    line_z=permutedims(subtree_coeffs[2:end]),\n    # clims=getlims(subtree_coeffs[2:end]),\n    clims=clims./2,\n    colormap=:bam,\n    linewidth=5 .+ permutedims(abs.(subtree_coeffs[2:end])),\n)\n# vline!([0.5, 2.04], color=:grey, alpha=0.5, linestyle=:dash)\n\npltmtx = hcat(\n    metab_trnY[fold_trn, target_idx][trainingset_treeorder], \n    GLMNet.predict(mdl, trnX)[trainingset_treeorder]\n)\nhplt = heatmap(pltmtx,\n    colormap=:bwr,\n    clims=getlims(pltmtx),\n    xticks = (1:2, [\"measurements\", \"training predictions\"]),\n    yticks=false,\n    xrotation=45,\n    bottommargin=5Plots.mm,\n    colorbar=:none,\n)\n\npltmtx = hcat(\n    trnYdf.Species[fold_trn][trainingset_treeorder]\n)\ncolormap = getindex.(Ref(species_color_dict), unique(pltmtx))\nspplt = heatmap(pltmtx,\n    colormap=colormap,\n    # clims=getlims(pltmtx),\n    xticks = (1:1, [\"species\"]),\n    yticks=false,\n    xrotation=45,\n    bottommargin=5Plots.mm,\n    colorbar=:none,\n)\n\nlayout = @layout [a{0.85w} b c{0.05w}]\nplot(tp, hplt, spplt, layout=layout, link=:y, size=(500, 400), yflip=true)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\nsavefig(joinpath(pdir, \"hadrus_foldtree_coeffs_predictions_species.pdf\"))\n\n\"/Users/bend/projects/Doran_etal_2023/plots/metabolite_model_outofbag/hadrus_foldtree_coeffs_predictions_species.pdf\"",
    "crumbs": [
      "Fig. 6 - SLE-Lasso models"
    ]
  },
  {
    "objectID": "07_figure_06.html#p.-vulgatus-subtree",
    "href": "07_figure_06.html#p.-vulgatus-subtree",
    "title": "Fig. 6 - SLE-Lasso models",
    "section": "P. vulgatus subtree",
    "text": "P. vulgatus subtree\n\nsubtreeleafids = trnYdf.Strain_ID[fold_trn][occursin.(\"vulgatus\", trnYdf.Species[fold_trn])];\nsubtree = readnw(nwstr(NewickTree.extract(foldtree, subtreeleafids)))\ntrainingset_treeorder = indexin(getleafnames(subtree), trnYdf.Strain_ID[fold_trn]);\nsubtree_coeffs = map(prewalk(subtree)) do node\n    NewickTree.support(node)\nend |&gt; x-&gt;replace(x, NaN=&gt;0.0);\n\n\n@chain biobank.obs[occursin.(\"rectale\", biobank.obs.Species), [:Strain_ID, :Accession]] begin\n    sort(:Strain_ID)\nend\n\n20×2 DataFrame\n\n\n\nRow\nStrain_ID\nAccession\n\n\n\nString\nString\n\n\n\n\n1\nMSK.13.48\nJAAISJ000000000\n\n\n2\nMSK.13.50\nJAAISI000000000\n\n\n3\nMSK.13.59\nJAAISH000000000\n\n\n4\nMSK.16.22\nJAAIMQ000000000\n\n\n5\nMSK.16.45\nJAAIMP000000000\n\n\n6\nMSK.17.13\nJAAIMK000000000\n\n\n7\nMSK.17.19\nJAAIMJ000000000\n\n\n8\nMSK.17.3\nJAAIMG000000000\n\n\n9\nMSK.17.42\nJAAIME000000000\n\n\n10\nMSK.17.57\nJAAIMC000000000\n\n\n11\nMSK.17.70\nJAAILY000000000\n\n\n12\nMSK.17.78\nJAAILX000000000\n\n\n13\nMSK.17.79\nJAAILW000000000\n\n\n14\nMSK.22.19\nJAAISF000000000\n\n\n15\nMSK.22.23\nJAAISE000000000\n\n\n16\nMSK.22.28\nJAAISD000000000\n\n\n17\nMSK.22.51\nJAAISB000000000\n\n\n18\nMSK.22.92\nJAJFBX000000000\n\n\n19\nMSK.9.13\nJAAISA000000000\n\n\n20\nMSK.9.15\nJAAIRZ000000000\n\n\n\n\n\n\n\n# plot(size=(400, 600))\ntp = plot(subtree, \n    fs=5,\n    line_z=permutedims(subtree_coeffs[2:end]),\n    # clims=getlims(subtree_coeffs[2:end]),\n    clims=clims./2,\n    colormap=:bam,\n    linewidth=5 .+ permutedims(abs.(subtree_coeffs[2:end])),\n)\n# vline!([0.5, 2.04], color=:grey, alpha=0.5, linestyle=:dash)\n\npltmtx = hcat(\n    metab_trnY[fold_trn, target_idx][trainingset_treeorder], \n    GLMNet.predict(mdl, trnX)[trainingset_treeorder]\n)\nhplt = heatmap(pltmtx,\n    colormap=:bwr,\n    clims=getlims(pltmtx),\n    xticks = (1:2, [\"measurements\", \"training predictions\"]),\n    yticks=false,\n    xrotation=45,\n    bottommargin=5Plots.mm,\n    colorbar=:none,\n)\n\npltmtx = hcat(\n    trnYdf.Species[fold_trn][trainingset_treeorder]\n)\ncolormap = getindex.(Ref(species_color_dict), unique(pltmtx))\nspplt = heatmap(pltmtx,\n    colormap=colormap,\n    # clims=getlims(pltmtx),\n    xticks = (1:1, [\"species\"]),\n    yticks=false,\n    xrotation=45,\n    bottommargin=5Plots.mm,\n    colorbar=:none,\n)\n\nlayout = @layout [a{0.85w} b c{0.05w}]\nplot(tp, hplt, spplt, layout=layout, link=:y, size=(500, 500), yflip=true)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\nsavefig(joinpath(pdir, \"vulgatus_foldtree_coeffs_predictions_species.pdf\"))\n\n\"/Users/bend/projects/Doran_etal_2023/plots/metabolite_model_outofbag/vulgatus_foldtree_coeffs_predictions_species.pdf\"",
    "crumbs": [
      "Fig. 6 - SLE-Lasso models"
    ]
  },
  {
    "objectID": "07_figure_06.html#b.-breve-e.-rectale-subtree",
    "href": "07_figure_06.html#b.-breve-e.-rectale-subtree",
    "title": "Fig. 6 - SLE-Lasso models",
    "section": "B. breve & E. rectale subtree",
    "text": "B. breve & E. rectale subtree\n\nsubtreeleafids = trnYdf.Strain_ID[fold_trn][\n    occursin.(\"rectale\", trnYdf.Species[fold_trn]) .|| occursin.(\"breve\", trnYdf.Species[fold_trn])\n];\nsubtree = readnw(nwstr(NewickTree.extract(foldtree, subtreeleafids)))\ntrainingset_treeorder = indexin(getleafnames(subtree), trnYdf.Strain_ID[fold_trn]);\nsubtree_coeffs = map(prewalk(subtree)) do node\n    NewickTree.support(node)\nend |&gt; x-&gt;replace(x, NaN=&gt;0.0);\n\n\n# plot(size=(400, 600))\ntp = plot(subtree, \n    fs=5,\n    line_z=permutedims(subtree_coeffs[2:end]),\n    # clims=getlims(subtree_coeffs[2:end]),\n    clims=clims./2,\n    colormap=:bam,\n    linewidth=5 .+ permutedims(abs.(subtree_coeffs[2:end])),\n)\n# vline!([0.5, 2.04], color=:grey, alpha=0.5, linestyle=:dash)\n\npltmtx = hcat(\n    metab_trnY[fold_trn, target_idx][trainingset_treeorder], \n    GLMNet.predict(mdl, trnX)[trainingset_treeorder]\n)\nhplt = heatmap(pltmtx,\n    colormap=:bwr,\n    clims=getlims(pltmtx),\n    xticks = (1:2, [\"measurements\", \"training predictions\"]),\n    yticks=false,\n    xrotation=45,\n    bottommargin=5Plots.mm,\n    colorbar=:none,\n)\n\npltmtx = hcat(\n    trnYdf.Species[fold_trn][trainingset_treeorder]\n)\ncolormap = getindex.(Ref(species_color_dict), unique(pltmtx))\nspplt = heatmap(pltmtx,\n    colormap=colormap,\n    # clims=getlims(pltmtx),\n    xticks = (1:1, [\"species\"]),\n    yticks=false,\n    xrotation=45,\n    bottommargin=5Plots.mm,\n    colorbar=:none,\n)\n\nlayout = @layout [a{0.85w} b c{0.05w}]\nplot(tp, hplt, spplt, layout=layout, link=:y, size=(500, 500), yflip=true)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\nsavefig(joinpath(pdir, \"rectale-breve_foldtree_coeffs_predictions_species.pdf\"))\n\n\"/Users/bend/projects/Doran_etal_2023/plots/metabolite_model_outofbag/rectale-breve_foldtree_coeffs_predictions_species.pdf\"",
    "crumbs": [
      "Fig. 6 - SLE-Lasso models"
    ]
  },
  {
    "objectID": "10_figure_s22.html",
    "href": "10_figure_s22.html",
    "title": "Fig. S21 - Cog categories in Spectral Tree",
    "section": "",
    "text": "Julia Setup\nusing DrWatson\n@quickactivate projectdir()\n\nusing CSV, Muon, DataFrames\nusing Chain\nusing StatsBase\nusing SpectralInference, NewickTree\nusing StatsPlots\ntheme(:default, grid=false, label=false, tickdir=:out)\n\npdir = plotsdir(\"reviewer_plots\") |&gt; mkpath\nrdir = projectdir(\"_research\", \"strain_variation_wilcoxon_tests\") |&gt; mkpath\nuniprot = readh5ad(datadir(\"exp_raw\", \"UP7047\", \"2020_02_UP7047.h5ad\"))\nbiobank = readh5mu(datadir(\"exp_raw\", \"BB669\", \"BB669.h5mu\"))\n\n┌ Warning: Cannot join columns with the same name because var_names are intersecting.\n└ @ Muon /Users/bend/.julia/packages/Muon/UKjAF/src/mudata.jl:367\n\n\nMuData object 669 ✕ 21475\n└ metabolites_foldchange\n  AnnData object 669 ✕ 50\n└ oggs\n  AnnData object 669 ✕ 11248\n└ UPorder_oggs\n  AnnData object 669 ✕ 10177\nupmtx = uniprot.X[:, :]\nupusv = svd(upmtx)\nbbmtx = biobank[\"UPorder_oggs\"].X[:,:]\n@show size(bbmtx)\nkeptspecies = sort(filter(x-&gt; last(x) &gt;= 20, countmap(biobank.obs.Species)), byvalue=true, rev=true)\nfilter!(!=(\"unclassified\"), keptspecies)\n# species =&gt; number of strains belonging to that species\n\nsize(bbmtx) = (669, 10177)\n\n\nOrderedCollections.OrderedDict{String, Int64} with 12 entries:\n  \"Phocaeicola vulgatus\"         =&gt; 88\n  \"[Ruminococcus] gnavus\"        =&gt; 41\n  \"Bacteroides thetaiotaomicron\" =&gt; 35\n  \"Anaerostipes hadrus\"          =&gt; 31\n  \"Bacteroides uniformis\"        =&gt; 27\n  \"unclassified\"                 =&gt; 26\n  \"Blautia luti\"                 =&gt; 24\n  \"Bifidobacterium breve\"        =&gt; 24\n  \"Coprococcus comes\"            =&gt; 23\n  \"Dorea formicigenerans\"        =&gt; 22\n  \"Blautia wexlerae\"             =&gt; 21\n  \"[Eubacterium] rectale\"        =&gt; 20",
    "crumbs": [
      "Fig. S21 - Cog categories in Spectral Tree"
    ]
  },
  {
    "objectID": "10_figure_s22.html#tree-plot",
    "href": "10_figure_s22.html#tree-plot",
    "title": "Fig. S21 - Cog categories in Spectral Tree",
    "section": "Tree plot",
    "text": "Tree plot\n\nstrvarmtx = bbmtx[biobank.obs.kept_species.==1,:];\n@show size(strvarmtx)\n\nstrvarobs = biobank.obs[biobank.obs.kept_species.==1, :]\nstrvar_obsnames = strvarobs.Strain_ID\n\n# infer hierarchical relationships of just the species with\n# greater than 20 strain replicates\nuhat = projectinLSV(strvarmtx, upusv)\ndij = spectraldistances(uhat, upusv.S; alpha=1.5, q=.75) ./ size(uniprot, 2)\nstrvartree_hc = UPGMA_tree(dij)\nstrvartree = readnw(SpectralInference.newickstring(strvartree_hc, strvar_obsnames))\n# ladderize!(strvartree)\n\nsize(strvarmtx) = (356, 10177)\n\n\n(((((((DFI.1.247:0.003931399,DFI.1.135:0.003931399):0.0261128,DFI.1.173:0.0300442):1.102017,MSK.17.15:1.132061):0.4641554,((((((MSK.19.71:0.001116743,(MSK.19.54:0.0001738008,MSK.19.4:0.0001738008):0.0009429425):0.001027894,MSK.19.91:0.002144637):0.0006451383,MSK.19.84:0.002789775):0.9853182,(MSK.20.30:0.03613531,(MSK.20.3:0.009151378,MSK.20.79:0.009151378):0.02698393):0.9519726):0.01828051,(MSK.16.71:0.1179327,(MSK.16.7:0.06787214,(MSK.16.46:0.001618285,(MSK.16.44:0.0001595074,MSK.16.39:0.0001595074):0.001458778):0.06625386):0.05006053):0.8884558):0.1753671,((DFI.3.57:0.9677974,((MSK.18.66:0.001366842,(((MSK.18.33:2.82369e-17,MSK.18.78:2.82369e-17):0.000426245,((MSK.18.89:3.029125e-17,MSK.18.30:3.029125e-17):0.0,MSK.18.25:3.029125e-17):0.000426245):0.0002283746,MSK.18.77:0.0006546196):0.0007122219):0.0002409801,MSK.18.74:0.001607822):0.9661896):0.1983591,DFI.4.149:1.166157):0.01559899):0.414461):1.683172,((((DFI.3.23:0.1084715,((((DFI.1.133:0.002279274,DFI.1.35:0.002279274):0.0005995152,DFI.1.127:0.002878789):0.001521423,DFI.1.126:0.004400213):0.007541952,DFI.1.146:0.01194217):0.09652931):1.471801,(((DFI.5.25:0.9557872,MSK.9.7:0.9557872):0.2712638,((MSK.9.20:1.079934,(DFI.3.15:0.1813803,DFI.3.65:0.1813803):0.8985541):0.105503,((DFI.4.142:1.004294,MSK.10.8:1.004294):0.1452508,((((MSK.15.13:0.1005877,MSK.15.52:0.1005877):0.7592938,((MSK.22.66:0.03705821,((MSK.22.75:0.01576487,((MSK.22.90:0.008254969,(MSK.22.7:0.004311205,MSK.23.26:0.004311205):0.003943764):0.003581096,MSK.22.81:0.01183606):0.003928806):0.003889076,(((MSK.23.48:0.003585361,((((MSK.22.14:1.286854e-5,MSK.22.41:1.286854e-5):0.0004015048,(MSK.22.3:1.286854e-5,MSK.22.30:1.286854e-5):0.0004015048):0.0002768957,(MSK.23.53:1.93772e-17,(MSK.23.52:1.93772e-17,MSK.22.47:1.93772e-17):0.0):0.0006912691):0.00022138,(MSK.22.38:0.0004876222,MSK.22.36:0.0004876222):0.0004250269):0.002672712):0.0007826417,((MSK.23.51:0.001127075,(MSK.22.48:0.0004876222,MSK.22.21:0.0004876222):0.0006394528):0.0005693853,MSK.23.32:0.00169646):0.002671542):0.004446563,MSK.22.5:0.008814565):0.01083938):0.01740426):0.007253248,MSK.23.57:0.04431146):0.81557):0.04789299,MSK.6.33:0.9077745):0.1379388,((((MSK.16.86:0.001271842,(MSK.16.2:0.0004552147,MSK.16.26:0.0004552147):0.000816627):0.0008964462,((MSK.16.47:0.0003015461,((MSK.16.83:3.234215e-17,(MSK.16.75:3.234215e-17,(MSK.16.90:3.234215e-17,MSK.16.61:3.234215e-17):0.0):0.0):0.0001773087,MSK.16.55:0.0001773087):0.0001242374):0.0003329315,MSK.16.84:0.0006344776):0.00153381):0.004430316,MSK.16.10:0.006598604):0.9103236,((MSK.19.88:0.06874913,MSK.19.40:0.06874913):0.2166141,(((MSK.19.26:0.03619959,MSK.19.29:0.03619959):0.06432178,((MSK.19.35:0.00494406,MSK.19.85:0.00494406):0.08595237,MSK.19.93:0.09089643):0.009624929):0.09654039,(((MSK.19.95:0.004715797,MSK.19.45:0.004715797):0.06352701,(MSK.19.32:0.009199552,(MSK.19.16:0.002269505,((MSK.19.20:0.0004489371,MSK.19.21:0.0004489371):0.0009555423,MSK.19.19:0.001404479):0.0008650259):0.006930047):0.05904325):0.02281524,MSK.19.86:0.09105805):0.1060037):0.08830149):0.6315589):0.1287912):0.1038312):0.03589288):0.04161359):0.0788548,(MSK.17.64:0.03981748,((MSK.17.92:0.004235512,(((MSK.17.56:0.002300801,((MSK.17.71:0.0007187355,MSK.17.5:0.0007187355):0.0009545024,MSK.17.91:0.001673238):0.0006275626):0.0008096886,(MSK.17.87:0.001715472,MSK.17.65:0.001715472):0.001395017):0.0008522348,MSK.17.93:0.003962724):0.0002727882):0.01453939,(MSK.17.55:0.003196651,MSK.17.67:0.003196651):0.01557826):0.02104258):1.266088):0.2743667):0.05606193,(MSK.17.73:1.480551,((MSK.20.41:0.01663719,MSK.20.27:0.01663719):0.2046407,MSK.20.28:0.2212779):1.259273):0.1557837):0.09538753,(MSK.7.27:0.1047519,((MSK.8.31:0.01858135,((MSK.7.25:0.01364896,(MSK.8.9:0.009811226,MSK.7.15:0.009811226):0.003837738):0.002931416,(MSK.8.25:0.008360049,MSK.8.24:0.008360049):0.008220332):0.00200097):0.008267197,(MSK.8.30:0.01584241,MSK.8.17:0.01584241):0.01100614):0.07790337):1.62697):1.547666):0.3151586,((((DFI.4.108:0.08803098,(DFI.4.151:0.005295598,DFI.4.133:0.005295598):0.08273538):0.7546437,(((MSK.15.45:0.004183471,(MSK.14.51:0.00243926,MSK.15.48:0.00243926):0.001744211):0.5352159,MSK.18.2:0.5393994):0.111049,(MSK.5.5:0.006865608,MSK.5.9:0.006865608):0.6435827):0.1922264):0.1090774,((DFI.1.47:0.03187683,(DFI.1.229:0.02823812,(((DFI.1.170:0.00910144,DFI.1.169:0.00910144):0.01302156,(((DFI.1.239:0.004891845,DFI.1.238:0.004891845):0.002316509,DFI.1.228:0.007208354):0.004196748,((DFI.2.27:0.0074562,DFI.1.54:0.0074562):0.002341859,DFI.1.150:0.009798059):0.001607043):0.0107179):0.002934123,DFI.1.128:0.02505713):0.003180988):0.003638711):0.005067316,DFI.1.236:0.03694414):0.9148079):0.5634948,(((MSK.16.9:0.003721056,(MSK.16.57:0.002797762,MSK.16.43:0.002797762):0.0009232938):0.01352062,((MSK.16.60:0.004130997,(MSK.16.35:0.002686137,MSK.16.65:0.002686137):0.00144486):0.004142534,MSK.16.62:0.008273531):0.008968148):1.440133,(((MSK.23.85:0.0107431,(MSK.23.49:0.005975667,(MSK.23.45:0.002134073,MSK.23.25:0.002134073):0.003841595):0.004767436):0.02427398,MSK.23.42:0.03501708):1.053664,(DFI.2.13:0.002545152,DFI.2.69:0.002545152):1.086136):0.3686933):0.05787267):2.0793):0.6213968,((((((((MSK.22.91:0.006000617,MSK.23.10:0.006000617):0.01394575,MSK.23.18:0.01994636):0.06940606,(((MSK.23.71:0.007384685,((MSK.23.46:0.002136866,MSK.23.61:0.002136866):0.002871905,MSK.23.63:0.005008771):0.002375914):0.002962586,(MSK.23.55:0.006649823,MSK.23.93:0.006649823):0.003697449):0.04779344,MSK.23.56:0.05814071):0.03121171):0.8463041,MSK.22.96:0.9356565):0.5997846,(((MSK.5.17:1.355554,(MSK.15.77:1.187518,((MSK.7.28:0.008891872,MSK.7.31:0.008891872):1.12789,((((MSK.19.33:0.06707205,MSK.19.38:0.06707205):0.3834988,(MSK.17.82:0.005630039,MSK.17.63:0.005630039):0.4449408):0.4552386,(MSK.5.19:0.7976107,MSK.11.9:0.7976107):0.1081987):0.07597088,((MSK.15.59:0.004283845,(MSK.15.54:0.002501327,((MSK.15.56:0.000949914,((MSK.15.9:2.066643e-17,MSK.15.10:2.066643e-17):0.0005510349,MSK.15.18:0.0005510349):0.000398879):0.0009573024,MSK.15.58:0.001907216):0.0005941104):0.001782518):0.03148856,MSK.15.32:0.03577241):0.9460078):0.1550013):0.05073667):0.1680361):0.08524652,MSK.7.5:1.440801):0.03602388,((MSK.23.4:0.04376574,(MSK.23.20:0.04056606,MSK.23.17:0.04056606):0.003199687):0.03595454,((MSK.22.24:0.007479792,(MSK.23.41:0.003403041,MSK.23.81:0.003403041):0.004076751):0.01324146,((MSK.23.82:0.007051144,(MSK.23.92:0.002371883,MSK.23.91:0.002371883):0.004679261):0.006038249,MSK.23.60:0.01308939):0.007631856):0.05899903):1.397104):0.05861643):1.570597,(((((MSK.22.101:0.01095634,((MSK.22.107:0.002560393,(((((MSK.22.65:1.465381e-17,(MSK.22.109:1.465381e-17,MSK.22.108:1.465381e-17):0.0):0.0007052648,((MSK.22.111:0.0003952708,((MSK.22.104:1.494598e-17,MSK.22.102:1.494598e-17):0.0001087377,(MSK.22.99:1.222084e-17,MSK.22.105:1.222084e-17):0.0001087377):0.0002865331):0.00018868,MSK.22.20:0.0005839507):0.0001213141):0.0007678837,((((MSK.22.64:0.0001087377,MSK.22.57:0.0001087377):0.000357825,(MSK.22.68:0.0002259348,((MSK.22.45:1.085738e-17,MSK.22.100:1.085738e-17):0.0001087377,MSK.22.11:0.0001087377):0.0001171972):0.0002406279):0.0005098126,MSK.22.113:0.0009763753):0.0003361338,MSK.22.2:0.001312509):0.0001606394):0.0006822291,MSK.22.4:0.002155378):7.73444e-5,MSK.22.106:0.002232722):0.0003276709):0.001586078,MSK.22.34:0.004146471):0.006809865):0.001807876,(MSK.22.80:0.008527999,MSK.22.73:0.008527999):0.004236214):2.348372,((((MSK.9.15:0.1102293,MSK.9.13:0.1102293):0.8040537,(MSK.13.50:0.1088255,(MSK.13.48:0.02865297,MSK.13.59:0.02865297):0.08017258):0.8054574):0.04037098,(MSK.16.22:0.0002646188,MSK.16.45:0.0002646188):0.9543893):0.5339903,(((MSK.17.57:0.04572468,((MSK.17.19:0.002149147,(MSK.17.3:0.001419598,MSK.17.79:0.001419598):0.0007295488):0.002146011,(MSK.17.42:0.001674471,MSK.17.13:0.001674471):0.002620687):0.04142952):0.0140878,(MSK.17.78:0.0001980385,MSK.17.70:0.0001980385):0.05961444):0.9932575,((MSK.22.23:0.02486634,(MSK.22.28:0.00121411,(MSK.22.51:0.0003283846,MSK.22.19:0.0003283846):0.0008857251):0.02365223):0.02434618,MSK.22.92:0.04921252):1.003857):0.4355742):0.8724917):0.3367614,(((MSK.13.15:0.2545377,MSK.13.39:0.2545377):1.181066,((((DFI.1.64:0.1240709,(((DFI.1.210:0.007850086,DFI.1.180:0.007850086):0.001335135,(DFI.1.224:0.003935376,DFI.1.155:0.003935376):0.005249845):0.07300825,((((DFI.1.81:0.007899643,(DFI.1.90:0.0004271598,DFI.1.18:0.0004271598):0.007472483):0.005063089,(DFI.1.219:0.005759959,DFI.1.58:0.005759959):0.007202773):0.01000289,(DFI.1.215:0.01774203,(DFI.1.97:0.006590653,DFI.1.230:0.006590653):0.01115137):0.005223598):0.00744931,DFI.1.72:0.03041493):0.05177854):0.04187744):0.05356914,((DFI.1.220:0.002501934,DFI.1.75:0.002501934):0.01485597,DFI.1.38:0.01735791):0.1602822):0.6333854,MSK.17.61:0.8110254):0.5203661,MSK.23.29:1.331391):0.1042126):0.8429461,((MSK.22.63:1.924021,MSK.8.22:1.924021):0.1901947,((MSK.16.63:1.416139,(((((MSK.16.12:0.02356956,((MSK.16.14:0.002828994,MSK.16.50:0.002828994):0.001042326,MSK.16.11:0.003871319):0.01969824):0.01215441,MSK.16.59:0.03572397):0.9168443,((((MSK.17.85:0.009759773,((MSK.17.27:0.0009075602,MSK.17.39:0.0009075602):0.002127122,MSK.17.59:0.003034682):0.006725091):0.006864783,MSK.17.45:0.01662456):0.03047753,(MSK.17.80:0.01747769,MSK.17.21:0.01747769):0.0296244):0.6151507,DFI.3.84:0.6622528):0.2903154):0.1290716,(((MSK.18.12:0.1586501,MSK.18.76:0.1586501):0.7422176,(MSK.11.23:0.1265154,(MSK.11.50:0.07421506,MSK.11.53:0.07421506):0.05230031):0.7743523):0.1485727,(MSK.20.88:0.06861799,MSK.20.24:0.06861799):0.9808224):0.03219944):0.1224964,DFI.3.85:1.204136):0.2120032):0.1170642,MSK.10.14:1.533204):0.5810122):0.1643344):0.4193471):0.1360889,(((((MSK.22.59:0.03864444,MSK.23.78:0.03864444):0.08558431,MSK.22.93:0.1242288):1.362419,((DFI.4.9:1.377677,((DFI.6.71:1.2296,((DFI.3.45:0.9621406,(((((MSK.20.76:0.005984939,MSK.20.13:0.005984939):0.03242875,MSK.20.44:0.03841369):0.663187,(MSK.18.31:0.135443,MSK.18.3:0.135443):0.5661577):0.06994164,MSK.18.71:0.7715423):0.11539,(MSK.18.16:0.7670487,MSK.17.7:0.7670487):0.1198837):0.07520822):0.1788079,DFI.5.15:1.140949):0.08865152):0.06894472,MSK.20.14:1.298545):0.07913274):0.03180937,((((MSK.19.37:0.9812445,((MSK.14.18:0.008399756,((MSK.15.33:0.001447049,MSK.15.30:0.001447049):0.002441439,MSK.15.6:0.003888489):0.004511268):0.05110599,MSK.15.15:0.05950574):0.9217387):0.167797,MSK.14.2:1.149042):0.115018,MSK.15.29:1.26406):0.09101424,MSK.15.46:1.355074):0.05441309):0.07716042):0.0884017,MSK.23.95:1.575049):0.6137477,((((MSK.6.16:0.2087748,(MSK.6.26:0.006732394,MSK.6.25:0.006732394):0.2020424):1.037348,((MSK.22.86:0.101325,MSK.22.56:0.101325):0.98436,((MSK.6.6:0.6537612,((((MSK.17.18:0.001026552,MSK.17.60:0.001026552):0.5047028,MSK.19.60:0.5057293):0.08250677,((MSK.13.24:0.1359065,MSK.13.38:0.1359065):0.4208074,MSK.15.26:0.5567139):0.03152225):0.0609556,MSK.16.79:0.6491917):0.004569495):0.2206944,MSK.18.38:0.8744556):0.2112294):0.1604382):0.2594362,(MSK.11.25:1.415963,MSK.16.34:1.415963):0.08959638):0.42123,MSK.9.19:1.926789):0.2620073):0.6451896):0.2720521):0.1911737,((((MSK.11.20:0.2185118,((MSK.11.19:0.007115789,MSK.11.27:0.007115789):0.01952213,MSK.11.47:0.02663792):0.1918739):0.6826251,(((MSK.22.35:0.7317976,(MSK.17.49:0.6459351,(MSK.13.17:0.5621654,(MSK.13.2:0.005003621,(MSK.13.6:0.004403209,MSK.13.43:0.004403209):0.0006004121):0.5571618):0.08376975):0.08586242):0.04431587,MSK.11.2:0.7761134):0.120572,MSK.6.11:0.8966854):0.004451496):0.04604542,((((((((MSK.10.27:0.01044862,MSK.10.31:0.01044862):0.05242078,MSK.10.20:0.0628694):0.03998712,MSK.10.7:0.1028565):0.6292068,(((MSK.9.4:0.008945339,MSK.9.9:0.008945339):0.0874901,MSK.9.11:0.09643544):0.566493,(((DFI.4.141:0.03331342,DFI.4.155:0.03331342):0.06626768,DFI.4.26:0.0995811):0.06017711,DFI.4.30:0.1597582):0.5031702):0.06913491):0.130885,MSK.14.37:0.8629483):0.003442671,(MSK.14.17:0.07033848,MSK.14.23:0.07033848):0.7960525):0.04170974,DFI.5.34:0.9081008):0.01721933,(MSK.15.34:0.1403227,(MSK.15.37:0.1083422,MSK.14.29:0.1083422):0.03198043):0.7849974):0.02186222):0.1228962,MSK.15.40:1.070079):2.227134):0.3173817,(MSK.18.5:2.254935,MSK.14.58:2.254935):1.359659):0.6013497);\n\n\n\ncountmap(strvarobs.NCBI_Phylum)\n\nDict{String, Int64} with 3 entries:\n  \"Firmicutes\"     =&gt; 182\n  \"Bacteroidetes\"  =&gt; 150\n  \"Actinobacteria\" =&gt; 24\n\n\n\nphylum_color_dict = Dict(k=&gt;v for (k,v) in zip(unique(strvarobs.NCBI_Phylum), palette(:Accent)[[4,2,3]]));\nphylum_linecolors = map(prewalk(strvartree)) do node; strvarobs, strvar_obsnames, phylum_color_dict\n    leafids = getleafnames(node)\n    leafphylum = strvarobs.NCBI_Phylum[indexin(leafids, strvar_obsnames)]\n    get(phylum_color_dict, mode(leafphylum), :grey)\nend |&gt; x-&gt;x[2:end] |&gt; permutedims\n\nplot(strvartree,\n    fs=2, rightmargin=7Plots.mm,\n    c=phylum_linecolors,\n    lw=3,\n    size=(400, 600),\n)\n# phyla \nfor (i, (k,v)) in enumerate(zip(unique(strvarobs.NCBI_Phylum), palette(:Accent)[[4,2,3]]))\n    annotate!(0, i*10 - 30, text(k, 7, :left, :black,v), c=v)\nend\nplot!()\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspeciescolordf = CSV.read(datadir(\"exp_raw\",\"BB669\",\"subsettreecolors.csv\"), DataFrame)\nspecies_color_dict = Dict(k=&gt;v for (k,v) in zip(speciescolordf.species_name, speciescolordf.color));\nspeciesvector = strvarobs.Species[indexin(getleafnames(strvartree), strvar_obsnames)];\nspecies_linecolors = map(prewalk(strvartree)) do node; strvarobs, strvar_obsnames, species_color_dict\n    leafids = getleafnames(node)\n    leafspecies = strvarobs.Species[indexin(leafids, strvar_obsnames)]\n    if length(unique(leafspecies)) == 1\n        get(species_color_dict, mode(leafspecies), :grey)\n    else\n        :grey\n    end\nend |&gt; x-&gt;x[2:end] |&gt; permutedims\n\n plot(strvartree,\n    yticks=false,\n    fs=1, rightmargin=5.4Plots.cm,\n    c=species_linecolors,\n    lw=3, size=(750, 750),\n    framestyle=:grid,\n)\n# species \nfor (i, (k,v)) in enumerate(zip(speciescolordf.species_name, speciescolordf.color))\n    yval = median(findall(==(k), speciesvector))\n    annotate!(4.5, yval, text(k, 9, :left, v))\nend\nannotate!(4.5, 356, text(\"Blautia luti (2)\", 9, :left, species_color_dict[\"Blautia luti\"]))\n# vline!([.5,2.5])\nfancy_tree_plot = plot!()\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsavefig(joinpath(pdir, \"str_var_tree_colored_by_species.pdf\"));",
    "crumbs": [
      "Fig. S21 - Cog categories in Spectral Tree"
    ]
  },
  {
    "objectID": "10_figure_s22.html#ogg-annotations-to-cog-groups",
    "href": "10_figure_s22.html#ogg-annotations-to-cog-groups",
    "title": "Fig. S21 - Cog categories in Spectral Tree",
    "section": "OGG annotations to COG groups",
    "text": "OGG annotations to COG groups\n\ntestresults = CSV.read(joinpath(rdir, \"full_ogg_wilcoxon_testresults_on_big10species.csv\"), DataFrame);\nsigtestresults = filter(:qval_BH =&gt; &lt;(0.05), testresults) |&gt;\n      df -&gt; filter(:logeffectsize =&gt; &gt;(1), df) |&gt;\n      df -&gt; filter(:effectsize =&gt; &gt;(1), df) |&gt;\n      df -&gt; filter(:log2FC =&gt; x -&gt; abs.(x) .&gt; 1, df);\n\n\nfirst(sigtestresults, 5)\n\n5×26 DataFrame\n\n\n\nRow\nnodeids\nnodeheight\nnodedepth\ngrp1_N\ngrp2_N\ngrp1_phylum_mode\ngrp2_phylum_mode\ngrp1_species_mode\ngrp2_species_mode\ngrp1_species_donor_mode\ngrp2_species_donor_mode\nogg_name\nogg_idx\nogg_freqs\ngrp1_prp_exp\ngrp2_prp_exp\neffectsize\nlogeffectsize\nlog2FC\ncliffs_d\npvals\nqvals\npval_BH\npval_Bon\nqval_BH\ntree_level\n\n\n\nInt64\nFloat64\nFloat64\nInt64\nInt64\nString15\nString15\nString31\nString31\nString\nString\nString15\nInt64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nString15\n\n\n\n\n1\n1\n0.0\n4.21594\n150\n206\nBacteroidetes\nFirmicutes\nPhocaeicola vulgatus\n[Ruminococcus] gnavus\nPhocaeicola vulgatus MSK.22\nBifidobacterium breve MSK.22\n2Z7ID\n8\n0.407303\n0.946667\n0.0145631\n1.09688\n1.02216\n1.0335\n0.934628\n2.22378e-67\n0.0\n2.08024e-65\n1.16327e-61\n0.0\nphylum level\n\n\n2\n1\n0.0\n4.21594\n150\n206\nBacteroidetes\nFirmicutes\nPhocaeicola vulgatus\n[Ruminococcus] gnavus\nPhocaeicola vulgatus MSK.22\nBifidobacterium breve MSK.22\n2Z7IJ\n9\n0.410112\n0.0\n0.708738\n1.19222\n1.32881\n-1.16471\n-0.708738\n8.5582e-38\n0.0\n6.95591e-36\n4.47683e-32\n0.0\nphylum level\n\n\n3\n1\n0.0\n4.21594\n150\n206\nBacteroidetes\nFirmicutes\nPhocaeicola vulgatus\n[Ruminococcus] gnavus\nPhocaeicola vulgatus MSK.22\nBifidobacterium breve MSK.22\n2Z7KK\n20\n0.441011\n0.873333\n0.126214\n1.54894\n1.13715\n1.17935\n0.822006\n7.76604e-49\n0.0\n6.69046e-47\n4.06245e-43\n0.0\nphylum level\n\n\n4\n1\n0.0\n4.21594\n150\n206\nBacteroidetes\nFirmicutes\nPhocaeicola vulgatus\n[Ruminococcus] gnavus\nPhocaeicola vulgatus MSK.22\nBifidobacterium breve MSK.22\n2Z7T7\n46\n0.511236\n0.0\n0.883495\n1.57742\n1.6749\n-1.08511\n-0.883495\n4.2507e-54\n0.0\n3.73707e-52\n2.22356e-48\n0.0\nphylum level\n\n\n5\n1\n0.0\n4.21594\n150\n206\nBacteroidetes\nFirmicutes\nPhocaeicola vulgatus\n[Ruminococcus] gnavus\nPhocaeicola vulgatus MSK.22\nBifidobacterium breve MSK.22\n2Z7X2\n68\n0.384831\n0.913333\n0.0\n2.32667\n1.54657\n1.54657\n0.913333\n1.23025e-63\n0.0\n1.14185e-61\n6.43549e-58\n0.0\nphylum level\n\n\n\n\n\n\n\nCELLULAR PROCESSES AND SIGNALING\n\n[D] Cell cycle control, cell division, chromosome partitioning\n[M] Cell wall/membrane/envelope biogenesis\n[N] Cell motility\n[O] Post-translational modification, protein turnover, and chaperones\n[T] Signal transduction mechanisms\n[U] Intracellular trafficking, secretion, and vesicular transport\n[V] Defense mechanisms\n[W] Extracellular structures\n[Y] Nuclear structure\n[Z] Cytoskeleton\n\nINFORMATION STORAGE AND PROCESSING\n\n[A] RNA processing and modification\n[B] Chromatin structure and dynamics\n[J] Translation, ribosomal structure and biogenesis\n[K] Transcription\n[L] Replication, recombination and repair\n\nMETABOLISM\n\n[C] Energy production and conversion\n[E] Amino acid transport and metabolism\n[F] Nucleotide transport and metabolism\n[G] Carbohydrate transport and metabolism\n[H] Coenzyme transport and metabolism\n[I] Lipid transport and metabolism\n[P] Inorganic ion transport and metabolism\n[Q] Secondary metabolites biosynthesis, transport, and catabolism\n\nPOORLY CHARACTERIZED\n\n[R] General function prediction only\n[S] Function unknown\n\n\n\nCOG_cat_desc_map = Dict(\n    'D' =&gt; \"Cell cycle control, cell division, chromosome partitioning\",\n    'M' =&gt; \"Cell wall/membrane/envelope biogenesis\",\n    'N' =&gt; \"Cell motility\",\n    'O' =&gt; \"Post-translational modification, protein turnover, and chaperones\",\n    'T' =&gt; \"Signal transduction mechanisms\",\n    'U' =&gt; \"Intracellular trafficking, secretion, and vesicular transport\",\n    'V' =&gt; \"Defense mechanisms\",\n    'W' =&gt; \"Extracellular structures\",\n    'Y' =&gt; \"Nuclear structure\",\n    'Z' =&gt; \"Cytoskeleton\",\n    'A' =&gt; \"RNA processing and modification\",\n    'B' =&gt; \"Chromatin structure and dynamics\",\n    'J' =&gt; \"Translation, ribosomal structure and biogenesis\",\n    'K' =&gt; \"Transcription\",\n    'L' =&gt; \"Replication, recombination and repair\",\n    'C' =&gt; \"Energy production and conversion\",\n    'E' =&gt; \"Amino acid transport and metabolism\",\n    'F' =&gt; \"Nucleotide transport and metabolism\",\n    'G' =&gt; \"Carbohydrate transport and metabolism\",\n    'H' =&gt; \"Coenzyme transport and metabolism\",\n    'I' =&gt; \"Lipid transport and metabolism\",\n    'P' =&gt; \"Inorganic ion transport and metabolism\",\n    'Q' =&gt; \"Secondary metabolites biosynthesis, transport, and catabolism\",\n    'R' =&gt; \"General function prediction only\",\n    'S' =&gt; \"Function unknown\",\n)\nCOG_cat_group_map = Dict(\n    'D' =&gt; \"CELLULAR PROCESSES AND SIGNALING\",\n    'M' =&gt; \"CELLULAR PROCESSES AND SIGNALING\",\n    'N' =&gt; \"CELLULAR PROCESSES AND SIGNALING\",\n    'O' =&gt; \"CELLULAR PROCESSES AND SIGNALING\",\n    'T' =&gt; \"CELLULAR PROCESSES AND SIGNALING\",\n    'U' =&gt; \"CELLULAR PROCESSES AND SIGNALING\",\n    'V' =&gt; \"CELLULAR PROCESSES AND SIGNALING\",\n    'W' =&gt; \"CELLULAR PROCESSES AND SIGNALING\",\n    'Y' =&gt; \"CELLULAR PROCESSES AND SIGNALING\",\n    'Z' =&gt; \"CELLULAR PROCESSES AND SIGNALING\",\n    'A' =&gt; \"INFORMATION STORAGE AND PROCESSING\",\n    'B' =&gt; \"INFORMATION STORAGE AND PROCESSING\",\n    'J' =&gt; \"INFORMATION STORAGE AND PROCESSING\",\n    'K' =&gt; \"INFORMATION STORAGE AND PROCESSING\",\n    'L' =&gt; \"INFORMATION STORAGE AND PROCESSING\",\n    'C' =&gt; \"METABOLISM\",\n    'E' =&gt; \"METABOLISM\",\n    'F' =&gt; \"METABOLISM\",\n    'G' =&gt; \"METABOLISM\",\n    'H' =&gt; \"METABOLISM\",\n    'I' =&gt; \"METABOLISM\",\n    'P' =&gt; \"METABOLISM\",\n    'Q' =&gt; \"METABOLISM\",\n    'R' =&gt; \"UNKNOWN FUNCTION\",\n    'S' =&gt; \"UNKNOWN FUNCTION\",\n);\n\n\nogg_annotations =\n    @chain begin\n        CSV.read(datadir(\"exp_raw\", \"UP7047\", \"2_annotations.tsv\"), DataFrame)\n        coalesce.(\"\")\n        select(Not(:level))\n        transform(\n            :category =&gt; ByRow(x -&gt; !contains(x, r\"S|R\")) =&gt; :isannotated,\n            :category =&gt; ByRow(x-&gt; join(unique([COG_cat_desc_map[c] for c in x]), \" & \")) =&gt; :category_description,\n            :category =&gt; ByRow(x-&gt; join(unique([COG_cat_group_map[c] for c in x]), \" & \")) =&gt; :category_group,\n        )\n    end\n\n206782×6 DataFrame206757 rows omitted\n\n\n\nRow\nogg_name\ncategory\ndescription\nisannotated\ncategory_description\ncategory_group\n\n\n\nString7\nString7\nString\nBool\nString\nString\n\n\n\n\n1\n2Z7HP\nS\nTocopherol cyclase\nfalse\nFunction unknown\nUNKNOWN FUNCTION\n\n\n2\n2Z7HQ\nS\nProtein of unknown function (DUF1329)\nfalse\nFunction unknown\nUNKNOWN FUNCTION\n\n\n3\n2Z7HR\nS\nDomain of unknown function (DUF4474)\nfalse\nFunction unknown\nUNKNOWN FUNCTION\n\n\n4\n2Z7HS\nS\nPsort location CytoplasmicMembrane, score\nfalse\nFunction unknown\nUNKNOWN FUNCTION\n\n\n5\n2Z7HT\nS\nProtein of unknown function (DUF1822)\nfalse\nFunction unknown\nUNKNOWN FUNCTION\n\n\n6\n2Z7HU\nS\n\nfalse\nFunction unknown\nUNKNOWN FUNCTION\n\n\n7\n2Z7HV\nS\n\nfalse\nFunction unknown\nUNKNOWN FUNCTION\n\n\n8\n2Z7HW\nS\nInterPro IPR010496\nfalse\nFunction unknown\nUNKNOWN FUNCTION\n\n\n9\n2Z7HX\nS\nTraU protein\nfalse\nFunction unknown\nUNKNOWN FUNCTION\n\n\n10\n2Z7HY\nS\nPhage major capsid protein, P2 family\nfalse\nFunction unknown\nUNKNOWN FUNCTION\n\n\n11\n2Z7HZ\nS\nDomain of unknown function (DUF4392)\nfalse\nFunction unknown\nUNKNOWN FUNCTION\n\n\n12\n2Z7I0\nL\nRestriction endonuclease EcoRV\ntrue\nReplication, recombination and repair\nINFORMATION STORAGE AND PROCESSING\n\n\n13\n2Z7I1\nS\n\nfalse\nFunction unknown\nUNKNOWN FUNCTION\n\n\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n\n\n206771\nCOG5652\nV\nVanZ like family\ntrue\nDefense mechanisms\nCELLULAR PROCESSES AND SIGNALING\n\n\n206772\nCOG5653\nM\nProtein involved in cellulose biosynthesis\ntrue\nCell wall/membrane/envelope biogenesis\nCELLULAR PROCESSES AND SIGNALING\n\n\n206773\nCOG5654\nK\nRES domain protein\ntrue\nTranscription\nINFORMATION STORAGE AND PROCESSING\n\n\n206774\nCOG5655\nL\nRePlication protein\ntrue\nReplication, recombination and repair\nINFORMATION STORAGE AND PROCESSING\n\n\n206775\nCOG5658\nS\nintegral membrane protein\nfalse\nFunction unknown\nUNKNOWN FUNCTION\n\n\n206776\nCOG5659\nL\ntransposition\ntrue\nReplication, recombination and repair\nINFORMATION STORAGE AND PROCESSING\n\n\n206777\nCOG5660\nK\nintegral membrane protein\ntrue\nTranscription\nINFORMATION STORAGE AND PROCESSING\n\n\n206778\nCOG5661\nO\nsecreted Zn-dependent protease\ntrue\nPost-translational modification, protein turnover, and chaperones\nCELLULAR PROCESSES AND SIGNALING\n\n\n206779\nCOG5662\nK\nAntiSigma factor\ntrue\nTranscription\nINFORMATION STORAGE AND PROCESSING\n\n\n206780\nCOG5663\nF\nBelongs to the 5'(3')-deoxyribonucleotidase family\ntrue\nNucleotide transport and metabolism\nMETABOLISM\n\n\n206781\nCOG5664\nO\nBacterial protein of unknown function (DUF922)\ntrue\nPost-translational modification, protein turnover, and chaperones\nCELLULAR PROCESSES AND SIGNALING\n\n\n206782\nCOG5665\nL\nphosphatidylcholine phospholipase C activity\ntrue\nReplication, recombination and repair\nINFORMATION STORAGE AND PROCESSING\n\n\n\n\n\n\n\ndf = leftjoin(\n    select(sigtestresults, [:nodeids, :nodeheight, :tree_level, :ogg_name,]),\n    ogg_annotations,\n    on=:ogg_name,\n)\npltdf =\n    @chain df begin\n        coalesce.(\"\")\n        groupby(:tree_level)\n        combine(:isannotated =&gt; mean)\n    end\n\n3×2 DataFrame\n\n\n\nRow\ntree_level\nisannotated_mean\n\n\n\nString15\nFloat64\n\n\n\n\n1\nphylum level\n0.838554\n\n\n2\nspecies level\n0.821844\n\n\n3\nstrain level\n0.571963\n\n\n\n\n\n\n\n@df pltdf bar(:tree_level, :isannotated_mean,\n    ylims=(0,1),\n    size=(300, 400),\n    xrotation=20,\n    ylabel=\"fraction annotated\",\n)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsavefig(joinpath(pdir, \"fraction_oggs_annotated_allnodes.pdf\"))\n\n\"/Users/bend/projects/Doran_etal_2023/plots/reviewer_plots/fraction_oggs_annotated_allnodes.pdf\"",
    "crumbs": [
      "Fig. S21 - Cog categories in Spectral Tree"
    ]
  },
  {
    "objectID": "10_figure_s22.html#all-metabolites",
    "href": "10_figure_s22.html#all-metabolites",
    "title": "Fig. S21 - Cog categories in Spectral Tree",
    "section": "All Metabolites",
    "text": "All Metabolites\n\n# get metabolite data\nmetabolite_names_full = biobank[\"metabolites_foldchange\"].var.label;\nbb_met_lfc = biobank[\"metabolites_foldchange\"].X[:, :];\n\n# filter to metaboltes with at least 10% measureable data\nmeasurable_metabolites_mask = mapslices(c-&gt;mean(c .==0.) &lt; .9, bb_met_lfc[biobank.obs.kept_species .== 1, :], dims=1)|&gt;vec;\nkeepmetabolites_mask = measurable_metabolites_mask;\nmetabolite_names = metabolite_names_full[keepmetabolites_mask];\nmetabolite_label = biobank[\"metabolites_foldchange\"].var.label[keepmetabolites_mask];\nmetabolite_ids = biobank[\"metabolites_foldchange\"].var.ID[keepmetabolites_mask];\n\n\nmet_mtx = bb_met_lfc[:, keepmetabolites_mask]\nmet_ids = biobank.obs_names;\nstrvar_tree = readnw(open(readline, datadir(\"exp_pro\",\"BB669\",\"strvar-spitree.nw\")));\n\n\n# nodes where the average change in aceate is 2 times higher in one group vs the other\nmetabolite_differences =\n    map(prewalk(strvar_tree)) do node\n        (isleaf(node) || any(isleaf.(children(node)))) && return missing\n        nodeid = id(node)\n        g1 = met_mtx[indexin(getleafnames(node[1]), met_ids), :]\n        g2 = met_mtx[indexin(getleafnames(node[2]), met_ids), :]\n        effect = abs.(mean(g1, dims=1) .- mean(g2, dims=1))\n        return (; nodeid, effect)\n    end\n\nthreshold = 1 # 2-fold difference\n\nnode_selectors =\n    @chain metabolite_differences begin\n        skipmissing\n        DataFrame\n        transform(:effect =&gt; ByRow(x -&gt; tuple((x .&gt; threshold)...)) =&gt; \"effect_\" .* metabolite_ids)\n        select(Not(:effect))\n        getindex.(Ref(_.nodeid), eachcol(_)[2:end])\n    end;\n\n\ndf =\n    map(metabolite_label, node_selectors) do ml, ns\n        @chain sigtestresults begin\n            subset(:nodeids =&gt; ByRow(∈(ns)))\n            select([:tree_level, :ogg_name])\n            groupby([:tree_level, :ogg_name])\n            combine(nrow)\n            leftjoin(ogg_annotations, on=:ogg_name)\n            unique\n            sort([:nrow, :category, :ogg_name])\n            insertcols(1, :metabolite_label =&gt; ml)\n        end\n    end |&gt; x -&gt; reduce(vcat, x)\npltdf =\n    @chain df begin\n        groupby([:metabolite_label, :tree_level, :category_group])\n        combine(nrow)\n        groupby([:metabolite_label, :tree_level])\n        transform(\n            :nrow =&gt; (x -&gt; x ./ sum(x)) =&gt; :nrow_frac\n        )\n        groupby([:tree_level, :category_group])\n        combine(\n            :nrow_frac =&gt; mean,\n            :nrow_frac =&gt; std,\n            :nrow_frac =&gt; median,\n            :nrow_frac =&gt; iqr,\n        )\n        sort([:tree_level, :nrow_frac_mean, :category_group])\n    end\n\n22×6 DataFrame\n\n\n\nRow\ntree_level\ncategory_group\nnrow_frac_mean\nnrow_frac_std\nnrow_frac_median\nnrow_frac_iqr\n\n\n\nString15\nString?\nFloat64\nFloat64\nFloat64\nFloat64\n\n\n\n\n1\nphylum level\nCELLULAR PROCESSES AND SIGNALING & METABOLISM\n0.00240964\n4.54848e-19\n0.00240964\n0.0\n\n\n2\nphylum level\nINFORMATION STORAGE AND PROCESSING & CELLULAR PROCESSES AND SIGNALING\n0.00481928\n9.09697e-19\n0.00481928\n0.0\n\n\n3\nphylum level\nMETABOLISM & INFORMATION STORAGE AND PROCESSING\n0.00722892\n0.0\n0.00722892\n0.0\n\n\n4\nphylum level\nMETABOLISM & CELLULAR PROCESSES AND SIGNALING\n0.0216867\n0.0\n0.0216867\n0.0\n\n\n5\nphylum level\nINFORMATION STORAGE AND PROCESSING\n0.13253\n2.91103e-17\n0.13253\n0.0\n\n\n6\nphylum level\nUNKNOWN FUNCTION\n0.161446\n2.91103e-17\n0.161446\n0.0\n\n\n7\nphylum level\nCELLULAR PROCESSES AND SIGNALING\n0.306024\n5.82206e-17\n0.306024\n0.0\n\n\n8\nphylum level\nMETABOLISM\n0.363855\n5.82206e-17\n0.363855\n0.0\n\n\n9\nspecies level\nMETABOLISM & INFORMATION STORAGE AND PROCESSING\n0.00661051\n0.00263808\n0.00559246\n0.00354854\n\n\n10\nspecies level\nMETABOLISM & CELLULAR PROCESSES AND SIGNALING\n0.00788784\n0.00386172\n0.00840574\n0.004182\n\n\n11\nspecies level\nINFORMATION STORAGE AND PROCESSING & CELLULAR PROCESSES AND SIGNALING\n0.013102\n0.00595208\n0.0137633\n0.00927329\n\n\n12\nspecies level\nINFORMATION STORAGE AND PROCESSING\n0.130227\n0.100512\n0.110672\n0.0882675\n\n\n13\nspecies level\nUNKNOWN FUNCTION\n0.209926\n0.0964315\n0.188362\n0.169214\n\n\n14\nspecies level\nCELLULAR PROCESSES AND SIGNALING\n0.234602\n0.0220361\n0.237209\n0.0187001\n\n\n15\nspecies level\nMETABOLISM\n0.425399\n0.0809253\n0.430108\n0.122563\n\n\n16\nstrain level\nMETABOLISM & CELLULAR PROCESSES AND SIGNALING\n0.00904381\n0.00679671\n0.00729927\n0.00388252\n\n\n17\nstrain level\nINFORMATION STORAGE AND PROCESSING & CELLULAR PROCESSES AND SIGNALING\n0.0102366\n0.00388368\n0.00928793\n0.00342857\n\n\n18\nstrain level\nMETABOLISM & INFORMATION STORAGE AND PROCESSING\n0.0449953\n0.0712116\n0.00555556\n0.0550548\n\n\n19\nstrain level\nMETABOLISM\n0.132385\n0.045579\n0.122262\n0.0422955\n\n\n20\nstrain level\nCELLULAR PROCESSES AND SIGNALING\n0.198778\n0.0593026\n0.185759\n0.0551051\n\n\n21\nstrain level\nINFORMATION STORAGE AND PROCESSING\n0.248418\n0.191368\n0.204357\n0.0407011\n\n\n22\nstrain level\nUNKNOWN FUNCTION\n0.486934\n0.103846\n0.508\n0.0976351\n\n\n\n\n\n\n\nplt_labels = names(unstack(pltdf, :tree_level, :category_group, :nrow_frac_mean))[2:end]\nx_labels = unique(pltdf.tree_level) |&gt; sort\npltmtx_mean = Matrix(coalesce.(unstack(pltdf, :tree_level, :category_group, :nrow_frac_mean), 0.0)[:, 2:end])\npltmtx_std = Matrix(coalesce.(unstack(pltdf, :tree_level, :category_group, :nrow_frac_std), 0.0)[:, 2:end])\ngroupedbar(pltmtx_mean, \n    yerrorbar=pltmtx_std,\n    label=permutedims(plt_labels),\n    xticks = (1:3, x_labels),\n    legend=:outerbottom,\n    size=(650,600),\n    ylims=(0, .75),\n    c=getindex.(Ref(colordict), plt_labels) |&gt; permutedims,\n    ylabel=\"fraction\",\n    title=\"all metabolites\",\n    )\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsavefig(joinpath(pdir,\"all_metabolites_groupedbar.pdf\"))\n\n\"/Users/bend/projects/Doran_etal_2023/plots/reviewer_plots/all_metabolites_groupedbar.pdf\"",
    "crumbs": [
      "Fig. S21 - Cog categories in Spectral Tree"
    ]
  },
  {
    "objectID": "08_figure_07.html",
    "href": "08_figure_07.html",
    "title": "Fig. 7 - Tuning for metabolite-species pairs",
    "section": "",
    "text": "julia setup\nusing DrWatson\n@quickactivate projectdir()\n\nusing SpectralInference\nusing NewickTree\nusing MLJ\nusing GLMNet: GLMNet, glmnet\nusing Chain\nusing Distributions: Normal\nusing MLJBase: train_test_pairs\nusing Distances, Clustering\nusing Distributions\nusing Printf: @sprintf\nusing Muon, CSV, DataFrames\nusing Gotree_jll\nusing Random: seed!\nusing FreqTables\nusing NearestNeighbors\nusing HypothesisTests\nusing MultipleTesting: adjust, Bonferroni, BenjaminiHochberg\nusing DataFramesMeta, LaTeXStrings\nusing StatsPlots, StatsBase\ntheme(:default, grid=false, tickdir=:out, label=\"\")\ninclude(srcdir(\"helpers.jl\"))\nadjust_rsquared(r2, n, df) = 1 - (1 - r2) * ((n - 1) / (n - 1 - df))\nshannon(x) = x |&gt; countmap |&gt; values |&gt; x -&gt; x ./ maximum(x) |&gt; entropy\n\nddir = datadir(\"exp_raw\", \"BB669\")\nrdir = projectdir(\"_research\", \"metabolite_model_outofbag\") |&gt; mkpath\npdir = plotsdir(\"metabolite_model_outofbag\") |&gt; mkpath\nsupptbl_dir = projectdir(\"_research\", \"SuppTables\") |&gt; mkpath\n\nspeciescolordf = CSV.read(datadir(\"exp_raw\", \"BB669\", \"subsettreecolors.csv\"), DataFrame)\nspecies_color_dict = Dict(k =&gt; v for (k, v) in zip(speciescolordf.species_name, speciescolordf.color));",
    "crumbs": [
      "Fig. 7 - Tuning for metabolite-species pairs"
    ]
  },
  {
    "objectID": "08_figure_07.html#bubble-plot-of-species-rsqs",
    "href": "08_figure_07.html#bubble-plot-of-species-rsqs",
    "title": "Fig. 7 - Tuning for metabolite-species pairs",
    "section": "bubble plot of species rsqs",
    "text": "bubble plot of species rsqs\n\nmdlstatsdf_meansdf =\n    @chain mdlstatsdf begin\n        subset(:lambda =&gt; ByRow(&gt;=(1e-3)))\n        groupby([:metabolite_label, :lambda])\n        combine(\n            5:15 .=&gt; mean,\n            5:15 .=&gt; std,\n        )\n    end\n\nbestlambdamodels =\n    @chain mdlstatsdf_meansdf begin\n        groupby(:metabolite_label)\n        subset(:rsq_adj_mean =&gt; (x -&gt; x .== maximum(x)))\n        # subset(:lambda =&gt; (x -&gt; x .== 0.01))\n    end\n# CSV.write(joinpath(rdir, \"bestmodels_SLE_oof.csv\"), bestlambdamodels)\n\nbestmodels_oofpreds =\n    @chain bestlambdamodels begin\n        sort(:rsq_adj_mean, rev=true)\n        select([:metabolite_label, :lambda, :rsq_adj_mean, :cor_mean])\n        leftjoin(oof_preds_df_stacked, on=[:metabolite_label, :lambda])\n        leftjoin(mdlstatsdf_stacked, on=[:metabolite_label, :lambda, :fold, :resample])\n        leftjoin(select(biobank.obs, [:Strain_ID, :Species, :Donor]), on=:msk_id =&gt; :Strain_ID)\n    end\n\n# CSV.write(joinpath(rdir, \"bestmodels_SLE_oofpreds.csv\"), bestmodels_oofpreds)\n@show size(bestmodels_oofpreds)\nfirst(bestmodels_oofpreds, 5)\n\nsize(bestmodels_oofpreds) = (56960, 19)\n\n\n5×19 DataFrame\n\n\n\nRow\nmetabolite_label\nlambda\nrsq_adj_mean\ncor_mean\nrow_id\nmsk_id\nmetabolite_name\nfold\nresample\ntruth\npreds\ndegrees_freedom\norig_degrees_freedom\ndegrees_freedom_prop\nphylum_level\nspecies_level\nstrain_level\nSpecies\nDonor\n\n\n\nString31\nFloat64\nFloat64\nFloat64\nInt64?\nString15?\nString31?\nInt64?\nInt64?\nFloat64?\nFloat64?\nInt64?\nFloat64?\nFloat64?\nFloat64?\nFloat64?\nFloat64?\nString?\nString?\n\n\n\n\n1\nAcetate\n0.0758578\n0.678213\n0.853746\n342\nMSK.19.38\nAcetate\n1\n1\n2.35396\n2.34204\n31\n266.0\n0.116541\n0.0\n0.290323\n0.709677\n[Ruminococcus] gnavus\nMSK.19\n\n\n2\nAcetate\n0.0758578\n0.678213\n0.853746\n90\nMSK.22.14\nAcetate\n1\n1\n0.198325\n1.03033\n31\n266.0\n0.116541\n0.0\n0.290323\n0.709677\nPhocaeicola vulgatus\nMSK.22\n\n\n3\nAcetate\n0.0758578\n0.678213\n0.853746\n121\nMSK.22.19\nAcetate\n1\n1\n0.906867\n0.790439\n31\n266.0\n0.116541\n0.0\n0.290323\n0.709677\n[Eubacterium] rectale\nMSK.22\n\n\n4\nAcetate\n0.0758578\n0.678213\n0.853746\n223\nMSK.18.5\nAcetate\n1\n1\n2.45019\n2.93266\n31\n266.0\n0.116541\n0.0\n0.290323\n0.709677\nBlautia luti\nMSK.18\n\n\n5\nAcetate\n0.0758578\n0.678213\n0.853746\n163\nMSK.19.91\nAcetate\n1\n1\n0.962586\n1.55248\n31\n266.0\n0.116541\n0.0\n0.290323\n0.709677\nBacteroides uniformis\nMSK.19",
    "crumbs": [
      "Fig. 7 - Tuning for metabolite-species pairs"
    ]
  },
  {
    "objectID": "08_figure_07.html#predictive-capacity-of-best-lambda-models-regardless-of-species",
    "href": "08_figure_07.html#predictive-capacity-of-best-lambda-models-regardless-of-species",
    "title": "Fig. 7 - Tuning for metabolite-species pairs",
    "section": "Predictive capacity of best lambda models regardless of species",
    "text": "Predictive capacity of best lambda models regardless of species\n\npltdf = @chain bestlambdamodels begin\n    select([:metabolite_label, :lambda, :rsq_adj_mean, :rsq_adj_std])\n    leftjoin(mdlstatsdf, on=[:metabolite_label, :lambda])\n    sort(:rsq_adj_mean, rev=true)\nend;\n\nbottomylim = -0.1\nplot(\n    size=(1000,300),\n    ylabel=\"adj. R²\",\n    margin=5Plots.mm,\n    bottommargin=15Plots.mm,\n    ylims=(bottomylim,1),\n    xlims=(3, 3 + 32 - 1),\n    xwiden=true,\n    xrotation=30,\n)   \nhline!([0], linestyle=:dash, color=:black)\n@df pltdf scatter!(:metabolite_label, :rsq_adj,\n    xticks=(2.5 .+ (0.5:length(unique(:metabolite_label))), unique(:metabolite_label)),\n    marker=(:green, 0.3),\n)\n# @df filter(:rsq_adj =&gt; &lt;(bottomylim), pltdf) annotate!(:metabolite_label, bottomylim, text(\"×\", 9, :red))\n@chain filter(:rsq_adj =&gt; &lt;(bottomylim), pltdf) begin\n    groupby(\"metabolite_label\")\n    combine(nrow =&gt; :count)\n    @df _ annotate!(:metabolite_label, bottomylim, text.((string.(:count)) .* \"×\", 9, :red))\nend\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nallmodels_oofpreds =\n    @chain mdlstatsdf_meansdf begin\n        sort(:rsq_adj_mean, rev=true)\n        select([:metabolite_label, :lambda, :rsq_adj_mean, :cor_mean])\n        leftjoin(oof_preds_df_stacked, on=[:metabolite_label, :lambda])\n        leftjoin(mdlstatsdf_stacked, on=[:metabolite_label, :lambda, :fold, :resample])\n        leftjoin(select(biobank.obs, [:Strain_ID, :Species, :Donor]), on=:msk_id =&gt; :Strain_ID)\n    end\n\nallmodels_mdlstats =\n    @chain allmodels_oofpreds begin\n        groupby([:metabolite_label, :fold, :resample, :lambda, :Species, :Donor])\n        transform!(\n            :truth =&gt; var =&gt; :truth_var_by_donor,\n            :truth =&gt; std =&gt; :truth_std_by_donor,\n            :truth =&gt; mean =&gt; :truth_mean_by_donor,\n            :Donor =&gt; (length ∘ unique) =&gt; :donor_count\n        )\n        groupby([:metabolite_label, :fold, :resample, :lambda, :Species])\n        combine(\n            :rsq_adj_mean =&gt; (only ∘ unique) =&gt; :full_adj_rsq_mean,\n            :cor_mean =&gt; (only ∘ unique) =&gt; :cor_mean,\n            :degrees_freedom =&gt; (only ∘ unique) =&gt; identity,\n            :orig_degrees_freedom =&gt; (only ∘ unique) =&gt; identity,\n            :donor_count =&gt; (only ∘ unique) =&gt; identity,\n            :strain_level =&gt; (only ∘ unique) =&gt; identity,\n            nrow =&gt; :strain_count,\n            :truth =&gt; std,\n            :truth =&gt; var,\n            :Donor =&gt; shannon =&gt; :donor_entropy,\n            [:preds, :truth] =&gt; ((yhat, y) -&gt; rsquared(yhat, y)) =&gt; :rsq_by_species,\n            [:preds, :truth] =&gt; ((yhat, y) -&gt; cor(yhat, y)) =&gt; :cor_by_species,\n            :truth_mean_by_donor =&gt; var,\n            :truth_mean_by_donor =&gt; std,\n            :truth_var_by_donor =&gt; (x -&gt; mean(replace(x, NaN =&gt; 0.0))) =&gt; :truth_var_by_donor_mean,\n            :truth_std_by_donor =&gt; (x -&gt; mean(replace(x, NaN =&gt; 0.0))) =&gt; :truth_std_by_donor_mean,\n        )\n        transform!(\n            # NaNs appear when predictions are constant, obviously there is no correlation in that case\n            :cor_by_species =&gt; (x -&gt; replace(x, NaN =&gt; 0.0)) =&gt; identity,\n            :strain_level =&gt; (x -&gt; replace(x, NaN =&gt; 0.0)) =&gt; identity,\n            [:rsq_by_species, :orig_degrees_freedom, :degrees_freedom] =&gt; ByRow((r, n, d) -&gt; adjust_rsquared(r, n, d)) =&gt; :adj_rsq_by_species,\n            [:truth_mean_by_donor_var, :truth_var_by_donor_mean] =&gt; ByRow((x, y) -&gt; log2((x + 1 / 2^7) / (y + 1 / 2^7))) =&gt; :inter_intra_donor_var,\n            [:truth_mean_by_donor_std, :truth_std_by_donor_mean] =&gt; ByRow((x, y) -&gt; log2((x + 1 / 2^7) / (y + 1 / 2^7))) =&gt; :inter_intra_donor_std,\n        )\n    end\nfirst(allmodels_mdlstats, 5)\n\n5×24 DataFrame\n\n\n\nRow\nmetabolite_label\nfold\nresample\nlambda\nSpecies\nfull_adj_rsq_mean\ncor_mean\ndegrees_freedom\norig_degrees_freedom\ndonor_count\nstrain_level\nstrain_count\ntruth_std\ntruth_var\ndonor_entropy\nrsq_by_species\ncor_by_species\ntruth_mean_by_donor_var\ntruth_mean_by_donor_std\ntruth_var_by_donor_mean\ntruth_std_by_donor_mean\nadj_rsq_by_species\ninter_intra_donor_var\ninter_intra_donor_std\n\n\n\nString31\nInt64?\nInt64?\nFloat64\nString?\nFloat64\nFloat64\nInt64\nFloat64\nInt64\nFloat64\nInt64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\n\n\n\n\n1\nAcetate\n1\n1\n0.001\n[Ruminococcus] gnavus\n-0.154249\n0.813449\n177\n266.0\n1\n0.875706\n11\n0.463789\n0.2151\n1.65407\n-0.666356\n0.382864\n0.130366\n0.361062\n0.0985076\n0.237947\n-4.018\n0.378116\n0.585883\n\n\n2\nAcetate\n1\n1\n0.001\nPhocaeicola vulgatus\n-0.154249\n0.813449\n177\n266.0\n1\n0.875706\n22\n0.763553\n0.583014\n2.98835\n-0.214217\n0.424436\n0.237218\n0.48705\n0.532039\n0.569913\n-2.65645\n-1.1396\n-0.223356\n\n\n3\nAcetate\n1\n1\n0.001\n[Eubacterium] rectale\n-0.154249\n0.813449\n177\n266.0\n1\n0.875706\n5\n0.476332\n0.226892\n0.27031\n-0.676444\n-0.198207\n0.00891369\n0.0944123\n0.295344\n0.542542\n-4.04838\n-4.17988\n-2.42862\n\n\n4\nAcetate\n1\n1\n0.001\nBlautia luti\n-0.154249\n0.813449\n177\n266.0\n1\n0.875706\n6\n0.58706\n0.344639\n-0.0\n-0.723191\n0.278252\n0.344639\n0.58706\n0.0\n0.0\n-4.18916\n5.4955\n6.25065\n\n\n5\nAcetate\n1\n1\n0.001\nBacteroides uniformis\n-0.154249\n0.813449\n177\n266.0\n1\n0.875706\n7\n0.5105\n0.26061\n0.346574\n-1.40749\n-0.142759\n0.239854\n0.489749\n0.0355815\n0.142613\n-6.24983\n2.51283\n1.72582",
    "crumbs": [
      "Fig. 7 - Tuning for metabolite-species pairs"
    ]
  },
  {
    "objectID": "08_figure_07.html#predictive-capacity-of-models-with-tuned-penalty-across-species",
    "href": "08_figure_07.html#predictive-capacity-of-models-with-tuned-penalty-across-species",
    "title": "Fig. 7 - Tuning for metabolite-species pairs",
    "section": "Predictive capacity of models with tuned penalty across species",
    "text": "Predictive capacity of models with tuned penalty across species\n\npltdf =\n    @chain allmodels_mdlstats begin\n        # select(:metabolite_label, :lambda, :Species, :rsq_by_species, :inter_intra_donor_std)\n        groupby([:metabolite_label, :fold, :resample, :Species])\n        subset(:rsq_by_species =&gt; (x -&gt; x .== maximum(x)))\n        groupby([:metabolite_label, :fold, :resample, :Species])\n        subset(\n            :lambda =&gt; (x -&gt; x .== maximum(x)),\n            :truth_std =&gt; ByRow(&gt;(0)),\n        )\n        groupby([:metabolite_label, :Species])\n        combine(\n            :rsq_by_species =&gt; median,\n            :adj_rsq_by_species =&gt; median,\n            :cor_by_species =&gt; median,\n        )\n    end\nfirst(pltdf, 5)\n\npltdf_speciesspecific =\n    @chain pltdf begin\n        groupby([:metabolite_label])\n        transform!(:rsq_by_species_median =&gt; mean =&gt; s -&gt; s * \"_met_mean\")\n        groupby([:Species])\n        transform!(:rsq_by_species_median =&gt; mean =&gt; s -&gt; s * \"_spe_mean\")\n        sort([:rsq_by_species_median_spe_mean, :rsq_by_species_median_met_mean], rev=true)\n    end;\n\npltdf_predcap_speciesspecific = @chain pltdf_speciesspecific begin\n    groupby(:Species)\n    combine(\n        :rsq_by_species_median =&gt; mean,\n        :cor_by_species_median =&gt; mean,\n    )\nend\n\nplot(\n    size=(1200, 400),\n    leftmargin=5Plots.mm,\n    bottommargin=12Plots.mm,\n    xrotation=30,\n    yflip=true,\n    widen=1.1,\n)\n@df pltdf_speciesspecific scatter!(:metabolite_label, :Species,\n    marker_z=:rsq_by_species_median, clims=(-1, 1),\n    colormap=cgrad([:purple, :white, :green,]),\n    ms=10,\n    xticks=(0.5:length(unique(:metabolite_label)), unique(:metabolite_label)),\n)\n@df subset(pltdf_speciesspecific, :rsq_by_species_median =&gt; ByRow(&lt;(-1))) annotate!(:metabolite_label, :Species, text(\"×\"))\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\nsavefig(joinpath(pdir, \"bubbleplot_best-rsq-by-species-median_foreach-metabolite.pdf\"))\n\n\"/Users/bend/projects/Doran_etal_2023/plots/metabolite_model_outofbag/bubbleplot_best-rsq-by-species-median_foreach-metabolite.pdf\"",
    "crumbs": [
      "Fig. 7 - Tuning for metabolite-species pairs"
    ]
  },
  {
    "objectID": "08_figure_07.html#predictive-capacity-of-models-with-uniform-penalty-across-species",
    "href": "08_figure_07.html#predictive-capacity-of-models-with-uniform-penalty-across-species",
    "title": "Fig. 7 - Tuning for metabolite-species pairs",
    "section": "Predictive capacity of models with uniform penalty across species",
    "text": "Predictive capacity of models with uniform penalty across species\n\npltdf_acrossspecies =\n    @chain allmodels_mdlstats begin\n        # select(:metabolite_label, :lambda, :Species, :rsq_by_species, :inter_intra_donor_std)\n        groupby([:metabolite_label, :fold, :resample, :Species])\n        subset(:full_adj_rsq_mean =&gt; (x -&gt; x .== maximum(x)))\n        groupby([:metabolite_label, :fold, :resample, :Species])\n        subset(\n            :lambda =&gt; (x -&gt; x .== maximum(x)),\n            :truth_std =&gt; ByRow(&gt;(0)),\n        )\n        groupby([:metabolite_label, :Species])\n        combine(\n            :rsq_by_species =&gt; median,\n            :cor_by_species =&gt; median,\n        )\n        leftjoin(pltdf_speciesspecific[!, [:metabolite_label, :Species, :rsq_by_species_median_spe_mean, :rsq_by_species_median_met_mean]], on=[:metabolite_label, :Species])\n        # groupby([:metabolite_label])\n        # transform!(:rsq_by_species_median =&gt; mean =&gt; s -&gt; s * \"_met_mean\")\n        # groupby([:Species])\n        # transform!(:rsq_by_species_median =&gt; mean =&gt; s -&gt; s * \"_spe_mean\")\n        sort([:rsq_by_species_median_spe_mean, :rsq_by_species_median_met_mean], rev=true)\n    end\n\npltdf_predcap_acrossspecies = @chain pltdf_acrossspecies begin\n    groupby(:Species)\n    combine(\n        :rsq_by_species_median =&gt; mean,\n        :cor_by_species_median =&gt; mean,\n    )\nend\n\nplot(\n    size=(1200, 400),\n    leftmargin=5Plots.mm,\n    bottommargin=12Plots.mm,\n    xrotation=30,\n    yflip=true,\n    widen=1.1,\n)\n@df pltdf_acrossspecies scatter!(:metabolite_label, :Species,\n    marker_z=:rsq_by_species_median, clims=(-1, 1),\n    colormap=cgrad([:purple, :white, :green,]),\n    ms=10,\n    xticks=(0.5:length(unique(:metabolite_label)), unique(:metabolite_label)),\n)\n@df subset(pltdf_acrossspecies, :rsq_by_species_median =&gt; ByRow(&lt;(-1))) annotate!(:metabolite_label, :Species, text(\"×\"))\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\nsavefig(joinpath(pdir, \"overallbestlambdamodels_by_lambda_bubble_plot.pdf\"))\n\n\"/Users/bend/projects/Doran_etal_2023/plots/metabolite_model_outofbag/overallbestlambdamodels_by_lambda_bubble_plot.pdf\"\n\n\n\nplot(size=(400, 300), \n    ylabel=\"mean correlation per species\", \n    xrotation=20, \n    leftmargin=5Plots.mm,\n    rightmargin=5Plots.cm,\n    ylims=(0,0.5),\n    widen=true,\n    yticks=[0, 0.25, 0.5]\n)\n@df pltdf_predcap_acrossspecies boxplot!([\"across species\"], :cor_by_species_median_mean, color=:lightgrey)\n@df pltdf_predcap_acrossspecies dotplot!([\"across species\"], :cor_by_species_median_mean, mode=:none, color=:black, msw=0)\n@df pltdf_predcap_speciesspecific boxplot!([\"species specific\"], :cor_by_species_median_mean, color=:lightgrey)\n@df pltdf_predcap_speciesspecific dotplot!([\"species specific\"], :cor_by_species_median_mean, mode=:none, color=:black, msw=0)\n\nxs = [[0.5, 1.9, NaN] for _ in 1:nrow(pltdf_predcap_acrossspecies)] |&gt; \n    x-&gt;reduce(vcat, x);\nys = [[y1, y2, NaN] for (y1, y2) in zip(\n    pltdf_predcap_acrossspecies.cor_by_species_median_mean,\n    pltdf_predcap_speciesspecific.cor_by_species_median_mean,\n)] |&gt; x-&gt;reduce(vcat, x);\nplot!(xs, ys, linewidth=0.25, linestyle=:dash, color=:black)\n\n@df pltdf_predcap_speciesspecific annotate!([2.4], :cor_by_species_median_mean, text.(:Species, :left, 7))\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsavefig(joinpath(pdir, \"mean-correlations-per-species.pdf\"))\n\n\"/Users/bend/projects/Doran_etal_2023/plots/metabolite_model_outofbag/mean-correlations-per-species.pdf\"",
    "crumbs": [
      "Fig. 7 - Tuning for metabolite-species pairs"
    ]
  },
  {
    "objectID": "08_figure_07.html#improvement-of-b.-theta-b.-luti",
    "href": "08_figure_07.html#improvement-of-b.-theta-b.-luti",
    "title": "Fig. 7 - Tuning for metabolite-species pairs",
    "section": "Improvement of B. theta & B. luti",
    "text": "Improvement of B. theta & B. luti\n\nspeciesselection = [\n    \"Blautia luti\",\n    \"Bacteroides thetaiotaomicron\",\n]\npltdf_speciesspecific = @chain allmodels_mdlstats begin\n    # select(:metabolite_label, :lambda, :Species, :rsq_by_species, :inter_intra_donor_std)\n    groupby([:metabolite_label, :fold, :resample, :Species])\n    subset(:rsq_by_species =&gt; (x -&gt; x .== maximum(x)))\n    groupby([:metabolite_label, :fold, :resample, :Species])\n    subset(\n        :lambda =&gt; (x -&gt; x .== maximum(x)),\n        :truth_std =&gt; ByRow(&gt;(0)),\n        :Species =&gt; ByRow(∈(speciesselection))\n    )\n    DataFrames.transform(\n        :strain_level =&gt; (x -&gt; replace(x, NaN =&gt; 0.0)) =&gt; identity,\n    )\n    groupby([:metabolite_label, :Species])\n    combine(\n        :rsq_by_species =&gt; median,\n        :rsq_by_species =&gt; mean,\n        :cor_by_species =&gt; median,\n        :cor_by_species =&gt; mean,\n    )\n    sort(:Species)\nend\n\npltdf_acrossspecies = @chain allmodels_mdlstats begin\n    # select(:metabolite_label, :lambda, :Species, :rsq_by_species, :inter_intra_donor_std)\n    groupby([:metabolite_label, :fold, :resample, :Species])\n    subset(:full_adj_rsq_mean =&gt; (x -&gt; x .== maximum(x)))\n    groupby([:metabolite_label, :fold, :resample, :Species])\n    subset(\n        :lambda =&gt; (x -&gt; x .== maximum(x)),\n        :truth_std =&gt; ByRow(&gt;(0)),\n        :Species =&gt; ByRow(∈(speciesselection))\n    )\n    DataFrames.transform(\n        :strain_level =&gt; (x -&gt; replace(x, NaN =&gt; 0.0)) =&gt; identity,\n    )\n    groupby([:metabolite_label, :Species])\n    combine(\n        :rsq_by_species =&gt; median,\n        :rsq_by_species =&gt; mean,\n        :cor_by_species =&gt; median,\n        :cor_by_species =&gt; mean,\n    )\n    sort(:Species)\nend;\n\n\nplot(size=(250, 400),\n    title=speciesselection[1],\n    titlefontsize=9,\n    leftmargin=5Plots.mm,\n    rightmargin=1Plots.cm,\n    ylabel=\"rsq by species (median)\",\n    # xrotation=10,\n    yticks=[-0.5, -0.25, 0.0, 0.25, 0.5],\n    ylims=(-0.5, 0.5)\n)\n@df filter(:Species =&gt; ==(speciesselection[1]), pltdf_acrossspecies) violin!(\n    [\"uniform λ\"], :rsq_by_species_median,\n    color=:lightgrey,\n    outliers=false,\n)\n\n@df filter(:Species =&gt; ==(speciesselection[1]), pltdf_acrossspecies) dotplot!(\n    [\"uniform λ\"], :rsq_by_species_median,\n    ms=2, msw=0, color=:black, mode=:none,\n)\n@df filter(:Species =&gt; ==(speciesselection[1]), pltdf_speciesspecific) violin!(\n    [\"tuned λ\"], :rsq_by_species_median,\n    color=:lightgrey,\n    outliers=false,\n)\n\n@df filter(:Species =&gt; ==(speciesselection[1]), pltdf_speciesspecific) dotplot!(\n    [\"tuned λ\"], :rsq_by_species_median,\n    ms=2, msw=0, color=:black, mode=:none,\n)\n\nxs = [[0.5, 1.9, NaN] for _ in 1:nrow(filter(:Species =&gt; ==(speciesselection[1]), pltdf_acrossspecies))] |&gt; \n    x-&gt;reduce(vcat, x);\nys = [[y1, y2, NaN] for (y1, y2) in zip(\n    filter(:Species =&gt; ==(speciesselection[1]), pltdf_acrossspecies).rsq_by_species_median,\n    filter(:Species =&gt; ==(speciesselection[1]), pltdf_speciesspecific).rsq_by_species_median,\n)] |&gt; x-&gt;reduce(vcat, x);\nplot!(xs, ys, linewidth=0.25, linestyle=:dash, color=:black)\n\n@df subset(pltdf_speciesspecific,\n    :rsq_by_species_median =&gt; ByRow(&gt;(0.2)),\n    :Species =&gt; ByRow(==(speciesselection[1]))\n) annotate!(\n    [\"tuned λ\"], :rsq_by_species_median, text.(:metabolite_label, :left, 7),\n)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsavefig(joinpath(pdir, \"bluti-rsq_by_species-violins.pdf\"))\n\n\"/Users/bend/projects/Doran_etal_2023/plots/metabolite_model_outofbag/bluti-rsq_by_species-violins.pdf\"\n\n\n\nsubset(pltdf_acrossspecies, \n    :rsq_by_species_median =&gt; ByRow(&lt;(-0.5)), \n    :Species=&gt;ByRow(==(speciesselection[1])))\n\n1×6 DataFrame\n\n\n\nRow\nmetabolite_label\nSpecies\nrsq_by_species_median\nrsq_by_species_mean\ncor_by_species_median\ncor_by_species_mean\n\n\n\nString31\nString?\nFloat64\nFloat64\nFloat64\nFloat64\n\n\n\n\n1\nPropionate\nBlautia luti\n-1.43024\n-7.03868\n0.0\n-0.141891\n\n\n\n\n\n\n\nMannWhitneyUTest(\n    filter(:Species =&gt; ==(speciesselection[1]), pltdf_acrossspecies).rsq_by_species_median,\n    filter(:Species =&gt; ==(speciesselection[1]), pltdf_speciesspecific).rsq_by_species_median,\n)\n\nApproximate Mann-Whitney U test\n-------------------------------\nPopulation details:\n    parameter of interest:   Location parameter (pseudomedian)\n    value under h_0:         0\n    point estimate:          -0.160079\n\nTest summary:\n    outcome with 95% confidence: reject h_0\n    two-sided p-value:           &lt;1e-09\n\nDetails:\n    number of observations in each group: [31, 31]\n    Mann-Whitney-U statistic:             28.0\n    rank sums:                            [524.0, 1429.0]\n    adjustment for ties:                  0.0\n    normal approximation (μ, σ):          (-452.5, 71.0299)\n\n\n\nplot(size=(250, 400),\n    title=speciesselection[2],\n    titlefontsize=9,\n    leftmargin=5Plots.mm,\n    rightmargin=1Plots.cm,\n    ylabel=\"rsq by species (median)\",\n    # xrotation=10,\n    yticks=[-0.5, -0.25, 0.0, 0.25, 0.5],\n    ylims=(-0.5, 0.5)\n)\n@df filter(:Species =&gt; ==(speciesselection[2]), pltdf_acrossspecies) violin!(\n    [\"uniform λ\"], :rsq_by_species_median,\n    color=:lightgrey,\n    outliers=false,\n)\n\n@df filter(:Species =&gt; ==(speciesselection[2]), pltdf_acrossspecies) dotplot!(\n    [\"uniform λ\"], :rsq_by_species_median,\n    ms=2, msw=0, color=:black, mode=:none,\n)\n@df filter(:Species =&gt; ==(speciesselection[2]), pltdf_speciesspecific) violin!(\n    [\"tuned λ\"], :rsq_by_species_median,\n    color=:lightgrey,\n    outliers=false,\n)\n\n@df filter(:Species =&gt; ==(speciesselection[2]), pltdf_speciesspecific) dotplot!(\n    [\"tuned λ\"], :rsq_by_species_median,\n    ms=2, msw=0, color=:black, mode=:none,\n)\n\nxs = [[0.5, 1.9, NaN] for _ in 1:nrow(filter(:Species =&gt; ==(speciesselection[2]), pltdf_acrossspecies))] |&gt; \n    x-&gt;reduce(vcat, x);\nys = [[y1, y2, NaN] for (y1, y2) in zip(\n    filter(:Species =&gt; ==(speciesselection[2]), pltdf_acrossspecies).rsq_by_species_median,\n    filter(:Species =&gt; ==(speciesselection[2]), pltdf_speciesspecific).rsq_by_species_median,\n)] |&gt; x-&gt;reduce(vcat, x);\nplot!(xs, ys, linewidth=0.25, linestyle=:dash, color=:black)\n\n@df subset(pltdf_speciesspecific,\n    :rsq_by_species_median =&gt; ByRow(&gt;(0.2)),\n    :Species =&gt; ByRow(==(speciesselection[2]))\n) annotate!(\n    [\"tuned λ\"], :rsq_by_species_median, text.(:metabolite_label, :left, 7),\n)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsavefig(joinpath(pdir, \"btheta-rsq_by_species-violins.pdf\"))\n\n\"/Users/bend/projects/Doran_etal_2023/plots/metabolite_model_outofbag/btheta-rsq_by_species-violins.pdf\"",
    "crumbs": [
      "Fig. 7 - Tuning for metabolite-species pairs"
    ]
  },
  {
    "objectID": "08_figure_07.html#predictions-for-b.-luti-and-b.-thetaiotaomicron",
    "href": "08_figure_07.html#predictions-for-b.-luti-and-b.-thetaiotaomicron",
    "title": "Fig. 7 - Tuning for metabolite-species pairs",
    "section": "Predictions for B. luti and B. thetaiotaomicron",
    "text": "Predictions for B. luti and B. thetaiotaomicron\n\nmetabolite = \"Phenylacetate\"\nspecies = \"Bacteroides thetaiotaomicron\"\n\npltdf = @chain oof_preds_df_stacked begin\n    leftjoin(biobank.obs[:, [:Strain_ID, :Species]], on=:msk_id =&gt; :Strain_ID)\n    subset(\n        :metabolite_label =&gt; ByRow(==(metabolite)),\n        :Species =&gt; ByRow(==(species)),\n        :lambda =&gt; ByRow(&gt;=(1e-3)),\n    )\n    groupby([:metabolite_label, :resample, :fold, :lambda])\n    transform!(\n        [:preds, :truth] =&gt; ((yhat, y)-&gt;rsquared(yhat, y)) =&gt; :rsq_by_species,\n    )\n    groupby([:resample, :fold])\n    subset(\n        :rsq_by_species =&gt; (x-&gt;x .== maximum(x)),\n    )\n    groupby(:msk_id)\n    combine(\n        :truth =&gt; (only∘unique) =&gt; identity,\n        :preds =&gt; mean,\n        :preds =&gt; std,\n        :rsq_by_species =&gt; mean,\n        nrow,\n    )\nend\n\nplot(\n    size=(400, 400),\n    ratio=1,\n    title=species,\n    xlabel=\"prediction\",\n    ylabel=\"$metabolite (log2FC)\",\n    lims=(6.1,10.5),\n)\nplot!(identity, 6.1, 10.5, c=:grey, linestyle=:dash,)\n@df pltdf scatter!(\n    :preds_mean, :truth,\n    xerror=:preds_std,\n    color=:lightgrey,\n    markersize=10,\n    msw=0.5,\n)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsavefig(joinpath(pdir, \"preds_$species-$metabolite-scatter.pdf\"))\n\n\"/Users/bend/projects/Doran_etal_2023/plots/metabolite_model_outofbag/preds_Bacteroides thetaiotaomicron-Phenylacetate-scatter.pdf\"\n\n\n\nmetabolite = \"Phenylacetate\"\nspecies = \"Blautia luti\"\n\npltdf = @chain oof_preds_df_stacked begin\n    leftjoin(biobank.obs[:, [:Strain_ID, :Species]], on=:msk_id =&gt; :Strain_ID)\n    subset(\n        :metabolite_label =&gt; ByRow(==(metabolite)),\n        :Species =&gt; ByRow(==(species)),\n        :lambda =&gt; ByRow(&gt;=(1e-3)),\n    )\n    groupby([:metabolite_label, :resample, :fold, :lambda])\n    transform!(\n        [:preds, :truth] =&gt; ((yhat, y) -&gt; rsquared(yhat, y)) =&gt; :rsq_by_species,\n    )\n    groupby([:resample, :fold])\n    subset(\n        :rsq_by_species =&gt; (x -&gt; x .== maximum(x)),\n    )\n    groupby(:msk_id)\n    combine(\n        :truth =&gt; (only ∘ unique) =&gt; identity,\n        :preds =&gt; mean,\n        :preds =&gt; std,\n        :rsq_by_species =&gt; median,\n        nrow,\n    )\nend\n\nplot(\n    size=(400, 400),\n    ratio=1,\n    title=species,\n    xlabel=\"prediction\",\n    ylabel=\"$metabolite (log2FC)\",\n    lims=(-4.1, 4.1)\n)\nplot!(identity, -4, 4, c=:grey, linestyle=:dash,)\n@df pltdf scatter!(\n    :preds_mean, :truth,\n    xerror=:preds_std,\n    color=:lightgrey,\n    markersize=10,\n    msw=0.5,\n)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsavefig(joinpath(pdir, \"preds_$species-$metabolite-scatter.pdf\"))\n\n\"/Users/bend/projects/Doran_etal_2023/plots/metabolite_model_outofbag/preds_Blautia luti-Phenylacetate-scatter.pdf\"",
    "crumbs": [
      "Fig. 7 - Tuning for metabolite-species pairs"
    ]
  },
  {
    "objectID": "08_figure_07.html#predictive-capacity-compared-to-seperability-index",
    "href": "08_figure_07.html#predictive-capacity-compared-to-seperability-index",
    "title": "Fig. 7 - Tuning for metabolite-species pairs",
    "section": "Predictive capacity compared to Seperability index",
    "text": "Predictive capacity compared to Seperability index\n\npltdf = @chain allmodels_mdlstats begin\n    # select(:metabolite_label, :lambda, :Species, :rsq_by_species, :inter_intra_donor_std)\n    groupby([:metabolite_label, :fold, :resample, :Species])\n    subset(:adj_rsq_by_species =&gt; (x -&gt; x .== maximum(x)))\n    groupby([:metabolite_label, :fold, :resample, :Species])\n    subset(:lambda =&gt; (x -&gt; x .== maximum(x)))\nend\nfirst(pltdf, 5)\n\n5×24 DataFrame\n\n\n\nRow\nmetabolite_label\nfold\nresample\nlambda\nSpecies\nfull_adj_rsq_mean\ncor_mean\ndegrees_freedom\norig_degrees_freedom\ndonor_count\nstrain_level\nstrain_count\ntruth_std\ntruth_var\ndonor_entropy\nrsq_by_species\ncor_by_species\ntruth_mean_by_donor_var\ntruth_mean_by_donor_std\ntruth_var_by_donor_mean\ntruth_std_by_donor_mean\nadj_rsq_by_species\ninter_intra_donor_var\ninter_intra_donor_std\n\n\n\nString31\nInt64?\nInt64?\nFloat64\nString?\nFloat64\nFloat64\nInt64\nFloat64\nInt64\nFloat64\nInt64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\n\n\n\n\n1\nPropionate\n2\n1\n0.001\nBlautia luti\n-0.919329\n0.681237\n183\n266.0\n1\n0.863388\n6\n0.266356\n0.0709453\n1.38629\n0.644054\n0.846104\n0.063884\n0.252753\n0.0117689\n0.0626335\n-0.150313\n1.87242\n1.88705\n\n\n2\nTyrosine\n2\n1\n0.001\n[Eubacterium] rectale\n-1.05332\n0.0986314\n40\n266.0\n1\n0.9\n5\n0.00350649\n1.22955e-5\n1.03972\n0.948215\n1.0\n1.22955e-5\n0.00350649\n0.0\n0.0\n0.939008\n0.00226876\n0.534889\n\n\n3\n3-Aminoisobutyrate\n4\n1\n0.001\n[Ruminococcus] gnavus\n-0.758182\n0.337002\n68\n266.0\n1\n0.882353\n10\n0.789612\n0.623488\n0.950271\n0.619201\n1.0\n0.0692764\n0.263204\n0.623488\n0.55834\n0.487758\n-3.03373\n-1.06281\n\n\n4\nHexanoate\n4\n1\n0.001\nBifidobacterium breve\n-2.12527\n0.400357\n176\n266.0\n1\n0.909091\n6\n0.102369\n0.0104793\n-0.0\n0.16437\n0.50551\n0.0\n0.0\n0.0104793\n0.102369\n-1.48811\n-1.22734\n-3.81795\n\n\n5\n3-Aminoisobutyrate\n1\n2\n0.001\n[Ruminococcus] gnavus\n-0.758182\n0.337002\n61\n266.0\n1\n0.918033\n11\n0.80168\n0.642691\n1.93133\n0.346946\n0.717295\n0.292108\n0.540471\n0.39839\n0.425542\n0.15167\n-0.437616\n0.339372\n\n\n\n\n\n\n\n## Fisher's exact tests ##\n\n# top right\nnull_val = nrow(pltdf) * (mean(&gt;(0), pltdf.adj_rsq_by_species) * mean(&gt;(0), pltdf.inter_intra_donor_std))\npoint_est = sum(pltdf.adj_rsq_by_species .&gt; 0.0 .&& pltdf.inter_intra_donor_std .&gt; 0)\nse = sqrt(null_val)\nzval = (point_est - null_val) / se\np1 = (1 - cdf(Normal(), zval)) * 2 * 4\n\n# top left\nnull_val = nrow(pltdf) * (mean(&gt;(0), pltdf.adj_rsq_by_species) * mean(&lt;(0), pltdf.inter_intra_donor_std))\npoint_est = sum(pltdf.adj_rsq_by_species .&gt; 0.0 .&& pltdf.inter_intra_donor_std .&lt; 0)\nse = sqrt(null_val)\nzval = (point_est - null_val) / se\np2 = (1 - cdf(Normal(), abs(zval))) * 2 * 4\n\n# bottom right\nnull_val = nrow(pltdf) * (mean(&lt;(0), pltdf.adj_rsq_by_species) * mean(&lt;(0), pltdf.inter_intra_donor_std))\npoint_est = sum(pltdf.adj_rsq_by_species .&lt; 0.0 .&& pltdf.inter_intra_donor_std .&lt; 0)\nse = sqrt(null_val)\nzval = (point_est - null_val) / se\np3 = (1 - cdf(Normal(), abs(zval))) * 2 * 4\n\n# bottom left\nnull_val = nrow(pltdf) * (mean(&lt;(0), pltdf.adj_rsq_by_species) * mean(&gt;(0), pltdf.inter_intra_donor_std))\npoint_est = sum(pltdf.adj_rsq_by_species .&lt; 0.0 .&& pltdf.inter_intra_donor_std .&gt; 0)\nse = sqrt(null_val)\nzval = (point_est - null_val) / se\np4 = (1 - cdf(Normal(), abs(zval))) * 2 * 4\n\n# all pvalues\n@show (p1, p2, p3, p4);\n\n(p1, p2, p3, p4) = (1.6814441720747197e-5, 0.0020987182166916085, 0.5621612992718159, 0.20214978341148448)\n\n\n\nplot(\n    ylabel=\"best adj r² by (met+species+fold)\",\n    xlabel=\"log2(inter donor std / intra donor std)\",\n    colorbartitle=\"log2(inter donor std / intra donor std)\",\n    # colorbartitle=\"lambda\",\n    ylims=(-1, 1),\n    widen=true,\n    size=(550, 500),\n    margin=5Plots.mm,\n    format=:png,\n    dpi=150,\n)\nvline!([0], linestyle=:dash, c=:grey)\nhline!([0], linestyle=:dash, c=:grey)\n@df pltdf scatter!(:inter_intra_donor_std, :adj_rsq_by_species,\n    ms=2, markerstrokewidth=0.1, marker_z=:inter_intra_donor_std,\n    clims=getlims(:inter_intra_donor_std),\n    c=:vik,\n\n    # marker_z=log10.(:lambda), \n    # c=:viridis,\n)\nannotate!(8, 1, text(\"enriched\\npval=$(@sprintf(\"%.0e\", p1))\", 6))\nannotate!(-7.8, 1, text(\"depleted\\npval=$(@sprintf(\"%.0e\", p2))\", 6))\nannotate!(8, -1, text(\"n.s.\", 6))\nannotate!(-8, -1, text(\"n.s.\", 6))\nhline!([-1.06])",
    "crumbs": [
      "Fig. 7 - Tuning for metabolite-species pairs"
    ]
  },
  {
    "objectID": "08_figure_07.html#luti-and-breve-hamming-distance",
    "href": "08_figure_07.html#luti-and-breve-hamming-distance",
    "title": "Fig. 7 - Tuning for metabolite-species pairs",
    "section": "Luti and Breve hamming distance",
    "text": "Luti and Breve hamming distance\n\nlog10p1(x) = log10(x + 1)\n\nlog10p1 (generic function with 1 method)\n\n\n\nlutisubset = biobank[strvarobs.Strain_ID[strvarobs.Species.==\"Blautia luti\"], :]\nbrevesubset = biobank[strvarobs.Strain_ID[strvarobs.Species.==\"Bifidobacterium breve\"], :]\nthetasubset = biobank[strvarobs.Strain_ID[strvarobs.Species.==\"Bacteroides thetaiotaomicron\"], :]\n\nMuData object 35 ✕ 21475\n└ metabolites_foldchange\n  AnnData object 35 ✕ 50\n└ oggs\n  AnnData object 35 ✕ 11248\n└ UPorder_oggs\n  AnnData object 35 ✕ 10177\n\n\n\nluti_Hij = pairwise(Cityblock(), lutisubset[\"oggs\"].X[:,:] .&gt; 0, dims=1)\ntheta_Hij = pairwise(Cityblock(), thetasubset[\"oggs\"].X[:,:] .&gt; 0, dims=1)\nbreve_Hij = pairwise(Cityblock(), brevesubset[\"oggs\"].X[:,:] .&gt; 0, dims=1);\n\n\nuptri = triu(trues(size(breve_Hij)), 1);\n\n\nluti_Hij = pairwise(Cityblock(), lutisubset[\"oggs\"].X[:,:], dims=1)\ntheta_Hij = pairwise(Cityblock(), thetasubset[\"oggs\"].X[:,:], dims=1)\nbreve_Hij = pairwise(Cityblock(), brevesubset[\"oggs\"].X[:,:], dims=1);\n\nbinedges = range(0, log10(maximum(luti_Hij)), length=30);\nplot(\n    size=(400, 300),\n    xticks=(0:3, [1, 10, 100, 1000]),\n    xlabel=\"OGG distance (log scale)\",\n    ylabel=\"count\",\n    # yscale=log10,\n    rightmargin=5Plots.mm\n)\nhistogram!(log10p1.(theta_Hij[triu(trues(size(theta_Hij)), 1)]),\n    bins=binedges,\n    alpha=0.5,\n    label=\"theta\",\n    c=:green,\n    lw=0.5\n)\nhistogram!(log10p1.(breve_Hij[triu(trues(size(breve_Hij)), 1)]),\n    bins=binedges,\n    alpha=0.5,\n    label=\"breve\",\n    c=:tomato2,\n    lw=0.5\n)\n# histogram!(log10p1.(luti_Hij[triu(trues(size(luti_Hij)), 1)]),\n#     bins=binedges,\n#     alpha=0.5,\n#     label=\"luti\",\n#     c=:purple,\n#     lw=0.5\n# )\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsavefig(joinpath(pdir, \"ogg_distance_abundence-theta-breve-histogram.pdf\"))\n\n\"/Users/bend/projects/Doran_etal_2023/plots/metabolite_model_outofbag/ogg_distance_abundence-theta-breve-histogram.pdf\"",
    "crumbs": [
      "Fig. 7 - Tuning for metabolite-species pairs"
    ]
  },
  {
    "objectID": "08_figure_07.html#distribution-of-inter-vs.-intra-donor-distances",
    "href": "08_figure_07.html#distribution-of-inter-vs.-intra-donor-distances",
    "title": "Fig. 7 - Tuning for metabolite-species pairs",
    "section": "distribution of inter vs. intra donor distances",
    "text": "distribution of inter vs. intra donor distances\n\nstrvar = biobank[biobank.obs.kept_species, :]\n\nMuData object 356 ✕ 21475\n└ metabolites_foldchange\n  AnnData object 356 ✕ 50\n└ oggs\n  AnnData object 356 ✕ 11248\n└ UPorder_oggs\n  AnnData object 356 ✕ 10177\n\n\n\nouter(f, x) = f.(x, permutedims(x))\n\nouter (generic function with 1 method)\n\n\n\nstrvar_oggdists = pairwise(Cityblock(), strvar[\"oggs\"].X[:,:], dims=1)\nuptri = triu(trues(size(strvar_oggdists)), 1)\nintradonor_mask = uptri .&& outer(==, strvar.obs.Species) .&& outer(==, strvar.obs.Donor)\ninterdonor_mask = uptri .&& outer(==, strvar.obs.Species) .&& outer(!=, strvar.obs.Donor);\n\n\nbinedges = range(0, maximum(strvar_oggdists[interdonor_mask]), length=50);\nplot(\n    size=(400, 300),\n    # xticks=(0:3, [1, 10, 100, 1000]),\n    xlabel=\"OGG distance\",\n    ylabel=\"count\",\n    # yscale=:log10,\n)\nhistogram!(strvar_oggdists[interdonor_mask],\n    bins=binedges,\n    alpha=0.5,\n    label=\"inter (n=$(length(strvar_oggdists[interdonor_mask])))\",\n    c=:violet,\n    lw=0.5\n)\nhistogram!(strvar_oggdists[intradonor_mask],\n    bins=binedges,\n    alpha=0.5,\n    label=\"intra (n=$(length(strvar_oggdists[intradonor_mask])))\",\n    c=:yellow,\n    lw=0.5\n)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsavefig(joinpath(pdir, \"inter-intra-donor_histogram_oggdistance.pdf\"))\n\n\"/Users/bend/projects/Doran_etal_2023/plots/metabolite_model_outofbag/inter-intra-donor_histogram_oggdistance.pdf\"",
    "crumbs": [
      "Fig. 7 - Tuning for metabolite-species pairs"
    ]
  },
  {
    "objectID": "08_figure_07.html#panel-a",
    "href": "08_figure_07.html#panel-a",
    "title": "Fig. 7 - Tuning for metabolite-species pairs",
    "section": "Panel A",
    "text": "Panel A\n\npltdf_speciesspecific = @chain allmodels_mdlstats begin\n    # select(:metabolite_label, :lambda, :Species, :rsq_by_species, :inter_intra_donor_std)\n    groupby([:metabolite_label, :fold, :resample, :Species])\n    subset(:rsq_by_species =&gt; (x -&gt; x .== maximum(x)))\n    groupby([:metabolite_label, :fold, :resample, :Species])\n    subset(\n        :lambda =&gt; (x -&gt; x .== maximum(x)),\n        :truth_std =&gt; ByRow(&gt;(0)),\n    )\n    DataFrames.transform(\n        :strain_level =&gt; (x -&gt; replace(x, NaN =&gt; 0.0)) =&gt; identity,\n    )\n    groupby([:metabolite_label, :Species])\n    combine(\n        :rsq_by_species =&gt; median,\n        :strain_level =&gt; median,\n        :strain_level =&gt; mean,\n        :strain_level =&gt; std,\n    )\nend\n\npltdf_acrossspecies = @chain allmodels_mdlstats begin\n    # select(:metabolite_label, :lambda, :Species, :rsq_by_species, :inter_intra_donor_std)\n    groupby([:metabolite_label, :fold, :resample])\n    subset(:full_adj_rsq_mean =&gt; (x -&gt; x .== maximum(x)))\n    groupby([:metabolite_label, :fold, :resample])\n    subset(\n        # :Species =&gt; (only ∘ unique)\n        :lambda =&gt; (x -&gt; x .== maximum(x)),\n        :truth_std =&gt; ByRow(&gt;(0)),\n    )\n    DataFrames.transform(\n        :strain_level =&gt; (x -&gt; replace(x, NaN =&gt; 0.0)) =&gt; identity,\n    )\n    groupby([:metabolite_label, :Species])\n    combine(\n        :lambda =&gt; (only ∘ unique) =&gt; identity,\n        :rsq_by_species =&gt; median,\n        :strain_level =&gt; median,\n        :strain_level =&gt; mean,\n        :strain_level =&gt; std,\n    )\n    sort([:strain_level_mean], rev=true)\nend\n\n345×7 DataFrame320 rows omitted\n\n\n\nRow\nmetabolite_label\nSpecies\nlambda\nrsq_by_species_median\nstrain_level_median\nstrain_level_mean\nstrain_level_std\n\n\n\nString31\nString?\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\n\n\n\n\n1\nTryptamine\nBlautia luti\n0.20893\n-0.395397\n0.85\n0.849135\n0.0649174\n\n\n2\nTryptamine\nBacteroides thetaiotaomicron\n0.20893\n-0.553909\n0.846053\n0.846038\n0.0584215\n\n\n3\n3-Aminoisobutyrate\nBlautia wexlerae\n0.144544\n-0.174158\n0.846154\n0.843771\n0.0281707\n\n\n4\n3-Aminoisobutyrate\nPhocaeicola vulgatus\n0.144544\n-0.0442551\n0.846154\n0.841862\n0.0359807\n\n\n5\n3-Aminoisobutyrate\nAnaerostipes hadrus\n0.144544\n-0.0298063\n0.846154\n0.841862\n0.0359807\n\n\n6\n3-Aminoisobutyrate\nBacteroides uniformis\n0.144544\n-0.206939\n0.846154\n0.841637\n0.0369521\n\n\n7\nSerine\n[Ruminococcus] gnavus\n0.229087\n-0.166372\n0.857143\n0.839978\n0.0611798\n\n\n8\nSerine\nPhocaeicola vulgatus\n0.229087\n-0.336131\n0.857143\n0.839978\n0.0611798\n\n\n9\nSerine\n[Eubacterium] rectale\n0.229087\n-9.85713\n0.857143\n0.839978\n0.0611798\n\n\n10\nSerine\nBlautia luti\n0.229087\n-0.158501\n0.857143\n0.839978\n0.0611798\n\n\n11\nSerine\nBacteroides uniformis\n0.229087\n-0.636657\n0.857143\n0.839978\n0.0611798\n\n\n12\nSerine\nDorea formicigenerans\n0.229087\n-1.30777\n0.857143\n0.839978\n0.0611798\n\n\n13\nSerine\nCoprococcus comes\n0.229087\n-0.67477\n0.857143\n0.839978\n0.0611798\n\n\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n\n\n334\nGlycine\nBlautia wexlerae\n0.20893\n-0.0726989\n0.5\n0.391667\n0.260875\n\n\n335\nLysine\n[Ruminococcus] gnavus\n0.363078\n-0.0425578\n0.0\n0.05\n0.223607\n\n\n336\nLysine\nPhocaeicola vulgatus\n0.363078\n-0.040018\n0.0\n0.05\n0.223607\n\n\n337\nLysine\n[Eubacterium] rectale\n0.363078\n-1.55056\n0.0\n0.05\n0.223607\n\n\n338\nLysine\nBlautia luti\n0.363078\n-0.0328099\n0.0\n0.05\n0.223607\n\n\n339\nLysine\nBacteroides uniformis\n0.363078\n-0.390148\n0.0\n0.05\n0.223607\n\n\n340\nLysine\nDorea formicigenerans\n0.363078\n-0.223439\n0.0\n0.05\n0.223607\n\n\n341\nLysine\nCoprococcus comes\n0.363078\n-0.271779\n0.0\n0.05\n0.223607\n\n\n342\nLysine\nBifidobacterium breve\n0.363078\n-9.22684\n0.0\n0.05\n0.223607\n\n\n343\nLysine\nAnaerostipes hadrus\n0.363078\n-0.479089\n0.0\n0.05\n0.223607\n\n\n344\nLysine\nBacteroides thetaiotaomicron\n0.363078\n-0.189215\n0.0\n0.05\n0.223607\n\n\n345\nLysine\nBlautia wexlerae\n0.363078\n-0.0578429\n0.0\n0.05\n0.223607\n\n\n\n\n\n\n\nplot(size=(300, 400), \n    ylabel=\"fraction strain level branches\",\n    legend=:bottomleft,\n    legendfontsize=6,\n)\n@df pltdf_acrossspecies violin!(\n    [\"strain level branches\"], \n    :strain_level_mean, side=:left, alpha=0.5,\n    fillcolor=:lightgrey,\n    label=\"uniform λ\",\n)\n@df pltdf_speciesspecific violin!(\n    [\"strain level branches\"],\n    :strain_level_mean, side=:right, alpha=0.5,\n    fillcolor=:grey,\n    label=\"tuned λ\",\n)\n@df pltdf_acrossspecies dotplot!(\n    [\"strain level branches\"], :strain_level_mean, \n    side=:left,\n    color=:black, msw=0, ms=1,\n)\n@df pltdf_speciesspecific dotplot!(\n    [\"strain level branches\"], :strain_level_mean, \n    side=:right,\n    color=:black, msw=0, ms=1,\n)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsavefig(joinpath(pdir, \"full_strain-level-violinplot.pdf\"))\n\n\"/Users/bend/projects/Doran_etal_2023/plots/metabolite_model_outofbag/full_strain-level-violinplot.pdf\"\n\n\n\ntestresult = MannWhitneyUTest(pltdf_acrossspecies.strain_level_mean, pltdf_speciesspecific.strain_level_mean)\n\nApproximate Mann-Whitney U test\n-------------------------------\nPopulation details:\n    parameter of interest:   Location parameter (pseudomedian)\n    value under h_0:         0\n    point estimate:          -0.0136667\n\nTest summary:\n    outcome with 95% confidence: reject h_0\n    two-sided p-value:           &lt;1e-05\n\nDetails:\n    number of observations in each group: [345, 345]\n    Mann-Whitney-U statistic:             47920.0\n    rank sums:                            [107605.0, 130790.0]\n    adjustment for ties:                  37362.0\n    normal approximation (μ, σ):          (-11592.5, 2617.84)\n\n\n\nmetabolites_ordered = unique(pltdf_acrossspecies.metabolite_label);\n\n\nps = []\nfor met_label in metabolites_ordered\n    p = plot(ytickfontsize=7)\n    @df pltdf_acrossspecies violin!(\n        [met_label],\n        :strain_level_mean, side=:left, alpha=0.5,\n        fillcolor=:lightgrey,\n        # label=\"uniform λ\",\n    )\n    @df pltdf_speciesspecific violin!(\n        [met_label],\n        :strain_level_mean, side=:right, alpha=0.5,\n        fillcolor=:grey,\n        # label=\"tuned λ\",\n    )\n    @df filter(:metabolite_label =&gt; ==(met_label), pltdf_acrossspecies) dotplot!(\n        [0.42],\n        :strain_level_mean, side=:left, alpha=0.5,\n        msw=0, ms=3, mc=:pink,\n        mode=:none,\n        # label=\"uniform λ\",\n    )\n    @df filter(:metabolite_label =&gt; ==(met_label), pltdf_speciesspecific) dotplot!(\n        [0.58],\n        :strain_level_mean, side=:right, alpha=0.5,\n        msw=0, ms=3, mc=:red,\n        mode=:none,\n        # label=\"tuned λ\",\n    )\n    push!(ps, p)\nend\n\n\nplot(ps..., layout=grid(4, 8), size=(1000,600))\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsavefig(joinpath(pdir, \"strain-level-branches_facetviolins.pdf\"))\n\n\"/Users/bend/projects/Doran_etal_2023/plots/metabolite_model_outofbag/strain-level-branches_facetviolins.pdf\"",
    "crumbs": [
      "Fig. 7 - Tuning for metabolite-species pairs"
    ]
  },
  {
    "objectID": "08_figure_07.html#panel-b",
    "href": "08_figure_07.html#panel-b",
    "title": "Fig. 7 - Tuning for metabolite-species pairs",
    "section": "Panel B",
    "text": "Panel B\n\nmdlstatsdf_meansdf =\n    @chain mdlstatsdf begin\n        subset(:lambda =&gt; ByRow(&gt;=(1e-3)))\n        groupby([:metabolite_label, :lambda])\n        combine(\n            5:13 .=&gt; mean,\n            5:13 .=&gt; std,\n        )\n    end;\n\n\nshannon(x) = x |&gt; countmap |&gt; values |&gt; x -&gt; x ./ maximum(x) |&gt; entropy\n\nallmodels_oofpreds =\n    @chain mdlstatsdf_meansdf begin\n        sort(:rsq_adj_mean, rev=true)\n        select([:metabolite_label, :lambda, :rsq_adj_mean])\n        leftjoin(oof_preds_df_stacked, on=[:metabolite_label, :lambda])\n        leftjoin(mdlstatsdf_stacked, on=[:metabolite_label, :lambda, :fold, :resample])\n        leftjoin(select(biobank.obs, [:Strain_ID, :Species, :Donor]), on=:msk_id =&gt; :Strain_ID)\n    end\n\nallmodels_mdlstats =\n    @chain allmodels_oofpreds begin\n        groupby([:metabolite_label, :fold, :resample, :lambda, :Species, :Donor])\n        transform!(\n            :truth =&gt; var =&gt; :truth_var_by_donor,\n            :truth =&gt; std =&gt; :truth_std_by_donor,\n            :truth =&gt; mean =&gt; :truth_mean_by_donor,\n            :Donor =&gt; (length ∘ unique) =&gt; :donor_count\n        )\n        groupby([:metabolite_label, :fold, :resample, :lambda, :Species])\n        combine(\n            :rsq_adj_mean =&gt; (only ∘ unique) =&gt; :full_adj_rsq_mean,\n            :degrees_freedom =&gt; (only ∘ unique) =&gt; identity,\n            :orig_degrees_freedom =&gt; (only ∘ unique) =&gt; identity,\n            :donor_count =&gt; (only ∘ unique) =&gt; identity,\n            nrow =&gt; :strain_count,\n            :truth =&gt; std,\n            :truth =&gt; var,\n            :Donor =&gt; shannon =&gt; :donor_entropy,\n            [:preds, :truth] =&gt; ((yhat, y) -&gt; rsquared(yhat, y)) =&gt; :rsq_by_species,\n            :truth_mean_by_donor =&gt; var,\n            :truth_mean_by_donor =&gt; std,\n            :truth_var_by_donor =&gt; (x -&gt; mean(replace(x, NaN =&gt; 0.0))) =&gt; :truth_var_by_donor_mean,\n            :truth_std_by_donor =&gt; (x -&gt; mean(replace(x, NaN =&gt; 0.0))) =&gt; :truth_std_by_donor_mean,\n        )\n        transform!(\n            [:rsq_by_species, :orig_degrees_freedom, :degrees_freedom] =&gt; ByRow((r, n, d) -&gt; adjust_rsquared(r, n, d)) =&gt; :adj_rsq_by_species,\n            [:truth_mean_by_donor_var, :truth_var_by_donor_mean] =&gt; ByRow((x, y) -&gt; log2((x + 1 / 2^7) / (y + 1 / 2^7))) =&gt; :inter_intra_donor_var,\n            [:truth_mean_by_donor_std, :truth_std_by_donor_mean] =&gt; ByRow((x, y) -&gt; log2((x + 1 / 2^7) / (y + 1 / 2^7))) =&gt; :inter_intra_donor_std,\n        )\n    end;\n\n\nbestlambdamodels_uniform = @chain mdlstatsdf_meansdf begin\n    groupby(:metabolite_label)\n    subset(:rsq_adj_mean =&gt; (x -&gt; x .== maximum(x)))\nend;\n\n\nbestlambdamodels_tuned_by_species = @chain allmodels_mdlstats begin\n    @groupby([:metabolite_label, :Species, :fold, :resample])\n    @subset(:rsq_by_species .== maximum(:rsq_by_species))\n    @groupby([:metabolite_label, :Species, :fold, :resample])\n    @subset(:lambda .== maximum(:lambda), :truth_std .&gt; 0)\n    @groupby([:metabolite_label, :Species])\n    # @subset(:rsq_by_species .== median(:rsq_by_species))\n    @combine(\n        :mean_predictive_capacity = mean(:rsq_by_species),\n        :rsq_by_species = median(:rsq_by_species),\n        :mean_lambda = mean(:lambda),\n        :max_lambda = maximum(:lambda),\n    )\n    # @rsubset(isfinite(:median_rsq))\n    @groupby(:metabolite_label)\n    @transform(:mean_median_rsq_by_metabolite = mean(:rsq_by_species))\n    @groupby(:Species)\n    @transform(:mean_median_rsq_by_species = mean(:rsq_by_species))\n    sort([:mean_median_rsq_by_species, :mean_median_rsq_by_metabolite], rev=true)\nend;\n\n\nplot(\n    size=(600, 300),\n    xlims=(-3, 0),\n    margin=5Plots.mm,\n    # yticks=0:3:6\n    xticks=(-3:0, [LaTeXString(\"10^{$i}\") for i in -3:0]),\n    xlabel=\"Mean optimal λ\",\n    ylabel=\"Number of models\",\n    legend=:left\n)\nhistogram!(log10.(bestlambdamodels_tuned_by_species.mean_lambda), bins=-3:0.1:0, c=:lightgrey,\n    label=\"Tuned λ\\n(n=$(nrow(bestlambdamodels_tuned_by_species)))\",\n)\nhistogram!(log10.(bestlambdamodels_uniform.lambda), bins=-3:0.1:0, c=:orange,\n    label=\"Uniform λ\\n(n=$(nrow(bestlambdamodels_uniform)))\"\n)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsavefig(joinpath(pdir, \"optimized-lambda-tuned-vs-uniform-models.pdf\"))\n\n\"/Users/bend/projects/Doran_etal_2023/plots/metabolite_model_outofbag/optimized-lambda-tuned-vs-uniform-models.pdf\"",
    "crumbs": [
      "Fig. 7 - Tuning for metabolite-species pairs"
    ]
  },
  {
    "objectID": "00_setup_data.html",
    "href": "00_setup_data.html",
    "title": "Setting up data",
    "section": "",
    "text": "# setup for local file handling\nusing DrWatson\n@quickactivate projectdir()\n\n# load extra libraries\nusing CSV, DataFrames, Muon, MAT\nusing StatsBase\ninclude(srcdir(\"helpers.jl\"))\n\ngetlims (generic function with 2 methods)\nInstall & Setup R packages\nimport CondaPkg; \nCondaPkg.activate!(ENV);\nusing RCall\n\nR\"\"\"\noptions(repos=c(CRAN=\"https://repo.miserver.it.umich.edu/cran\"))\ninstall.packages(\"tidyverse\")\ninstall.packages(\"ggplot2\")\ninstall.packages(\"ape\")\n\nif (!require(\"BiocManager\", quietly = TRUE)) {\n    install.packages(\"BiocManager\")\n}\n\nBiocManager::install(\"treeio\")\nBiocManager::install(\"ggtree\")\n\"\"\"\nCheck R packages\n# Check loading package works\nR\"\"\"\nlibrary(ape)\nlibrary(treeio)\nlibrary(ggtree)\nlibrary(ggplot2)\nlibrary(tidyverse)\n\nsetwd($(projectdir()))\n\"\"\";\nbbdir = datadir(\"exp_raw\", \"BB669\")\nupdir = datadir(\"exp_raw\", \"UP7047\")\n\n\"/Users/bend/projects/Doran_etal_2023/data/exp_raw/UP7047\"",
    "crumbs": [
      "Setting up data"
    ]
  },
  {
    "objectID": "00_setup_data.html#read-in-the-uniprot-data-and-associated-metadata.",
    "href": "00_setup_data.html#read-in-the-uniprot-data-and-associated-metadata.",
    "title": "Setting up data",
    "section": "Read in the UniProt data and associated metadata.",
    "text": "Read in the UniProt data and associated metadata.\nThe main data is a count matrix of 7047 bacterial strains described by 10,177 Orthologous Gene Groups (OGGs). Each element of the matrix shows the number (count) of sequences in the strain that belong to that OGG. Along with this are associated metadata for each strain and each orthologous gene group.\n\nuniprot = readh5ad(joinpath(updir, \"2020_02_UP7047.h5ad\"))\n\nAnnData object 7047 ✕ 10177\n\n\n\n# count matrix\nuniprot.X[1:5, 1:5]\n\n5×5 Matrix{Float64}:\n 1.0  0.0  1.0  2.0  1.0\n 1.0  0.0  1.0  2.0  0.0\n 1.0  0.0  1.0  3.0  1.0\n 0.0  0.0  0.0  0.0  0.0\n 1.0  0.0  1.0  2.0  0.0\n\n\n\nfirst(uniprot.obs, 5)\n\n5×17 DataFrame\n\n\n\nRow\nproteomeID\nTaxID\nProteome_ID\nTax_ID\nOSCODE\nSUPERREGNUM\nx__1_\nx__2_\nx__3_\nSpeciesName\nKingdom\nPhylum\nClass\nOrder\nFamily\nGenus\nSpecies\n\n\n\nString\nInt64\nString\nInt64\nString\nString\nInt64\nInt64\nInt64\nString\nString\nString\nString\nString\nString\nString\nString\n\n\n\n\n1\nUP000283387\n1261403\nUP000283387\n1261403\n\nbacteria\n4641\n0\n4643\nMangrovibacterium diazotrophicum\nBacteria\nBacteroidetes\nBacteroidia\nMarinilabiliales\nProlixibacteraceae\nMangrovibacterium\nMangrovibacterium diazotrophicum\n\n\n2\nUP000181985\n1897729\nUP000181985\n1897729\n\nbacteria\n3147\n0\n3150\nHalomonas aestuarii\nBacteria\nProteobacteria\nGammaproteobacteria\nOceanospirillales\nHalomonadaceae\nHalomonas\nHalomonas aestuarii\n\n\n3\nUP000220675\n1962403\nUP000220675\n1962403\n\nbacteria\n4593\n0\n4595\nNovosphingobium sp. PC22D\nBacteria\nProteobacteria\nAlphaproteobacteria\nSphingomonadales\nSphingomonadaceae\nNovosphingobium\nNovosphingobium sp. PC22D\n\n\n4\nUP000013137\n1188234\nUP000013137\n1188234\n\nbacteria\n601\n0\n601\nMycoplasma alkalescens 14918\nBacteria\nTenericutes\nMollicutes\nMycoplasmatales\nMycoplasmataceae\nMycoplasma\nMycoplasma alkalescens\n\n\n5\nUP000067399\n1303921\nUP000067399\n1303921\n\nbacteria\n1467\n0\n1471\nendosymbiont of Bathymodiolus septemdierum str. Myojin knoll\nBacteria\nProteobacteria\nGammaproteobacteria\n\n\n\nBathymodiolus septemdierum thioautotrophic gill symbiont\n\n\n\n\n\n\n\nfirst(uniprot.var, 5)\n\n5×6 DataFrame\n\n\n\nRow\nog\nlevel\nnm\ndescription\nCOG_categories\nOG_ID\n\n\n\nString\nInt64\nInt64\nString\nString\nString\n\n\n\n\n1\nCOG0001\n2\n4694\nglutamate-1-semialdehyde 2,1-aminomutase activity\nH\nCOG0001@2\n\n\n2\nCOG0003\n2\n2423\nPfam Anion-transporting ATPase\nP\nCOG0003@2\n\n\n3\nCOG0002\n2\n3957\nN-acetyl-gamma-glutamyl-phosphate reductase activity\nE\nCOG0002@2\n\n\n4\nCOG0004\n2\n5256\nammonium transporteR\nP\nCOG0004@2\n\n\n5\nCOG0005\n2\n3783\npurine-nucleoside phosphorylase activity\nF\nCOG0005@2",
    "crumbs": [
      "Setting up data"
    ]
  },
  {
    "objectID": "00_setup_data.html#read-in-biobank-data-make-unified-dataset",
    "href": "00_setup_data.html#read-in-biobank-data-make-unified-dataset",
    "title": "Setting up data",
    "section": "Read in Biobank data & make unified dataset",
    "text": "Read in Biobank data & make unified dataset\nThe BioBank (aka: Commensal Strain Bank, aka: CSB) is the strain bank we collected. It comprises 669 strains that have at least 1% distinct sequence identity to any other strain in the BioBank (i.e. we removed clonal duplicates).\nAll these strains were whole genome sequenced. And from that sequencing we annotated each strain by orthologous gene groups (OGG). This annotation was done for each strain by counting the number of coding regions that matched to each orthologous gene groups in the eggNOG database (v5.0) database and filtering out gene-groups that had no matches. This created the matrix in BB669_oggs.mat where strains correspond to each row and OGGs correspond to each column and each entry holds the number of protein sequences that matched to that OGG.\nWe also measured the metabolic phenotype of these strains across a number of short-chain fatty acids and other small molecules. The file B669_metabolites_foldchange.csv contains the measurements we use in this paper, where each row contains a strain and the columns contain metabolite compounds the strains either digest or produce. The degree of digestion or production of each metabolite is compared as the ratio between the relative concentration of the compound in media cultured with the strain versus blank media without any strain. We take the log2 transform of this ratio and report the log2-fold-change (log2FC) as our measure of metabolic activity.\n\nBB669_ogg_data = matread(joinpath(bbdir, \"BB669_oggs.mat\"))\nmetadata = CSV.read(joinpath(bbdir, \"BB669_rowmeta.tsv\"), DataFrame; normalizenames=true)\nmetabolite_df = CSV.read(joinpath(bbdir, \"BB669_metabolites_foldchange.tsv\"), DataFrame)\nmetabolite_labels = replace.(names(metabolite_df), \"_rel\"=&gt;\"\")[3:end]\nrename!(metabolite_df, names(metabolite_df) .=&gt; CSV.normalizename.(names(metabolite_df)));\n\n\n#= \n    use function in helpers.jl to match measured orthologs in our strain bank \n    to those measured in UniProt bacteria.\n=#\nBBoggs_UPorder = match_column_order(\n    BB669_ogg_data[\"data\"], \n    BB669_ogg_data[\"var_names\"], \n    uniprot.var_names\n);\n\n\n# this finds all species with at least 20 strain replicates in the dataset\n# this subset of species are those we statistically test for strain level differences later on\nkeptspecies = string.(keys(sort(filter(x-&gt; last(x) &gt;= 20, countmap(metadata.Species)), byvalue=true, rev=true)))\nfilter!(!=(\"unclassified\"), keptspecies)\nkeptspecies_mask = in.(metadata.Species, Ref(keptspecies));\nkeptspecies # species with at least 20 replicates in the dataset\n\n11-element Vector{String}:\n \"Phocaeicola vulgatus\"\n \"[Ruminococcus] gnavus\"\n \"Bacteroides thetaiotaomicron\"\n \"Anaerostipes hadrus\"\n \"Bacteroides uniformis\"\n \"Blautia luti\"\n \"Bifidobacterium breve\"\n \"Coprococcus comes\"\n \"Dorea formicigenerans\"\n \"Blautia wexlerae\"\n \"[Eubacterium] rectale\"\n\n\nCreate unified file for future analysis, this will be easier to load in later notebooks\n\nbiobank_ogg = AnnData(\n    X=BB669_ogg_data[\"data\"],\n    obs_names=string.(BB669_ogg_data[\"obs_names\"]),\n    var_names=string.(BB669_ogg_data[\"var_names\"])\n)\nbiobank_ogg_UP = AnnData(\n    X=BBoggs_UPorder,\n    obs_names=string.(BB669_ogg_data[\"obs_names\"]),\n    var_names=uniprot.var_names\n)\n\nmet_mtx = metabolite_df[:, 3:end] |&gt;\n    x-&gt;coalesce.(x, NaN) |&gt; # missing values (just checking)\n    x-&gt;Matrix(x) |&gt; # convert datatype\n    x-&gt;log2.(x) |&gt; # actual transform\n    x-&gt;replace(x, -Inf =&gt; 0.0) # 0s in foldchange were below detection limit\n\n@show any(isnan, met_mtx)\n\nbiobank_met = AnnData(\n    X=met_mtx,\n    obs_names=metabolite_df[:, :ID],\n    var_names=names(metabolite_df)[3:end],\n    var=DataFrame(ID=names(metabolite_df)[3:end], label=metabolite_labels)\n)\nbiobank_met.layers[\"raw\"] = Matrix(coalesce.(metabolite_df[:, 3:end], NaN))\nbiobank = MuData(mod=Dict(\n    \"oggs\" =&gt; biobank_ogg,\n    \"UPorder_oggs\" =&gt; biobank_ogg_UP,\n    \"metabolites_foldchange\" =&gt; biobank_met,\n))\nbiobank.obs = insertcols(String.(metadata), :kept_species=&gt;keptspecies_mask)\nbiobank\n\nany(isnan, met_mtx) = false\n\n\n┌ Warning: Cannot join columns with the same name because var_names are intersecting.\n└ @ Muon /Users/bend/.julia/packages/Muon/UKjAF/src/mudata.jl:367\n\n\nMuData object 669 ✕ 21475\n└ metabolites_foldchange\n  AnnData object 669 ✕ 50\n└ oggs\n  AnnData object 669 ✕ 11248\n└ UPorder_oggs\n  AnnData object 669 ✕ 10177\n\n\n\nwriteh5mu(joinpath(bbdir, \"BB669.h5mu\"), biobank)",
    "crumbs": [
      "Setting up data"
    ]
  },
  {
    "objectID": "09_figure_s21.html",
    "href": "09_figure_s21.html",
    "title": "Fig. S22 - Pangenome analysis",
    "section": "",
    "text": "Julia Setup\nusing DrWatson\n@quickactivate projectdir()\nusing CSV, DataFrames, DataFramesMeta\nusing Chain\nusing StatsBase\nusing FreqTables\nusing Downloads: request, download",
    "crumbs": [
      "Fig. S22 - Pangenome analysis"
    ]
  },
  {
    "objectID": "09_figure_s21.html#bacteroidaceae---prokka",
    "href": "09_figure_s21.html#bacteroidaceae---prokka",
    "title": "Fig. S22 - Pangenome analysis",
    "section": "Bacteroidaceae - prokka",
    "text": "Bacteroidaceae - prokka\n\n## Prokka\nprokka_base_dir = joinpath(ddir, \"bacteroides_prokka\") |&gt; mkpath\nprokka_gff = joinpath(ddir, \"bacteroides_prokka_gff\") |&gt; mkpath;\n\n\nBacteroidaceae_df = @rsubset(strvardf_downsampled, :Family == \"Bacteroidaceae\");\n\n\n# 48 minutes per 27 samples\n@eachrow Bacteroidaceae_df begin\n    smp = :Label\n    genera = :Genus\n    outdir = joinpath(\"/data/bacteroides_prokka\", smp)\n    command = `docker run --rm -v $ddir:/data staphb/prokka prokka --force --kingdom Bacteria --genus $genera --locustag $smp --outdir $outdir /data/fasta_all/$(smp).fsa_nt`\n    # @show command\n    run(command)\nend;\n\n\nfor dir in readdir(prokka_base_dir)\n    cp(joinpath(prokka_base_dir, dir, \"PROKKA_10152024.gff\"), joinpath(prokka_gff, dir * \".gff\"))\nend",
    "crumbs": [
      "Fig. S22 - Pangenome analysis"
    ]
  },
  {
    "objectID": "09_figure_s21.html#bacteroidaceae---roary",
    "href": "09_figure_s21.html#bacteroidaceae---roary",
    "title": "Fig. S22 - Pangenome analysis",
    "section": "Bacteroidaceae - Roary",
    "text": "Bacteroidaceae - Roary\nRoury on nine P. vulgatus strains, 3 strain replicates from 3 different donors.\n\nrun(`\ndocker run --rm -v $ddir\\:/data staphb/roary roary -f ./roary_vulgatus -e -n -v $(\n\"/data/bacteroides_prokka_gff/\" .* filter(x -&gt; contains(x, r\"(vulgatus)\"), readdir(prokka_gff))\n)\n`)\n\nRoury on nine P. vulgatus strains, 3 strain replicates from 3 different donors\nPlus 9 strains of B. thetaiotaomicron (3 strain replicates from 3 different donors)\n\nrun(`\ndocker run --rm -v $ddir\\:/data staphb/roary roary -f ./roary_vulgatus_theta -e -n -v $(\n\"/data/bacteroides_prokka_gff/\" .* filter(x -&gt; contains(x, r\"(vulgatus)|(theta)\"), readdir(prokka_gff))\n)\n`)\n\nRoury on nine P. vulgatus strains, 3 strain replicates from 3 different donors\nPlus 9 strains of B. thetaiotaomicron (3 strain replicates from 3 different donors)\nPlus 9 strains of B. uniformis (3 strain replicates from 3 different donors)\n\n# took 30 minutes\nrun(`\ndocker run --rm -v $ddir\\:/data staphb/roary roary -f ./roary_vulgatus_theta_uniformis -e -n -v $(\n\"/data/bacteroides_prokka_gff/\" .* filter(x -&gt; contains(x, r\"(vulgatus)|(theta)|(uniformis)\"), readdir(prokka_gff))\n)\n`)",
    "crumbs": [
      "Fig. S22 - Pangenome analysis"
    ]
  },
  {
    "objectID": "09_figure_s21.html#full-trees",
    "href": "09_figure_s21.html#full-trees",
    "title": "Fig. S22 - Pangenome analysis",
    "section": "Full trees",
    "text": "Full trees\n\nv_tree = readnw(readline(joinpath(ddir, \"roary_vulgatus\", \"accessory_binary_genes.fa.newick\")))\nvt_tree = readnw(readline(joinpath(ddir, \"roary_vulgatus_theta\", \"accessory_binary_genes.fa.newick\")))\nvtu_tree = readnw(readline(joinpath(ddir, \"roary_vulgatus_theta_uniformis\", \"accessory_binary_genes.fa.newick\")))\n\n(((thetaiotaomicron_DFI.2.13_JAHOON01.1:0.0,thetaiotaomicron_DFI.2.69_JAHOOB01.1:0.0):5.0e-9,(((uniformis_DFI.1.173_JAJCQC01.1:5.0e-9,(uniformis_DFI.1.135_JAHOOY01.1:5.0e-9,uniformis_DFI.1.247_JAHOOT01.1:0.000500301)0.887:0.000500002)1.0:0.603367675,(((uniformis_MSK.16.39_JAHOKS01.1:0.0,uniformis_MSK.16.44_JAHOKO01.1:0.0):5.0e-9,uniformis_MSK.16.46_JAHOKN01.1:0.000249885)1.0:0.277643945,(uniformis_MSK.18.25_JAHOIE01.1:0.0,uniformis_MSK.18.30_JAHOID01.1:0.0,uniformis_MSK.18.33_JAHOIC01.1:0.0):5.0e-9)0.994:5.0e-9)1.0:0.603392367,(((vulgatus_DFI.1.126_JAJCQV01.1:0.0,vulgatus_DFI.1.127_JAJCQU01.1:0.0,vulgatus_DFI.1.133_JAJCQR01.1:0.0):0.008662128,vulgatus_DFI.3.23_JAJCMZ01.1:0.000147566)1.0:0.021838157,((vulgatus_MSK.16.10_JAHOLK01.1:0.000247821,(vulgatus_MSK.16.26_JAHOLB01.1:0.0,vulgatus_MSK.16.2_JAHOLF01.1:0.0):0.000502492)1.0:0.020982885,(vulgatus_DFI.3.15_JAJCNC01.1:5.0e-9,vulgatus_DFI.3.65_JAJCMX01.1:0.001000293)0.96:0.002430647)0.987:0.005639065)0.208:5.0e-9)1.0:0.070612547)1.0:0.011688911,(thetaiotaomicron_DFI.4.151_JAHONL01.1:5.0e-9,(thetaiotaomicron_DFI.4.108_JAHONP01.1:0.000500452,thetaiotaomicron_DFI.4.133_JAHONN01.1:0.000500396)0.841:0.000249888)0.997:0.002972506,(thetaiotaomicron_DFI.2.27_JAHOOK01.1:0.000249958,(thetaiotaomicron_DFI.1.169_JAJCQF01.1:5.0e-9,(thetaiotaomicron_DFI.1.128_JAJCQT01.1:0.000249958,thetaiotaomicron_DFI.1.150_JAHOOX01.1:5.0e-9)0.769:0.000249979)0.468:6.0e-9)1.0:0.015528138);\n\n\n\nps = []\nfor tree in [v_tree, vt_tree,vtu_tree]\n    ladderize!(tree)\n    p = plot(treeb)\n    push!(ps, p)\nend\nplot(ps..., layout=grid(1,3), size=(1200, 400), rightmargin=4Plots.cm)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsavefig(joinpath(pdir, \"full_pangenome_trees.pdf\"))\n\n\"/Users/bend/projects/Doran_etal_2023/plots/roary_pangenome/full_pangenome_trees.pdf\"",
    "crumbs": [
      "Fig. S22 - Pangenome analysis"
    ]
  },
  {
    "objectID": "05_figure_04.html",
    "href": "05_figure_04.html",
    "title": "Fig. 4 - Place New Strains in Spectral Tree",
    "section": "",
    "text": "julia-setup\nusing DrWatson\n@quickactivate projectdir()\n\nusing HypothesisTests\nusing MultipleTesting: adjust, BenjaminiHochberg, Bonferroni\nusing SpectralInference\nusing NeighborJoining\nusing NewickTree\nusing StatsBase\nusing CSV, DataFrames, Muon\ninclude(srcdir(\"helpers.jl\"))\n\nbbtreedir = datadir(\"exp_pro\", \"BB669\") |&gt; mkpath\npdir_csbtree = plotsdir(\"CSB669_trees\") |&gt; mkpath\npdir_csb_micurve = plotsdir(\"CSB669_micurve\") |&gt; mkpath\n\npdir = plotsdir(\"figure_03\") |&gt; mkpath\n\nusing StatsPlots\ntheme(:default, grid=false, label=false, tickdir=:out)\n\nusing RCall\nR\"\"\"\nlibrary(ape)\nlibrary(treeio)\nlibrary(ggtree)\nlibrary(ggplot2)\nlibrary(tidyverse)\n\nsetwd($(projectdir()))\n\"\"\";",
    "crumbs": [
      "Fig. 4 - Place New Strains in Spectral Tree"
    ]
  },
  {
    "objectID": "05_figure_04.html#sub-trees",
    "href": "05_figure_04.html#sub-trees",
    "title": "Fig. 4 - Place New Strains in Spectral Tree",
    "section": "Sub-trees",
    "text": "Sub-trees\nLet’s check some local neighbors around certain taxa. Expanding out from individual taxa shows the other strain replicates of that species. And, we see sub-species groupings!\n\nnthparent(n, i) = i &lt; 1 ? n : nthparent(parent(n), i-1)\nrename_treeleaves!(tree, idmapping) = begin\n    for node in getleaves(tree)\n        NewickTree.setname!(node, idmapping[name(node)])\n    end\n    tree\nend\n\nrename_treeleaves! (generic function with 1 method)\n\n\n\nbbtree_leaves = getleaves(bbtree);\n\n\ntargetid = \"DFI.1.13\"\nbasenode = bbtree_leaves[findfirst(n-&gt;name(n) == targetid, bbtree_leaves)]\nsubtree = readnw(nwstr(nthparent(basenode, 3)))\ntiplabels = join.(eachrow(biobank.obs[indexin(getleafnames(subtree), biobank.obs.Strain_ID), [:Strain_ID, :NCBI_Species]]), \" \")\nidmapping = Dict(k=&gt;v for (k,v) in zip(getleafnames(subtree), tiplabels))\nrename_treeleaves!(subtree, idmapping)\nplot(subtree,\n    c=:turquoise3, alpha=.5,\n    lw=2, fs=7,\n    size=(600,600),\n    rightmargin=5Plots.cm,\n    yflip=true\n)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntargetid = \"MSK.17.12\"\nbasenode = bbtree_leaves[findfirst(n-&gt;name(n) == targetid, bbtree_leaves)]\nsubtree = readnw(nwstr(nthparent(basenode, 3)))\ntiplabels = join.(eachrow(biobank.obs[indexin(getleafnames(subtree), biobank.obs.Strain_ID), [:Strain_ID, :NCBI_Species]]), \" \")\nidmapping = Dict(k=&gt;v for (k,v) in zip(getleafnames(subtree), tiplabels))\nrename_treeleaves!(subtree, idmapping)\nplot(subtree,\n    c=:goldenrod, alpha=.5,\n    lw=2, fs=7,\n    size=(600,600),\n    rightmargin=5Plots.cm,\n)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOne thing to notice as we view these sub trees is that they are grouping by NCBI species, but there are further sub-groupings within each species. The ID convention for our strains is “&lt;sampling hospital&gt;.&lt;donor&gt;.&lt;strain&gt;”. Knowing this naming convention we realized that the sub-groups were corresponding to the donor these strains were sampled from\nThis becomes more obvious as we color by donor id\n\ndonorcolormap = Dict(k=&gt;v for (k,v) in zip(unique(biobank.obs.Donor), palette(:glasbey_bw_n256, length(unique(biobank.obs.Donor)))));\n\n\n# sub-setting to B. uniformis strains\ntargetid = \"MSK.17.15\"\nbasenode = bbtree_leaves[findfirst(n-&gt;name(n) == targetid, bbtree_leaves)]\nsubtree = readnw(nwstr(nthparent(basenode, 1)))\nsubtree_ids = getleafnames(subtree)\n\nlinecolors = map(prewalk(subtree)) do node\n    leafids = getleafnames(node)\n    donorids = biobank.obs.Donor[indexin(leafids, biobank.obs.Strain_ID)]\n    length(unique(donorids)) == 1 ? donorcolormap[mode(donorids)] : :grey\nend |&gt; x-&gt;x[2:end] |&gt; permutedims\n\ntiplabels = join.(eachrow(biobank.obs[indexin(getleafnames(subtree), biobank.obs.Strain_ID), [:Strain_ID, :NCBI_Species]]), \" \")\nidmapping = Dict(k=&gt;v for (k,v) in zip(getleafnames(subtree), tiplabels))\nrename_treeleaves!(subtree, idmapping)\ntreep = plot(subtree,\n    c=linecolors,\n    lw=2, fs=7,\n    size=(600,600),\n    rightmargin=5Plots.cm,\n)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfullclims = getlims(biobank[\"metabolites_foldchange\"][biobank.obs_names[biobank.obs.kept_species.==1], :].X)\nmet_mtx = biobank[\"metabolites_foldchange\"][subtree_ids, [\"Acetate_rel\", \"Butyrate_rel\", \"Succinate_rel\"]].X\nhp = heatmap(met_mtx,\n    c=:bwr,\n    # clims=fullclims, \n    clims=getlims(met_mtx),\n    framestyle=:grid,\n    yticks=false,\n    xticks=(1:3, [\"Acetate\", \"Butyrate\", \"Succinate\"]),\n    xrotation=30,\n)\n\nplot(treep, hp, layout=@layout([a{0.6w} b]), size=(600,600), link=:y)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\nsavefig(joinpath(pdir, \"buniformis_with_metabolites.pdf\"))\n\n\"/Users/bend/projects/Doran_etal_2023/plots/figure_03/buniformis_with_metabolites.pdf\"\n\n\nWhat components were needed to resolve these clusters? If we plot the projections of the taxa onto each of the components, we see that differences between these sub-species clusters only really shows up after PC 10, which we can see by the beginning of banding in the heatmap.\n\nsubtree_idx = indexin(subtree_ids, biobank.obs.Strain_ID)\npltmtx = sign.(bbuhat[subtree_idx, :]) # sign of projection\n# pltmtx = sign.(bbuhat[subtree_idx, :]) .* log10.(abs.(bbuhat[subtree_idx, :])) # pseudo-logscale \n# pltmtx = bbuhat[subtree_idx, :] # actual projection\nxmarks = [1:9..., 10:10:90..., 100:100:900..., 1000:1000:7000...]\nheatmap(pltmtx, \n    xscale=:log10, \n    c=:bwr, \n    clims=getlims(pltmtx),\n    framestyle=:grid, \n    xticks=(xmarks, map(x-&gt; (log10(x) % 1 == 0) || x==7000 ? x : \"\", xmarks)),\n    xrotation=45,\n    xmirror=true,\n    xtickfontsize=7,\n    yticks=(1:length(subtree_idx), subtree_ids),\n    size=(1200, 500),\n    margin=5Plots.mm,\n    topmargin=10Plots.mm,\n    gridalpha=1,\n    xlabel=\"Principal component\",\n)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n# sub-setting to M. gnavus strains\ntargetid = \"MSK.22.24\"\nbasenode = bbtree_leaves[findfirst(n-&gt;name(n) == targetid, bbtree_leaves)]\nsubtree = readnw(nwstr(nthparent(basenode, 9)))\nsubtree_ids = getleafnames(subtree)\n\nlinecolors = map(prewalk(subtree)) do node\n    leafids = getleafnames(node)\n    donorids = biobank.obs.Donor[indexin(leafids, biobank.obs.Strain_ID)]\n    length(unique(donorids)) == 1 ? donorcolormap[mode(donorids)] : :grey\nend |&gt; x-&gt;x[2:end] |&gt; permutedims\n\ntiplabels = join.(eachrow(biobank.obs[indexin(getleafnames(subtree), biobank.obs.Strain_ID), [:Strain_ID, :NCBI_Species]]), \" \")\nidmapping = Dict(k=&gt;v for (k,v) in zip(getleafnames(subtree), tiplabels))\nrename_treeleaves!(subtree, idmapping)\ntreep = plot(subtree,\n    c=linecolors,\n    lw=2, fs=7,\n    size=(600,600),\n    rightmargin=5Plots.cm,\n)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfullclims = getlims(biobank[\"metabolites_foldchange\"][biobank.obs_names[biobank.obs.kept_species.==1], :].X)\nmet_mtx = biobank[\"metabolites_foldchange\"][subtree_ids, [\"Acetate_rel\", \"Butyrate_rel\", \"Succinate_rel\"]].X\nhp = heatmap(met_mtx,\n    c=:bwr,\n    # clims=fullclims, \n    clims=getlims(met_mtx),\n    framestyle=:grid,\n    yticks=false,\n    xticks=(1:3, [\"Acetate\", \"Butyrate\", \"Succinate\"]),\n    xrotation=30,\n)\n\nplot(treep, hp, layout=@layout([a{0.6w} b]), size=(600,600), link=:y)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\nsavefig(joinpath(pdir, \"mgnavus_with_metabolites.pdf\"))\n\n\"/Users/bend/projects/Doran_etal_2023/plots/figure_03/mgnavus_with_metabolites.pdf\"\n\n\n\nsubtree_idx = indexin(subtree_ids, biobank.obs.Strain_ID)\npltmtx = sign.(bbuhat[subtree_idx, :]) # sign of projection\n# pltmtx = sign.(bbuhat[subtree_idx, :]) .* log10.(abs.(bbuhat[subtree_idx, :])) # pseudo-logscale \n# pltmtx = bbuhat[subtree_idx, :] # actual projection\nxmarks = [1:9..., 10:10:90..., 100:100:900..., 1000:1000:7000...]\nheatmap(pltmtx, \n    xscale=:log10, \n    c=:bwr, \n    clims=getlims(pltmtx),\n    framestyle=:grid, \n    xticks=(xmarks, map(x-&gt; (log10(x) % 1 == 0) || x==7000 ? x : \"\", xmarks)),\n    xrotation=45,\n    xmirror=true,\n    xtickfontsize=7,\n    yticks=(1:length(subtree_idx), subtree_ids),\n    size=(1200, 500),\n    margin=5Plots.mm,\n    topmargin=10Plots.mm,\n    gridalpha=1,\n    xlabel=\"Principal component\",\n)",
    "crumbs": [
      "Fig. 4 - Place New Strains in Spectral Tree"
    ]
  },
  {
    "objectID": "05_figure_04.html#mutual-information-across-tree",
    "href": "05_figure_04.html#mutual-information-across-tree",
    "title": "Fig. 4 - Place New Strains in Spectral Tree",
    "section": "Mutual information across tree",
    "text": "Mutual information across tree\nAgain we wan’t to look systematically over our tree, to verify that the patterns we saw in the above two examples are consistent with the general patterns in the tree.\nThus we compare grouping in our tree to both NCBI taxonomy and GTDB taxonomy.\n\nNCBI taxonomy\n\nNBOOTS = 50;\ncolnames = [:NCBI_Phylum, :NCBI_Class, :NCBI_Order, :NCBI_Family, :NCBI_Genus, :NCBI_Species, :Donor];\n\n\nBB_NCBI_taxonomy = biobank.obs[:, colnames]\nobs_names = biobank.obs_names.vals;\nrowmask = map(eachrow(BB_NCBI_taxonomy)) do row\n    !any(==(\"&lt;unclassified&gt;\"), row)\nend;\n# takes ~ 5 min\nmi_results = map(1:NBOOTS) do i\n    pairedMI_across_treedepth(eachcol(BB_NCBI_taxonomy), obs_names, bbtree; mask=rowmask, bootstrap=true, ncuts=100, treecut_distancefun=network_distance)\nend;\n\n\nmi_results_df = DataFrame()\nfor (i, res) in enumerate(mi_results)\n    mi_results_df = vcat(\n        mi_results_df, \n        hcat(\n            DataFrame(bootstrap=i, treedepth=last(res)),\n            DataFrame(first(res), colnames),\n            DataFrame(scaledcumsum.(first(res)), string.(colnames) .* \"_scaledcumsum\"),\n        )\n    )\nend\n\nCSV.write(joinpath(bbtreedir, \"NCBI_raw_MI_values.csv\"), mi_results_df)\nfirst(mi_results_df, 5)\n\n5×16 DataFrame\n\n\n\nRow\nbootstrap\ntreedepth\nNCBI_Phylum\nNCBI_Class\nNCBI_Order\nNCBI_Family\nNCBI_Genus\nNCBI_Species\nDonor\nNCBI_Phylum_scaledcumsum\nNCBI_Class_scaledcumsum\nNCBI_Order_scaledcumsum\nNCBI_Family_scaledcumsum\nNCBI_Genus_scaledcumsum\nNCBI_Species_scaledcumsum\nDonor_scaledcumsum\n\n\n\nInt64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\n\n\n\n\n1\n1\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n2\n1\n0.414141\n0.00850462\n0.00809241\n0.00835621\n0.00642135\n0.000619266\n9.23656e-5\n0.000151046\n0.00112313\n0.0010973\n0.00113385\n0.000976177\n0.000189988\n4.17765e-5\n0.000801146\n\n\n3\n1\n0.828283\n0.00842231\n0.00833935\n0.00836786\n0.00637592\n0.000642796\n5.49416e-5\n0.000110533\n0.00223539\n0.00222809\n0.00226928\n0.00194545\n0.000387196\n6.66263e-5\n0.00138741\n\n\n4\n1\n1.24242\n0.00985023\n0.0100184\n0.00994812\n0.00741618\n0.000701392\n6.94886e-5\n0.000233373\n0.00353622\n0.00358655\n0.00361914\n0.00307286\n0.00060238\n9.80556e-5\n0.00262521\n\n\n5\n1\n1.65657\n0.0100412\n0.00998145\n0.00932413\n0.00731046\n0.000887492\n0.0001033\n0.000168606\n0.00486228\n0.00494\n0.00488432\n0.0041842\n0.000874659\n0.000144778\n0.00351949\n\n\n\n\n\n\n\npltdf = mi_results_df |&gt;\n    df -&gt; stack(df, 10:16, [:bootstrap, :treedepth]) |&gt; \n    df -&gt; transform(df, :variable =&gt; ByRow(x-&gt;replace(x, \"_scaledcumsum\"=&gt;\"\")) =&gt; identity) |&gt;\n    df -&gt; groupby(df, [:variable, :treedepth]) |&gt;\n    df -&gt; combine(df,\n        :value =&gt; mean =&gt; :MI_mean,\n        :value =&gt; std =&gt; :MI_std,\n    ) |&gt; \n    df -&gt; sort(df, [])\n\ntaxonomylevels = permutedims(string.(colnames))\ntaxarankcolors = [:red :pink :orange :lightblue :green :aqua :lightgreen];\n\nplot(title=\"CSB spectral tree (NCBI)\", ylabel=\"Cumulative MI\\n (density)\", xlabel=\"Spectral Tree depth\",\n    legend=:outerright,\n    size=(700,250),\n    margin=5Plots.mm,  \n)\nfor (tlab, tcol) in reverse(collect(zip(taxonomylevels, taxarankcolors)))\n    df = filter(:variable =&gt; ==(tlab), pltdf)\n    @df df plot!(:treedepth, :MI_mean, ribbon=2 .* :MI_std, label=tlab, c=tcol, lw=1)\nend\nplot!()\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGTDB Taxonomy\n\nNBOOTS = 50;\ncolnames = [:GTDB_Phylum, :GTDB_Class, :GTDB_Order, :GTDB_Family, :GTDB_Genus, :GTDB_Species, :Donor];\n\n\nBB_NCBI_taxonomy = biobank.obs[:, colnames]\nobs_names = biobank.obs_names.vals;\nrowmask = map(eachrow(BB_NCBI_taxonomy)) do row\n    !any(==(\"&lt;unclassified&gt;\"), row)\nend;\n# takes ~ 5 min\nmi_results = map(1:NBOOTS) do i\n    pairedMI_across_treedepth(eachcol(BB_NCBI_taxonomy), obs_names, bbtree; mask=rowmask, bootstrap=true, ncuts=100, treecut_distancefun=network_distance)\nend;\n\n\nmi_results_df = DataFrame()\nfor (i, res) in enumerate(mi_results)\n    mi_results_df = vcat(\n        mi_results_df, \n        hcat(\n            DataFrame(bootstrap=i, treedepth=last(res)),\n            DataFrame(first(res), colnames),\n            DataFrame(scaledcumsum.(first(res)), string.(colnames) .* \"_scaledcumsum\"),\n        )\n    )\nend\n\nCSV.write(joinpath(bbtreedir, \"GTDB_raw_MI_values.csv\"), mi_results_df)\nfirst(mi_results_df, 5)\n\n5×16 DataFrame\n\n\n\nRow\nbootstrap\ntreedepth\nGTDB_Phylum\nGTDB_Class\nGTDB_Order\nGTDB_Family\nGTDB_Genus\nGTDB_Species\nDonor\nGTDB_Phylum_scaledcumsum\nGTDB_Class_scaledcumsum\nGTDB_Order_scaledcumsum\nGTDB_Family_scaledcumsum\nGTDB_Genus_scaledcumsum\nGTDB_Species_scaledcumsum\nDonor_scaledcumsum\n\n\n\nInt64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\n\n\n\n\n1\n1\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n2\n1\n0.414141\n0.00853729\n0.00830565\n0.00795017\n0.00702883\n0.000448211\n3.18137e-5\n0.000232687\n0.00118489\n0.00115355\n0.00110083\n0.00111744\n0.000151996\n1.50974e-5\n0.00132657\n\n\n3\n1\n0.828283\n0.00820851\n0.00839012\n0.00832932\n0.00641712\n0.00046902\n3.44598e-5\n0.000162505\n0.00232414\n0.00231883\n0.00225415\n0.00213764\n0.000311049\n3.14506e-5\n0.00225302\n\n\n4\n1\n1.24242\n0.00968021\n0.00965786\n0.00950944\n0.0082036\n0.00041402\n3.02168e-5\n0.00027292\n0.00366766\n0.00366019\n0.00357089\n0.00344185\n0.00045145\n4.57903e-5\n0.00380895\n\n\n5\n1\n1.65657\n0.00987676\n0.00938308\n0.00932834\n0.00809571\n0.000429243\n5.0877e-5\n0.000268859\n0.00503845\n0.00496338\n0.00486255\n0.0047289\n0.000597014\n6.99344e-5\n0.00534174\n\n\n\n\n\n\n\npltdf = mi_results_df |&gt;\n    df -&gt; stack(df, 10:16, [:bootstrap, :treedepth]) |&gt; \n    df -&gt; transform(df, :variable =&gt; ByRow(x-&gt;replace(x, \"_scaledcumsum\"=&gt;\"\")) =&gt; identity) |&gt;\n    df -&gt; groupby(df, [:variable, :treedepth]) |&gt;\n    df -&gt; combine(df,\n        :value =&gt; mean =&gt; :MI_mean,\n        :value =&gt; std =&gt; :MI_std,\n    ) |&gt; \n    df -&gt; sort(df, [])\n\ntaxonomylevels = permutedims(string.(colnames))\ntaxarankcolors = [:red :pink :orange :lightblue :green :aqua :lightgreen];\n\nplot(title=\"CSB spectral tree (GTDB)\",  ylabel=\"Cumulative MI\\n (density)\", xlabel=\"Spectral Tree depth\",\n    legend=:outerright,\n    size=(700,250),\n    margin=5Plots.mm,  \n)\nfor (tlab, tcol) in reverse(collect(zip(taxonomylevels, taxarankcolors)))\n    df = filter(:variable =&gt; ==(tlab), pltdf)\n    @df df plot!(:treedepth, :MI_mean, ribbon=2 .* :MI_std, label=tlab, c=tcol, lw=1)\nend\nplot!()",
    "crumbs": [
      "Fig. 4 - Place New Strains in Spectral Tree"
    ]
  },
  {
    "objectID": "05_figure_04.html#relative-distances",
    "href": "05_figure_04.html#relative-distances",
    "title": "Fig. 4 - Place New Strains in Spectral Tree",
    "section": "Relative Distances",
    "text": "Relative Distances\nComparing the Spectral tree to the 16S or bac120 trees. We find that we are able to represent genomic strain level variation where neither 16S nor Bac120 annotations can.\n\n# strain ids for 669 samples in CSB\nobs_names = biobank.obs.Strain_ID;\n\n# re-read in biobank tree (same as what is plotted above)\nbbtree = readnw(readline(joinpath(bbtreedir, \"BB669-tree.nw\")))\nas_polytomy!(n-&gt;NewickTree.support(n)&lt;0.5, bbtree)\nladderize!(bbtree)\nleafnames_spitree = getleafnames(bbtree); # same order as returned by patristic_distances\norder_treespitree = indexin(leafnames_spitree, obs_names);\n\n# read in tree built from bac120 annotations\ntreebac120 = readnw(readline(projectdir(\"_research\",\"BB669_bac120_phyml\",\"BB669_bac120.phy-supporttree.txt\")))\nas_polytomy!(n-&gt;NewickTree.support(n)&lt;0.5, treebac120)\nladderize!(treebac120)\nleafnames_bac120 = getleafnames(treebac120); # same order as returned by patristic_distances\norder_treebac120 = indexin(leafnames_bac120, obs_names);\n\n# read in tree built from 16S sequence\ntree16s = readnw(readline(projectdir(\"_research\",\"BB669_16S_phyml\",\"BB669_16S.phy-supporttree.txt\")))\nas_polytomy!(n-&gt;NewickTree.support(n)&lt;0.5, tree16s)\nladderize!(tree16s)\nleafnames_16S = getleafnames(tree16s); # same order as returned by patristic_distances\norder_tree16S = indexin(leafnames_16S, obs_names);\n\n# 1 taxa from the CSB got dropped because we couldn't get a good annotated 16S read\n# so I am collecting the sample mapping here between the taxa in the tree and\n# the taxa in CSB\norder_spi_tree16s = indexin(leafnames_16S, leafnames_spitree);\n# likewise 5 taxa from CSB got dropped when annotating with bac120\norder_spi_treebac120 = indexin(leafnames_bac120, leafnames_spitree);\n\n\nbbtaxa = biobank.obs[:,[:NCBI_Phylum, :NCBI_Class, :NCBI_Order, :NCBI_Family, :NCBI_Genus, :NCBI_Species]];\ntaxanomicdistance = pairwise(eachrow(Matrix(bbtaxa)[:,6:-1:1])) do a, b\n    x = findfirst(a .== replace(b, \"&lt;unclassified&gt;\"=&gt;\"missing\"))\n    x === nothing ? 6 : x-1\nend;\n\n\n# get patristic distances between each leaf of the spectral tree\nsixPij = patristic_distances(tree16s);\nbacPij = patristic_distances(treebac120);\nspiPij = patristic_distances(bbtree);\n\n# mask to collect just upper triangle of distance matrix for each dataset\nuppertriangle_six = triu(trues(size(sixPij)), 1);\nuppertriangle_bac = triu(trues(size(bacPij)), 1);\nuppertriangle_spi = triu(trues(size(spiPij)), 1);\n\n# get upper triangle\nsixPij = sixPij[uppertriangle_six];\nbacPij = bacPij[uppertriangle_bac];\nspiPij = spiPij[uppertriangle_spi];\n\n# reorder distance matrix to same order as metadata file\nsixTij = taxanomicdistance[order_tree16S, order_tree16S][uppertriangle_six];\nbacTij = taxanomicdistance[order_treebac120, order_treebac120][uppertriangle_bac];\nspiTij = taxanomicdistance[order_treespitree, order_treespitree][uppertriangle_spi];\n\n# scaled distances to between 0 and 1\nspiPij_rel = (spiPij ./ maximum(spiPij));\nbacPij_rel = (bacPij ./ maximum(bacPij));\nsixPij_rel = (sixPij ./ maximum(sixPij));\n\n\n\nplot relative density distributions\np1 = plot(\n    xlims=(0,1), \n    widen=1, \n    xticks=(0:.25:1, [\"0.0\", \"\", \"0.5\", \"\", \"1.0\"]),\n    # ylabel=\"same species\",\n    # size=(400, 250),\n)\n# patristic distance of pairs that are the same genus\nviolin!([\"same\\n genus\"], spiPij_rel[spiTij .== 1], # normed dist\n    trim=true, side=:right,\n    c=:blue, fill=0, linecolor=:black, lw=1,\n    label=\"Spectral tree\",\n    permute=(:x, :y),\n)\nviolin!([\"same\\n genus\"], bacPij_rel[bacTij .== 1], # normed dist\n    trim=true, side=:right,\n    c=:yellow, fill=0, linecolor=:black, lw=1,\n    label=\"Bac120 tree\",\n    permute=(:x, :y),\n)\n# patristic distance of pairs that are the same species\nviolin!([\"same\\n species\"], spiPij_rel[spiTij .== 0], # normed dist\n    trim=true, side=:right,\n    c=:blue, fill=0, linecolor=:black, lw=1,\n    # label=\"Spectral Tree\",\n    permute=(:x, :y),\n)\nviolin!([\"same\\n species\"], bacPij_rel[bacTij .== 0], # normed dist\n    trim=true, side=:right,\n    c=:yellow, fill=0, linecolor=:black, lw=1,\n    # label=\"16S\",\n    permute=(:x, :y),\n)\n\np2 = plot(\n    xlims=(0,1), \n    widen=1, \n    xticks=(0:.25:1, [\"0.0\", \"\", \"0.5\", \"\", \"1.0\"]),\n    # ylabel=\"same species\",\n    # size=(400, 250),\n)\n# patristic distance of pairs that are the same genus\nviolin!([\"same\\n genus\"], spiPij_rel[spiTij .== 1], # normed dist\n    trim=true, side=:right,\n    c=:blue, fill=0, linecolor=:black, lw=1,\n    label=\"Spectral tree\",\n    permute=(:x, :y),\n)\nviolin!([\"same\\n genus\"], sixPij_rel[sixTij .== 1], # normed dist\n    trim=true, side=:right,\n    c=:orange, fill=0, linecolor=:black, lw=1,\n    label=\"16S tree\",\n    permute=(:x, :y),\n)\n# patristic distance of pairs that are the same species\nviolin!([\"same\\n species\"], spiPij_rel[spiTij .== 0], # normed dist\n    trim=true, side=:right,\n    c=:blue, fill=0, linecolor=:black, lw=1,\n    # label=\"Spectral Tree\",\n    permute=(:x, :y),\n)\nviolin!([\"same\\n species\"], sixPij_rel[sixTij .== 0], # normed dist\n    trim=true, side=:right,\n    c=:orange, fill=0, linecolor=:black, lw=1,\n    # label=\"16S\",\n    permute=(:x, :y),\n)\nplot(p1, p2, layout=grid(1,2), size=(800, 250), margin=3Plots.mm)\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# difference in distributions is significant to below floating point precision\n# same species distributions\n@show pval = pvalue(MannWhitneyUTest(spiPij_rel[spiTij.==0], bacPij_rel[bacTij.==0]); tail=:both);\n@show pval = pvalue(MannWhitneyUTest(spiPij_rel[spiTij.==0], sixPij_rel[sixTij.==0]); tail=:both);\n# same genus but different species distributions\n@show pval = pvalue(MannWhitneyUTest(spiPij_rel[spiTij.==1], bacPij_rel[bacTij.==0]); tail=:both);\n@show pval = pvalue(MannWhitneyUTest(spiPij_rel[spiTij.==1], sixPij_rel[sixTij.==0]); tail=:both);\n\npval = pvalue(MannWhitneyUTest(spiPij_rel[spiTij .== 0], bacPij_rel[bacTij .== 0]); tail = :both) = 0.0\npval = pvalue(MannWhitneyUTest(spiPij_rel[spiTij .== 0], sixPij_rel[sixTij .== 0]); tail = :both) = 0.0\npval = pvalue(MannWhitneyUTest(spiPij_rel[spiTij .== 1], bacPij_rel[bacTij .== 0]); tail = :both) = 0.0\npval = pvalue(MannWhitneyUTest(spiPij_rel[spiTij .== 1], sixPij_rel[sixTij .== 0]); tail = :both) = 0.0\n\n\n\nplot(xlims=(0,.3), size=(600,200), tickdir=:out)\nhistogram!(spiPij_rel[spiTij.==0], nbins=50, c=:blue, alpha=.5, label=\"Spectral tree\")\nhistogram!(bacPij_rel[bacTij.==0], nbins=15, c=:yellow, alpha=.5, label=\"Bac120 tree\")\nhistogram!(sixPij_rel[sixTij.==0], nbins=50, c=:orange, alpha=.5, label=\"16S tree\")\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 = histogram(bacPij_rel[bacTij.==0], nbins=0:0.01:0.35, c=:yellow, alpha=.5, label=\"Bac120 tree\")\np2 = histogram(sixPij_rel[sixTij.==0], nbins=0:0.01:0.35, c=:orange, alpha=.5, label=\"16S tree\")\np3 = histogram(spiPij_rel[spiTij.==0], nbins=0:0.01:0.35, c=:blue, alpha=.5, label=\"Spectral tree\")\nplot(p1, p2, p3, layout = grid(3,1), size=(500, 400), lw=0.5)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsavefig(joinpath(pdir, \"reative-distance-of-samespecies-pairs-histograms.pdf\"))\n\n\"/Users/bend/projects/Doran_etal_2023/plots/figure_03/reative-distance-of-samespecies-pairs-histograms.pdf\"",
    "crumbs": [
      "Fig. 4 - Place New Strains in Spectral Tree"
    ]
  },
  {
    "objectID": "05_figure_04.html#ks-and-wilcoxon-test-of-each-distribution",
    "href": "05_figure_04.html#ks-and-wilcoxon-test-of-each-distribution",
    "title": "Fig. 4 - Place New Strains in Spectral Tree",
    "section": "KS and wilcoxon test of each distribution",
    "text": "KS and wilcoxon test of each distribution\n\nxdata = squareform(taxanomicdistance)\nydata1 = squareform((dij ./ maximum(dij)))\nydata2 = squareform((BBdij ./ maximum(BBdij)))\nfor i in 0:n\n    mask = xdata .== i\n    pval = pvalue(ApproximateTwoSampleKSTest(ydata1[mask], ydata2[mask]))\n    @show (i, pval * 7)\nend\n\n(i, pval * 7) = (0, 1.4737693215045304e-24)\n(i, pval * 7) = (1, 0.0)\n(i, pval * 7) = (2, 0.0)\n(i, pval * 7) = (3, 0.0)\n(i, pval * 7) = (4, NaN)\n(i, pval * 7) = (5, 0.0)\n(i, pval * 7) = (6, 0.0)\n\n\n\nxdata = squareform(taxanomicdistance)\nydata1 = squareform((dij ./ maximum(dij)))\nydata2 = squareform((BBdij ./ maximum(BBdij)))\nfor i in [0, 1, 2, 3, 5, 6]\n    mask = xdata .== i\n    pval = pvalue(MannWhitneyUTest(ydata1[mask], ydata2[mask]); tail=:right)\n    @show (i, pval * 7)\nend\n\n(i, pval * 7) = (0, 0.4301946781397137)\n(i, pval * 7) = (1, 0.0)\n(i, pval * 7) = (2, 0.0)\n(i, pval * 7) = (3, 0.0)\n(i, pval * 7) = (5, 0.0)\n(i, pval * 7) = (6, 0.0)",
    "crumbs": [
      "Fig. 4 - Place New Strains in Spectral Tree"
    ]
  },
  {
    "objectID": "05_figure_04.html#conflated-pairs",
    "href": "05_figure_04.html#conflated-pairs",
    "title": "Fig. 4 - Place New Strains in Spectral Tree",
    "section": "Conflated pairs",
    "text": "Conflated pairs\n\nissameorder = taxanomicdistance .== 3;\nspeciesthreshold = mean(allspeciesdists)+1.5std(allspeciesdists)\n\n0.171036523273783\n\n\nThere are no pairs of taxa that are from different families that are closer together than any pair of strains that belong to the same species, when we contextualize by the entire distribution of bacteria in UniProt.\n\nBBUPisbelowthreshold = dij .&lt; speciesthreshold;\nany(issameorder .& BBUPisbelowthreshold)\n\nfalse\n\n\nIf we constrain ourselves to just our strain bank there are pairs of taxa that are from different families that are closer together than any pair of strains that belong to the same species.\n\nBBisbelowthreshold = BBdij .&lt; speciesthreshold\nany(issameorder .& BBisbelowthreshold)\n\ntrue\n\n\n\nincorrecttaxa = union(getindex.(findall(issameorder .& BBisbelowthreshold), 1), getindex.(findall(issameorder .& BBisbelowthreshold), 2))\norderedincorrecttaxa = incorrecttaxa[sortperm(bbtaxa[incorrecttaxa, :].NCBI_Family)];\n\n\norderedincorrecttaxa_families = bbtaxa[orderedincorrecttaxa, :NCBI_Family];\n\n\ncountmap(orderedincorrecttaxa_families)\n\nDict{String, Int64} with 6 entries:\n  \"Rikenellaceae\"    =&gt; 9\n  \"Oscillospiraceae\" =&gt; 1\n  \"Prevotellaceae\"   =&gt; 14\n  \"Tannerellaceae\"   =&gt; 19\n  \"Lachnospiraceae\"  =&gt; 1\n  \"Bacteroidaceae\"   =&gt; 214\n\n\n\nfam_labs = unique(orderedincorrecttaxa_families)\nfam_results = map(fam_labs) do fam\n    idxs = findall(==(fam), orderedincorrecttaxa_families)\n    (; pos=mean(idxs), len=length(idxs), lab=fam)\nend\ntick_results = filter(x-&gt;x.len &gt; 1, fam_results)\n\n4-element Vector{@NamedTuple{pos::Float64, len::Int64, lab::String}}:\n (pos = 107.5, len = 214, lab = \"Bacteroidaceae\")\n (pos = 223.5, len = 14, lab = \"Prevotellaceae\")\n (pos = 235.0, len = 9, lab = \"Rikenellaceae\")\n (pos = 249.0, len = 19, lab = \"Tannerellaceae\")\n\n\n\npltmtx = float.((issameorder .& BBisbelowthreshold)[orderedincorrecttaxa, orderedincorrecttaxa])\npltmtx[pltmtx .== 0] .= NaN\nplot(\n    size=(600,600), \n    ticks=(getfield.(tick_results, :pos), getfield.(tick_results, :lab)),\n    xrotation=30,\n)\nheatmap!(pltmtx, c=[:white, :orange], ratio=1,\n)\nvline!([217, 230, 239], c=:black, lw=1)\nhline!([217, 230, 239], c=:black, lw=1)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\nsavefig(joinpath(pdir, \"incorrecttaxa_heatmap.pdf\"))\n\n\"/Users/bend/projects/Doran_etal_2023/plots/figure_03/incorrecttaxa_heatmap.pdf\"",
    "crumbs": [
      "Fig. 4 - Place New Strains in Spectral Tree"
    ]
  }
]